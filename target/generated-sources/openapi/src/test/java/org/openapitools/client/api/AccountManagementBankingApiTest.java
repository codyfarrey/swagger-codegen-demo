/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BulkMultiStatusResponse;
import org.openapitools.client.model.BusinessRejectResponse;
import org.openapitools.client.model.ForbiddenRequestResponse;
import org.openapitools.client.model.GwApiV1BankInstructionsPostRequest;
import org.openapitools.client.model.GwApiV1BankInstructionsQueryPost201Response;
import org.openapitools.client.model.GwApiV1BankInstructionsQueryPostRequest;
import org.openapitools.client.model.GwApiV1ClientInstructionsClientInstructionIdGet200Response;
import org.openapitools.client.model.GwApiV1ExternalAssetTransfersPostRequest;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersPostRequest;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPost201Response;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPost202Response;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPostRequest;
import org.openapitools.client.model.GwApiV1InstructionsCancelPostRequest;
import org.openapitools.client.model.GwApiV1InstructionsQueryPostRequest;
import org.openapitools.client.model.GwApiV1InternalAssetTransfersPostRequest;
import org.openapitools.client.model.GwApiV1InternalCashTransfersPostRequest;
import org.openapitools.client.model.InstructionResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.NoSuchInstructionResponse;
import org.openapitools.client.model.NoSuchInstructionSetResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountManagementBankingApi
 */
@Disabled
public class AccountManagementBankingApiTest {

    private final AccountManagementBankingApi api = new AccountManagementBankingApi();

    /**
     * Manage Bank Instructions
     *
     * Create or delete bank instructions by accountId. Only ACH and EDDA are supported for &#39;Create&#39;.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1BankInstructionsPostTest() throws ApiException {
        String clientId = null;
        GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest = null;
        InstructionResponse response = api.gwApiV1BankInstructionsPost(clientId, gwApiV1BankInstructionsPostRequest);
        // TODO: test validations
    }

    /**
     * View Bank Instructions
     *
     * View active bank instructions for an accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1BankInstructionsQueryPostTest() throws ApiException {
        String clientId = null;
        GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest = null;
        GwApiV1BankInstructionsQueryPost201Response response = api.gwApiV1BankInstructionsQueryPost(clientId, gwApiV1BankInstructionsQueryPostRequest);
        // TODO: test validations
    }

    /**
     * Get Status For ClientInstructionId
     *
     * Retrieve status of request by clientInstructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1ClientInstructionsClientInstructionIdGetTest() throws ApiException {
        String clientId = null;
        Integer clientInstructionId = null;
        GwApiV1ClientInstructionsClientInstructionIdGet200Response response = api.gwApiV1ClientInstructionsClientInstructionIdGet(clientId, clientInstructionId);
        // TODO: test validations
    }

    /**
     * Transfer Positions Externally (ACATS, ATON, FOP, DWAC, Complex Asset Transfer)
     *
     * Initiate request to submit external position transfer. Methods- ACATS, ATON, Basic FOP, FOP, DWAC. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers/&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1ExternalAssetTransfersPostTest() throws ApiException {
        String clientId = null;
        GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest = null;
        InstructionResponse response = api.gwApiV1ExternalAssetTransfersPost(clientId, gwApiV1ExternalAssetTransfersPostRequest);
        // TODO: test validations
    }

    /**
     * Transfer Cash Externally
     *
     * Initiate request to deposit or withdrawal between IBKR account and bank account. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1ExternalCashTransfersPostTest() throws ApiException {
        String clientId = null;
        GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest = null;
        InstructionResponse response = api.gwApiV1ExternalCashTransfersPost(clientId, gwApiV1ExternalCashTransfersPostRequest);
        // TODO: test validations
    }

    /**
     * View Cash Balances
     *
     * View available cash for withdrawal with and without margin loan by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1ExternalCashTransfersQueryPostTest() throws ApiException {
        String clientId = null;
        GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest = null;
        GwApiV1ExternalCashTransfersQueryPost201Response response = api.gwApiV1ExternalCashTransfersQueryPost(clientId, gwApiV1ExternalCashTransfersQueryPostRequest);
        // TODO: test validations
    }

    /**
     * Get Status For InstructionSetId
     *
     * Retrieve status of all requests associated with instructionSetId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InstructionSetsInstructionSetIdGetTest() throws ApiException {
        String clientId = null;
        Integer instructionSetId = null;
        BulkMultiStatusResponse response = api.gwApiV1InstructionSetsInstructionSetIdGet(clientId, instructionSetId);
        // TODO: test validations
    }

    /**
     * Cancel Request
     *
     * Cancel request by instructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InstructionsCancelPostTest() throws ApiException {
        String clientId = null;
        GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest = null;
        InstructionResponse response = api.gwApiV1InstructionsCancelPost(clientId, gwApiV1InstructionsCancelPostRequest);
        // TODO: test validations
    }

    /**
     * Get Status For InstructionId
     *
     * Retrieve status of request by instructionId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InstructionsInstructionIdGetTest() throws ApiException {
        String clientId = null;
        Integer instructionId = null;
        GwApiV1ClientInstructionsClientInstructionIdGet200Response response = api.gwApiV1InstructionsInstructionIdGet(clientId, instructionId);
        // TODO: test validations
    }

    /**
     * Get Transaction History
     *
     * Query list of recent transactions (up to 30 days) based on accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InstructionsQueryPostTest() throws ApiException {
        String clientId = null;
        GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest = null;
        InstructionResponse response = api.gwApiV1InstructionsQueryPost(clientId, gwApiV1InstructionsQueryPostRequest);
        // TODO: test validations
    }

    /**
     * Transfer Positions Internally
     *
     * Transfer positions internally between two accounts with Interactive Brokers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InternalAssetTransfersPostTest() throws ApiException {
        String clientId = null;
        GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest = null;
        InstructionResponse response = api.gwApiV1InternalAssetTransfersPost(clientId, gwApiV1InternalAssetTransfersPostRequest);
        // TODO: test validations
    }

    /**
     * Transfer Cash Internally
     *
     * Transfer cash internally between two accounts with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1InternalCashTransfersPostTest() throws ApiException {
        String clientId = null;
        GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest = null;
        InstructionResponse response = api.gwApiV1InternalCashTransfersPost(clientId, gwApiV1InternalCashTransfersPostRequest);
        // TODO: test validations
    }

}
