/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlgosResponse;
import org.openapitools.client.model.BondFiltersResponse;
import org.openapitools.client.model.ContractInfo;
import org.openapitools.client.model.ContractRules;
import org.openapitools.client.model.CurrencyPairsValueInner;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Features;
import org.openapitools.client.model.IserverContractConidInfoAndRulesGet200Response;
import org.openapitools.client.model.IserverContractRulesPostRequest;
import org.openapitools.client.model.IserverExchangerateGet200Response;
import org.openapitools.client.model.IserverSecdefSearchPostRequest;
import org.openapitools.client.model.IserverSecdefStrikesGet200Response;
import org.openapitools.client.model.SecDefInfoResponse;
import org.openapitools.client.model.SecdefSearchResponseInner;
import org.openapitools.client.model.StocksValueInner;
import org.openapitools.client.model.TradingScheduleInner;
import org.openapitools.client.model.TrsrvAllConidsGet200ResponseInner;
import org.openapitools.client.model.TrsrvSecDefResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TradingContractsApi
 */
@Disabled
public class TradingContractsApiTest {

    private final TradingContractsApi api = new TradingContractsApi();

    /**
     * Search Algo Params By Contract ID
     *
     * Returns supported IB Algos for contract. A pre-flight request must be submitted before retrieving information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverContractConidAlgosGetTest() throws ApiException {
        String conid = null;
        String algos = null;
        String addDescription = null;
        String addParams = null;
        AlgosResponse response = api.iserverContractConidAlgosGet(conid, algos, addDescription, addParams);
        // TODO: test validations
    }

    /**
     * Contract Information And Rules By Contract ID
     *
     * Requests full contract details for the given conid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverContractConidInfoAndRulesGetTest() throws ApiException {
        String conid = null;
        IserverContractConidInfoAndRulesGet200Response response = api.iserverContractConidInfoAndRulesGet(conid);
        // TODO: test validations
    }

    /**
     * Contract Information By Contract ID
     *
     * Requests full contract details for the given conid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverContractConidInfoGetTest() throws ApiException {
        String conid = null;
        ContractInfo response = api.iserverContractConidInfoGet(conid);
        // TODO: test validations
    }

    /**
     * Search Contract Rules
     *
     * Returns trading related rules for a specific contract and side.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverContractRulesPostTest() throws ApiException {
        IserverContractRulesPostRequest iserverContractRulesPostRequest = null;
        ContractRules response = api.iserverContractRulesPost(iserverContractRulesPostRequest);
        // TODO: test validations
    }

    /**
     * Obtains available currency pairs corresponding to the given target currency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverCurrencyPairsGetTest() throws ApiException {
        String currency = null;
        Map<String, List<CurrencyPairsValueInner>> response = api.iserverCurrencyPairsGet(currency);
        // TODO: test validations
    }

    /**
     * Currency Exchange Rate
     *
     * Obtains the exchange rates of the currency pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverExchangerateGetTest() throws ApiException {
        String target = null;
        String source = null;
        IserverExchangerateGet200Response response = api.iserverExchangerateGet(target, source);
        // TODO: test validations
    }

    /**
     * Search Bond Filter Information
     *
     * Request a list of filters relating to a given Bond issuerID. The issuerId is retrieved from /iserver/secdef/search and can be used in /iserver/secdef/info?issuerId&#x3D;{issuerId} for retrieving conIds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverSecdefBondFiltersGetTest() throws ApiException {
        String symbol = null;
        String issueId = null;
        BondFiltersResponse response = api.iserverSecdefBondFiltersGet(symbol, issueId);
        // TODO: test validations
    }

    /**
     * SecDef Info
     *
     * SecDef info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverSecdefInfoGetTest() throws ApiException {
        String conid = null;
        Object sectype = null;
        Object month = null;
        Object exchange = null;
        Object strike = null;
        String right = null;
        String issuerId = null;
        Object filters = null;
        SecDefInfoResponse response = api.iserverSecdefInfoGet(conid, sectype, month, exchange, strike, right, issuerId, filters);
        // TODO: test validations
    }

    /**
     * Returns A List Of Contracts Based On Symbol.
     *
     * Returns a list of contracts based on the search symbol provided as a query param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverSecdefSearchGetTest() throws ApiException {
        String symbol = null;
        String secType = null;
        Boolean name = null;
        Boolean more = null;
        Boolean fund = null;
        String fundFamilyConidEx = null;
        Boolean pattern = null;
        String referrer = null;
        List<SecdefSearchResponseInner> response = api.iserverSecdefSearchGet(symbol, secType, name, more, fund, fundFamilyConidEx, pattern, referrer);
        // TODO: test validations
    }

    /**
     * Returns A List Of Contracts Based On Symbol.
     *
     * Returns a list of contracts based on the search symbol provided as a query param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverSecdefSearchPostTest() throws ApiException {
        IserverSecdefSearchPostRequest iserverSecdefSearchPostRequest = null;
        List<SecdefSearchResponseInner> response = api.iserverSecdefSearchPost(iserverSecdefSearchPostRequest);
        // TODO: test validations
    }

    /**
     * Get Strikes
     *
     * strikes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverSecdefStrikesGetTest() throws ApiException {
        String conid = null;
        String sectype = null;
        String month = null;
        String exchange = null;
        IserverSecdefStrikesGet200Response response = api.iserverSecdefStrikesGet(conid, sectype, month, exchange);
        // TODO: test validations
    }

    /**
     * All Conids By Exchange
     *
     * Send out a request to retrieve all contracts made available on a requested exchange. This returns all contracts that are tradable on the exchange, even those that are not using the exchange as their primary listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trsrvAllConidsGetTest() throws ApiException {
        String exchange = null;
        Object assetClass = null;
        List<TrsrvAllConidsGet200ResponseInner> response = api.trsrvAllConidsGet(exchange, assetClass);
        // TODO: test validations
    }

    /**
     * Future  Security Definition By Symbol
     *
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trsrvFuturesGetTest() throws ApiException {
        String symbols = null;
        Object exchange = null;
        Features response = api.trsrvFuturesGet(symbols, exchange);
        // TODO: test validations
    }

    /**
     * Search The Security Definition By Contract ID
     *
     * Returns a list of security definitions for the given conids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trsrvSecdefGetTest() throws ApiException {
        String conids = null;
         UNKNOWN_PARAMETER_NAME = null;
         UNKNOWN_PARAMETER_NAME2 = null;
        TrsrvSecDefResponse response = api.trsrvSecdefGet(conids, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2);
        // TODO: test validations
    }

    /**
     * Trading Schedule By Symbol
     *
     * Returns the trading schedule up to a month for the requested contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trsrvSecdefScheduleGetTest() throws ApiException {
        String assetClass = null;
        String symbol = null;
        String exchange = null;
        String exchangeFilter = null;
        List<TradingScheduleInner> response = api.trsrvSecdefScheduleGet(assetClass, symbol, exchange, exchangeFilter);
        // TODO: test validations
    }

    /**
     * Stock Security Definition By Symbol
     *
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trsrvStocksGetTest() throws ApiException {
        String symbols = null;
        Map<String, List<StocksValueInner>> response = api.trsrvStocksGet(symbols);
        // TODO: test validations
    }

}
