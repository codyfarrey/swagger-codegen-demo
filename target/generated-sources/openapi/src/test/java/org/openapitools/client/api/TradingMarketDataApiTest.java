/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FyiVT;
import org.openapitools.client.model.HmdsHistoryResponse;
import org.openapitools.client.model.IserverHistoryResponse;
import org.openapitools.client.model.IserverMarketdataUnsubscribePost200Response;
import org.openapitools.client.model.IserverMarketdataUnsubscribePostRequest;
import org.openapitools.client.model.IserverMarketdataUnsubscribeallGet200Response;
import org.openapitools.client.model.MdFields;
import org.openapitools.client.model.RegsnapshotData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TradingMarketDataApi
 */
@Disabled
public class TradingMarketDataApiTest {

    private final TradingMarketDataApi api = new TradingMarketDataApi();

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     *
     * Request historical data for an instrument in the form of OHLC bars.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hmdsHistoryGetTest() throws ApiException {
        String conid = null;
        String period = null;
        String bar = null;
        String barType = null;
        String startTime = null;
        String direction = null;
        Boolean outsideRth = null;
        HmdsHistoryResponse response = api.hmdsHistoryGet(conid, period, bar, barType, startTime, direction, outsideRth);
        // TODO: test validations
    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     *
     * Request historical data for an instrument in the form of OHLC bars.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataHistoryGetTest() throws ApiException {
        String conid = null;
        String period = null;
        String bar = null;
        String exchange = null;
        String startTime = null;
        Boolean outsideRth = null;
        IserverHistoryResponse response = api.iserverMarketdataHistoryGet(conid, period, bar, exchange, startTime, outsideRth);
        // TODO: test validations
    }

    /**
     * Live Market Data Snapshot
     *
     * Get Market Data for the given conid(s). A pre-flight request must be made prior to ever receiving data. For some fields, it may take more than a few moments to receive information. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataSnapshotGetTest() throws ApiException {
        String conids = null;
        MdFields fields = null;
        FyiVT response = api.iserverMarketdataSnapshotGet(conids, fields);
        // TODO: test validations
    }

    /**
     * Instruct IServer To Close Its Backend Stream For The Instrument.
     *
     * Instruct IServer to close its backend stream for the instrument when real-time snapshots are no longer needed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataUnsubscribePostTest() throws ApiException {
        IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest = null;
        IserverMarketdataUnsubscribePost200Response response = api.iserverMarketdataUnsubscribePost(iserverMarketdataUnsubscribePostRequest);
        // TODO: test validations
    }

    /**
     * Instruct IServer To Close All Of Its Open Backend Data Streams For All Instruments.
     *
     * Instruct IServer to close all of its open backend data streams for all instruments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverMarketdataUnsubscribeallGetTest() throws ApiException {
        IserverMarketdataUnsubscribeallGet200Response response = api.iserverMarketdataUnsubscribeallGet();
        // TODO: test validations
    }

    /**
     * Request A Regulatory Snapshot For An Instrument.
     *
     * Request a regulatory snapshot for an instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mdRegsnapshotGetTest() throws ApiException {
        String conid = null;
        RegsnapshotData response = api.mdRegsnapshotGet(conid);
        // TODO: test validations
    }

}
