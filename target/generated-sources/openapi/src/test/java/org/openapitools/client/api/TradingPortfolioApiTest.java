/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountAttributes;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IndividualPosition;
import org.openapitools.client.model.LedgerValue;
import org.openapitools.client.model.PortfolioAccountIdPositionsInvalidatePost200Response;
import org.openapitools.client.model.PortfolioAllocations;
import org.openapitools.client.model.PortfolioSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TradingPortfolioApi
 */
@Disabled
public class TradingPortfolioApiTest {

    private final TradingPortfolioApi api = new TradingPortfolioApi();

    /**
     * Get An Account&#39;s Allocations By Asset Class, Sector Group, And Sector.
     *
     * Get an account&#39;s allocations by asset class, sector group, and sector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdAllocationGetTest() throws ApiException {
        String accountId = null;
        Object model = null;
        PortfolioAllocations response = api.portfolioAccountIdAllocationGet(accountId, model);
        // TODO: test validations
    }

    /**
     * Get Ledger Data For The Given Account.
     *
     * Get the given account&#39;s ledger data detailing its balances by currency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdLedgerGetTest() throws ApiException {
        String accountId = null;
        Map<String, LedgerValue> response = api.portfolioAccountIdLedgerGet(accountId);
        // TODO: test validations
    }

    /**
     * Get An Account&#39;s Attributes.
     *
     * Get a single account&#39;s attributes and capabilities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdMetaGetTest() throws ApiException {
        String accountId = null;
        AccountAttributes response = api.portfolioAccountIdMetaGet(accountId);
        // TODO: test validations
    }

    /**
     * Instructs IB To Discard Cached Portfolio Positions For A Given Account.
     *
     * Instructs IB to discard cached portfolio positions for a given account, so that the next request for positions delivers freshly obtained data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdPositionsInvalidatePostTest() throws ApiException {
        String accountId = null;
        PortfolioAccountIdPositionsInvalidatePost200Response response = api.portfolioAccountIdPositionsInvalidatePost(accountId);
        // TODO: test validations
    }

    /**
     * Get All Positions In An Account.
     *
     * Get all positions in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdPositionsPageIdGetTest() throws ApiException {
        String accountId = null;
         UNKNOWN_PARAMETER_NAME = null;
         UNKNOWN_PARAMETER_NAME2 = null;
         UNKNOWN_PARAMETER_NAME3 = null;
        String pageId = null;
        Boolean waitForSecDef = null;
        List<IndividualPosition> response = api.portfolioAccountIdPositionsPageIdGet(accountId, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, pageId, waitForSecDef);
        // TODO: test validations
    }

    /**
     * Portfolio Account Summary
     *
     * Portfolio account summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountIdSummaryGetTest() throws ApiException {
        String accountId = null;
        PortfolioSummary response = api.portfolioAccountIdSummaryGet(accountId);
        // TODO: test validations
    }

    /**
     * Get Position For A Given Instrument In A Single Account.
     *
     * Get position for a given instrument in a single account. WaitSecDef attribute is always defaulted to false. It is possible to get position without security definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountidPositionConidGetTest() throws ApiException {
        String accountId = null;
        String conid = null;
        List<IndividualPosition> response = api.portfolioAccountidPositionConidGet(accountId, conid);
        // TODO: test validations
    }

    /**
     * Accounts
     *
     * return accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioAccountsGetTest() throws ApiException {
        List<AccountAttributes> response = api.portfolioAccountsGet();
        // TODO: test validations
    }

    /**
     * Get Positions In Accounts For A Given Instrument
     *
     * Get positions in accounts for a given instrument (no secDef await control)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioPositionsConidGetTest() throws ApiException {
        String conid = null;
        Map<String, IndividualPosition> response = api.portfolioPositionsConidGet(conid);
        // TODO: test validations
    }

    /**
     * Get Attributes Of Subaccounts In Account Structure
     *
     * Retrieve attributes of the subaccounts in the account structure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void portfolioSubaccountsGetTest() throws ApiException {
        List<AccountAttributes> response = api.portfolioSubaccountsGet();
        // TODO: test validations
    }

}
