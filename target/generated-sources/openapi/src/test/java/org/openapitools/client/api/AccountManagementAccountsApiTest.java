/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountDetailsResponse;
import org.openapitools.client.model.AccountManagementRequestsPayload;
import org.openapitools.client.model.AccountStatusBulkResponse;
import org.openapitools.client.model.AccountStatusRequest;
import org.openapitools.client.model.AccountStatusResponse;
import org.openapitools.client.model.ApplicationPayload;
import org.openapitools.client.model.Au10TixDetailResponse;
import org.openapitools.client.model.BusinessRejectResponse;
import org.openapitools.client.model.ForbiddenRequestResponse;
import org.openapitools.client.model.GwApiV1AccountsAccountIdTasksGet200Response;
import org.openapitools.client.model.GwApiV1AccountsClosePostRequest;
import org.openapitools.client.model.GwApiV1AccountsGet200Response;
import org.openapitools.client.model.InstructionResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.LoginMessageRequest;
import org.openapitools.client.model.LoginMessageResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.ProblemDetailResponse;
import org.openapitools.client.model.ProcessDocuments;
import org.openapitools.client.model.RequestInfoResponse;
import org.openapitools.client.model.StatusResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountManagementAccountsApi
 */
@Disabled
public class AccountManagementAccountsApiTest {

    private final AccountManagementAccountsApi api = new AccountManagementAccountsApi();

    /**
     * Get Account Information
     *
     * &lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsAccountIdDetailsGetTest() throws ApiException {
        String accountId = null;
        AccountDetailsResponse response = api.gwApiV1AccountsAccountIdDetailsGet(accountId);
        // TODO: test validations
    }

    /**
     * Retrieve Au10Tix URL
     *
     * Generate URL address to complete real-time KYC verification using Au10Tix&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsAccountIdKycGetTest() throws ApiException {
        String accountId = null;
        Au10TixDetailResponse response = api.gwApiV1AccountsAccountIdKycGet(accountId);
        // TODO: test validations
    }

    /**
     * Get Login Message By Account
     *
     * Query login messages assigned by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsAccountIdLoginMessagesGetTest() throws ApiException {
        String accountId = null;
        String type = null;
        LoginMessageResponse response = api.gwApiV1AccountsAccountIdLoginMessagesGet(accountId, type);
        // TODO: test validations
    }

    /**
     * Get Status By Account
     *
     * Query status of account by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsAccountIdStatusGetTest() throws ApiException {
        String accountId = null;
        AccountStatusResponse response = api.gwApiV1AccountsAccountIdStatusGet(accountId);
        // TODO: test validations
    }

    /**
     * Get Registration Tasks
     *
     * Query registration tasks assigned to account and pending tasks that are required for account approval&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsAccountIdTasksGetTest() throws ApiException {
        String accountId = null;
        String type = null;
        GwApiV1AccountsAccountIdTasksGet200Response response = api.gwApiV1AccountsAccountIdTasksGet(accountId, type);
        // TODO: test validations
    }

    /**
     * Close Account
     *
     * Submit request to close account that is opened.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsClosePostTest() throws ApiException {
        String clientId = null;
        GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest = null;
        InstructionResponse response = api.gwApiV1AccountsClosePost(clientId, gwApiV1AccountsClosePostRequest);
        // TODO: test validations
    }

    /**
     * Submit General Agreements And Disclosures
     *
     * Provides mechanism to submit Agreements and Disclosures to IBKR once a day instead of with each application. We store these documents on the servers and will use them for new application requests submitted that day.&lt;ul&gt;&lt;li&gt;Documents will need to be submitted once a day (before the Applications are submitted). PDFs will be displayed and submitted as is- no changes/edits will be made to the actual PDF files.&lt;/li&gt;&lt;li&gt;This end-point will not process any Tax Form Documents. Tax Form document should be submitted with every application&lt;/li&gt;&lt;li&gt;If submitted in the morning, you only need to include the Tax Form attachment for each applicant. Otherwise, you will need to include PDFs with each application (Create Account).&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsDocumentsPostTest() throws ApiException {
        ProcessDocuments processDocuments = null;
        StatusResponse response = api.gwApiV1AccountsDocumentsPost(processDocuments);
        // TODO: test validations
    }

    /**
     * Retrieve Processed Application
     *
     * Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsGetTest() throws ApiException {
        String accountId = null;
        String externalId = null;
        GwApiV1AccountsGet200Response response = api.gwApiV1AccountsGet(accountId, externalId);
        // TODO: test validations
    }

    /**
     * Get Login Messages
     *
     * Query all accounts associated with ‘Client ID’ that have incomplete login message&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsLoginMessagesGetTest() throws ApiException {
        LoginMessageRequest loginMessageRequest = null;
        LoginMessageResponse response = api.gwApiV1AccountsLoginMessagesGet(loginMessageRequest);
        // TODO: test validations
    }

    /**
     * Update Account
     *
     * Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsPatchTest() throws ApiException {
        AccountManagementRequestsPayload accountManagementRequestsPayload = null;
        StatusResponse response = api.gwApiV1AccountsPatch(accountManagementRequestsPayload);
        // TODO: test validations
    }

    /**
     * Create Account
     *
     * Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsPostTest() throws ApiException {
        ApplicationPayload applicationPayload = null;
        StatusResponse response = api.gwApiV1AccountsPost(applicationPayload);
        // TODO: test validations
    }

    /**
     * Get Status Of Accounts
     *
     * Query status of all accounts associated with ‘Client ID&#39;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gwApiV1AccountsStatusGetTest() throws ApiException {
        AccountStatusRequest accountStatusRequest = null;
        AccountStatusBulkResponse response = api.gwApiV1AccountsStatusGet(accountStatusRequest);
        // TODO: test validations
    }

}
