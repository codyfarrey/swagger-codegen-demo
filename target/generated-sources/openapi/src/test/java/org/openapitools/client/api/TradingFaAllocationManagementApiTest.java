/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllocationGroup;
import org.openapitools.client.model.AllocationGroups;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IserverAccountAllocationGroupDeletePostRequest;
import org.openapitools.client.model.IserverAccountAllocationGroupPostRequest;
import org.openapitools.client.model.IserverAccountAllocationGroupPut200Response;
import org.openapitools.client.model.IserverAccountAllocationGroupPutRequest;
import org.openapitools.client.model.IserverAccountAllocationPresetsPost200Response;
import org.openapitools.client.model.Presets;
import org.openapitools.client.model.SubAccounts;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TradingFaAllocationManagementApi
 */
@Disabled
public class TradingFaAllocationManagementApiTest {

    private final TradingFaAllocationManagementApi api = new TradingFaAllocationManagementApi();

    /**
     * Allocatable Sub-Accounts
     *
     * Retrieves a list of all sub-accounts and returns their net liquidity and available equity for advisors to make decisions on what accounts should be allocated and how.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationAccountsGetTest() throws ApiException {
        SubAccounts response = api.iserverAccountAllocationAccountsGet();
        // TODO: test validations
    }

    /**
     * Remove Allocation Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationGroupDeletePostTest() throws ApiException {
        IserverAccountAllocationGroupDeletePostRequest iserverAccountAllocationGroupDeletePostRequest = null;
        IserverAccountAllocationGroupPut200Response response = api.iserverAccountAllocationGroupDeletePost(iserverAccountAllocationGroupDeletePostRequest);
        // TODO: test validations
    }

    /**
     * List All Allocation Groups
     *
     * Retrieves a list of all of the advisorâ€™s allocation groups. This describes the name of the allocation group, number of subaccounts within the group, and the method in use for the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationGroupGetTest() throws ApiException {
        AllocationGroups response = api.iserverAccountAllocationGroupGet();
        // TODO: test validations
    }

    /**
     * Add Allocation Group
     *
     * Add a new allocation group. This group can be used to trade in place of the {accountId} for the /iserver/account/{accountId}/orders endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationGroupPostTest() throws ApiException {
        IserverAccountAllocationGroupPostRequest iserverAccountAllocationGroupPostRequest = null;
        IserverAccountAllocationGroupPut200Response response = api.iserverAccountAllocationGroupPost(iserverAccountAllocationGroupPostRequest);
        // TODO: test validations
    }

    /**
     * Modify Allocation Group
     *
     * Modify an existing allocation group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationGroupPutTest() throws ApiException {
        IserverAccountAllocationGroupPutRequest iserverAccountAllocationGroupPutRequest = null;
        IserverAccountAllocationGroupPut200Response response = api.iserverAccountAllocationGroupPut(iserverAccountAllocationGroupPutRequest);
        // TODO: test validations
    }

    /**
     * Retrieve Single Allocation Group
     *
     * Retrieves the configuration of a single account group. This describes the name of the allocation group, the specific accounts contained in the group, and the allocation method in use along with any relevant quantities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationGroupSinglePostTest() throws ApiException {
        IserverAccountAllocationGroupDeletePostRequest iserverAccountAllocationGroupDeletePostRequest = null;
        AllocationGroup response = api.iserverAccountAllocationGroupSinglePost(iserverAccountAllocationGroupDeletePostRequest);
        // TODO: test validations
    }

    /**
     * Retrieve Allocation Presets
     *
     * Retrieve the preset behavior for allocation groups for specific events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationPresetsGetTest() throws ApiException {
        Presets response = api.iserverAccountAllocationPresetsGet();
        // TODO: test validations
    }

    /**
     * Set The Allocation Presets
     *
     * Set the preset behavior for new allocation groups for specific events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iserverAccountAllocationPresetsPostTest() throws ApiException {
        Presets presets = null;
        IserverAccountAllocationPresetsPost200Response response = api.iserverAccountAllocationPresetsPost(presets);
        // TODO: test validations
    }

}
