/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PendingTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PendingTasksResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PendingTasksResponse {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private ErrorResponse error;

  public static final String SERIALIZED_NAME_HAS_ERROR = "hasError";
  @SerializedName(SERIALIZED_NAME_HAS_ERROR)
  @javax.annotation.Nullable
  private Boolean hasError;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  @javax.annotation.Nullable
  private String errorDescription;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_PENDING_TASKS = "pendingTasks";
  @SerializedName(SERIALIZED_NAME_PENDING_TASKS)
  @javax.annotation.Nullable
  private List<PendingTask> pendingTasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_TASK_PRESENT = "pendingTaskPresent";
  @SerializedName(SERIALIZED_NAME_PENDING_TASK_PRESENT)
  @javax.annotation.Nullable
  private Boolean pendingTaskPresent;

  public PendingTasksResponse() {
  }

  public PendingTasksResponse error(@javax.annotation.Nullable ErrorResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ErrorResponse getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable ErrorResponse error) {
    this.error = error;
  }


  public PendingTasksResponse hasError(@javax.annotation.Nullable Boolean hasError) {
    this.hasError = hasError;
    return this;
  }

  /**
   * Get hasError
   * @return hasError
   */
  @javax.annotation.Nullable
  public Boolean getHasError() {
    return hasError;
  }

  public void setHasError(@javax.annotation.Nullable Boolean hasError) {
    this.hasError = hasError;
  }


  public PendingTasksResponse errorDescription(@javax.annotation.Nullable String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * Get errorDescription
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(@javax.annotation.Nullable String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public PendingTasksResponse accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public PendingTasksResponse status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public PendingTasksResponse description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PendingTasksResponse state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public PendingTasksResponse pendingTasks(@javax.annotation.Nullable List<PendingTask> pendingTasks) {
    this.pendingTasks = pendingTasks;
    return this;
  }

  public PendingTasksResponse addPendingTasksItem(PendingTask pendingTasksItem) {
    if (this.pendingTasks == null) {
      this.pendingTasks = new ArrayList<>();
    }
    this.pendingTasks.add(pendingTasksItem);
    return this;
  }

  /**
   * Get pendingTasks
   * @return pendingTasks
   */
  @javax.annotation.Nullable
  public List<PendingTask> getPendingTasks() {
    return pendingTasks;
  }

  public void setPendingTasks(@javax.annotation.Nullable List<PendingTask> pendingTasks) {
    this.pendingTasks = pendingTasks;
  }


  public PendingTasksResponse pendingTaskPresent(@javax.annotation.Nullable Boolean pendingTaskPresent) {
    this.pendingTaskPresent = pendingTaskPresent;
    return this;
  }

  /**
   * Get pendingTaskPresent
   * @return pendingTaskPresent
   */
  @javax.annotation.Nullable
  public Boolean getPendingTaskPresent() {
    return pendingTaskPresent;
  }

  public void setPendingTaskPresent(@javax.annotation.Nullable Boolean pendingTaskPresent) {
    this.pendingTaskPresent = pendingTaskPresent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingTasksResponse pendingTasksResponse = (PendingTasksResponse) o;
    return Objects.equals(this.error, pendingTasksResponse.error) &&
        Objects.equals(this.hasError, pendingTasksResponse.hasError) &&
        Objects.equals(this.errorDescription, pendingTasksResponse.errorDescription) &&
        Objects.equals(this.accountId, pendingTasksResponse.accountId) &&
        Objects.equals(this.status, pendingTasksResponse.status) &&
        Objects.equals(this.description, pendingTasksResponse.description) &&
        Objects.equals(this.state, pendingTasksResponse.state) &&
        Objects.equals(this.pendingTasks, pendingTasksResponse.pendingTasks) &&
        Objects.equals(this.pendingTaskPresent, pendingTasksResponse.pendingTaskPresent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, hasError, errorDescription, accountId, status, description, state, pendingTasks, pendingTaskPresent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingTasksResponse {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    pendingTasks: ").append(toIndentedString(pendingTasks)).append("\n");
    sb.append("    pendingTaskPresent: ").append(toIndentedString(pendingTaskPresent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("hasError");
    openapiFields.add("errorDescription");
    openapiFields.add("accountId");
    openapiFields.add("status");
    openapiFields.add("description");
    openapiFields.add("state");
    openapiFields.add("pendingTasks");
    openapiFields.add("pendingTaskPresent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingTasksResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingTasksResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingTasksResponse is not found in the empty JSON string", PendingTasksResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingTasksResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingTasksResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ErrorResponse.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("errorDescription") != null && !jsonObj.get("errorDescription").isJsonNull()) && !jsonObj.get("errorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDescription").toString()));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("pendingTasks") != null && !jsonObj.get("pendingTasks").isJsonNull()) {
        JsonArray jsonArraypendingTasks = jsonObj.getAsJsonArray("pendingTasks");
        if (jsonArraypendingTasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pendingTasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pendingTasks` to be an array in the JSON string but got `%s`", jsonObj.get("pendingTasks").toString()));
          }

          // validate the optional field `pendingTasks` (array)
          for (int i = 0; i < jsonArraypendingTasks.size(); i++) {
            PendingTask.validateJsonElement(jsonArraypendingTasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingTasksResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingTasksResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingTasksResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingTasksResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingTasksResponse>() {
           @Override
           public void write(JsonWriter out, PendingTasksResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingTasksResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingTasksResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingTasksResponse
   * @throws IOException if the JSON string is invalid with respect to PendingTasksResponse
   */
  public static PendingTasksResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingTasksResponse.class);
  }

  /**
   * Convert an instance of PendingTasksResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

