/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HmdsScannerRunRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class HmdsScannerRunRequest {
  public static final String SERIALIZED_NAME_INSTRUMENT = "instrument";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT)
  @javax.annotation.Nullable
  private String instrument;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  @javax.annotation.Nullable
  private String locations;

  public static final String SERIALIZED_NAME_SCAN_CODE = "scanCode";
  @SerializedName(SERIALIZED_NAME_SCAN_CODE)
  @javax.annotation.Nullable
  private String scanCode;

  public static final String SERIALIZED_NAME_SEC_TYPE = "secType";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private String secType;

  public static final String SERIALIZED_NAME_DELAYED_LOCATIONS = "delayedLocations";
  @SerializedName(SERIALIZED_NAME_DELAYED_LOCATIONS)
  @javax.annotation.Nullable
  private String delayedLocations;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "maxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  @javax.annotation.Nullable
  private Integer maxItems = 250;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<String> filters = new ArrayList<>();

  public HmdsScannerRunRequest() {
  }

  public HmdsScannerRunRequest instrument(@javax.annotation.Nullable String instrument) {
    this.instrument = instrument;
    return this;
  }

  /**
   * Specify the type of instrument for the request. Found under the “instrument_list” value of the /hmds/scanner/params request.
   * @return instrument
   */
  @javax.annotation.Nullable
  public String getInstrument() {
    return instrument;
  }

  public void setInstrument(@javax.annotation.Nullable String instrument) {
    this.instrument = instrument;
  }


  public HmdsScannerRunRequest locations(@javax.annotation.Nullable String locations) {
    this.locations = locations;
    return this;
  }

  /**
   * Specify the type of location for the request. Found under the “location_tree” value of the /hmds/scanner/params request.
   * @return locations
   */
  @javax.annotation.Nullable
  public String getLocations() {
    return locations;
  }

  public void setLocations(@javax.annotation.Nullable String locations) {
    this.locations = locations;
  }


  public HmdsScannerRunRequest scanCode(@javax.annotation.Nullable String scanCode) {
    this.scanCode = scanCode;
    return this;
  }

  /**
   * Specify the scanner type for the request. Found under the “scan_type_list” value of the /hmds/scanner/params request.
   * @return scanCode
   */
  @javax.annotation.Nullable
  public String getScanCode() {
    return scanCode;
  }

  public void setScanCode(@javax.annotation.Nullable String scanCode) {
    this.scanCode = scanCode;
  }


  public HmdsScannerRunRequest secType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
    return this;
  }

  /**
   * Specify the type of security type for the request. Found under the “location_tree” value of the /hmds/scanner/params request.
   * @return secType
   */
  @javax.annotation.Nullable
  public String getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
  }


  public HmdsScannerRunRequest delayedLocations(@javax.annotation.Nullable String delayedLocations) {
    this.delayedLocations = delayedLocations;
    return this;
  }

  /**
   * Get delayedLocations
   * @return delayedLocations
   */
  @javax.annotation.Nullable
  public String getDelayedLocations() {
    return delayedLocations;
  }

  public void setDelayedLocations(@javax.annotation.Nullable String delayedLocations) {
    this.delayedLocations = delayedLocations;
  }


  public HmdsScannerRunRequest maxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * Specify how many items should be returned.
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
  }


  public HmdsScannerRunRequest filters(@javax.annotation.Nullable List<String> filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Array of objects containing all filters upon the scanner request. Content contains a series of key:value pairs. While “filters” must be specified in the body, no content in the array needs to be passed. 
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<String> filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HmdsScannerRunRequest hmdsScannerRunRequest = (HmdsScannerRunRequest) o;
    return Objects.equals(this.instrument, hmdsScannerRunRequest.instrument) &&
        Objects.equals(this.locations, hmdsScannerRunRequest.locations) &&
        Objects.equals(this.scanCode, hmdsScannerRunRequest.scanCode) &&
        Objects.equals(this.secType, hmdsScannerRunRequest.secType) &&
        Objects.equals(this.delayedLocations, hmdsScannerRunRequest.delayedLocations) &&
        Objects.equals(this.maxItems, hmdsScannerRunRequest.maxItems) &&
        Objects.equals(this.filters, hmdsScannerRunRequest.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrument, locations, scanCode, secType, delayedLocations, maxItems, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HmdsScannerRunRequest {\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    scanCode: ").append(toIndentedString(scanCode)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    delayedLocations: ").append(toIndentedString(delayedLocations)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instrument");
    openapiFields.add("locations");
    openapiFields.add("scanCode");
    openapiFields.add("secType");
    openapiFields.add("delayedLocations");
    openapiFields.add("maxItems");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HmdsScannerRunRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HmdsScannerRunRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HmdsScannerRunRequest is not found in the empty JSON string", HmdsScannerRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HmdsScannerRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HmdsScannerRunRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instrument") != null && !jsonObj.get("instrument").isJsonNull()) && !jsonObj.get("instrument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instrument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instrument").toString()));
      }
      if ((jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) && !jsonObj.get("locations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if ((jsonObj.get("scanCode") != null && !jsonObj.get("scanCode").isJsonNull()) && !jsonObj.get("scanCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanCode").toString()));
      }
      if ((jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) && !jsonObj.get("secType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secType").toString()));
      }
      if ((jsonObj.get("delayedLocations") != null && !jsonObj.get("delayedLocations").isJsonNull()) && !jsonObj.get("delayedLocations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayedLocations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayedLocations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HmdsScannerRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HmdsScannerRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HmdsScannerRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HmdsScannerRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HmdsScannerRunRequest>() {
           @Override
           public void write(JsonWriter out, HmdsScannerRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HmdsScannerRunRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HmdsScannerRunRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HmdsScannerRunRequest
   * @throws IOException if the JSON string is invalid with respect to HmdsScannerRunRequest
   */
  public static HmdsScannerRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HmdsScannerRunRequest.class);
  }

  /**
   * Convert an instance of HmdsScannerRunRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

