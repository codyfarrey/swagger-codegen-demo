/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GetAvailableStmtDatesResponse;
import org.openapitools.client.model.GetAvailableTaxFormsResponse;
import org.openapitools.client.model.GetStatementsResponse;
import org.openapitools.client.model.InsufficientScopeResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.InvalidAccessTokenResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.StmtRequest;
import org.openapitools.client.model.TaxFormRequest;
import org.openapitools.client.model.TaxFormResponse;
import org.openapitools.client.model.UnauthorizedAccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountManagementReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountManagementReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountManagementReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gwApiV1StatementsAvailableGet
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1StatementsAvailableGetCall(String authorization, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/statements/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1StatementsAvailableGetValidateBeforeCall(String authorization, String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1StatementsAvailableGet(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1StatementsAvailableGet(Async)");
        }

        return gwApiV1StatementsAvailableGetCall(authorization, accountId, _callback);

    }

    /**
     * Fetch Available Daily, Monthly, And Annual Report Dates For An Account Id
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @return GetAvailableStmtDatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableStmtDatesResponse gwApiV1StatementsAvailableGet(String authorization, String accountId) throws ApiException {
        ApiResponse<GetAvailableStmtDatesResponse> localVarResp = gwApiV1StatementsAvailableGetWithHttpInfo(authorization, accountId);
        return localVarResp.getData();
    }

    /**
     * Fetch Available Daily, Monthly, And Annual Report Dates For An Account Id
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @return ApiResponse&lt;GetAvailableStmtDatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableStmtDatesResponse> gwApiV1StatementsAvailableGetWithHttpInfo(String authorization, String accountId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1StatementsAvailableGetValidateBeforeCall(authorization, accountId, null);
        Type localVarReturnType = new TypeToken<GetAvailableStmtDatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Available Daily, Monthly, And Annual Report Dates For An Account Id (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1StatementsAvailableGetAsync(String authorization, String accountId, final ApiCallback<GetAvailableStmtDatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1StatementsAvailableGetValidateBeforeCall(authorization, accountId, _callback);
        Type localVarReturnType = new TypeToken<GetAvailableStmtDatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1StatementsPost
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param stmtRequest Report request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1StatementsPostCall(String authorization, StmtRequest stmtRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stmtRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1StatementsPostValidateBeforeCall(String authorization, StmtRequest stmtRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1StatementsPost(Async)");
        }

        // verify the required parameter 'stmtRequest' is set
        if (stmtRequest == null) {
            throw new ApiException("Missing the required parameter 'stmtRequest' when calling gwApiV1StatementsPost(Async)");
        }

        return gwApiV1StatementsPostCall(authorization, stmtRequest, _callback);

    }

    /**
     * Generates Statements In Supported Formats Based On Request Parameters.
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param stmtRequest Report request object (required)
     * @return GetStatementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetStatementsResponse gwApiV1StatementsPost(String authorization, StmtRequest stmtRequest) throws ApiException {
        ApiResponse<GetStatementsResponse> localVarResp = gwApiV1StatementsPostWithHttpInfo(authorization, stmtRequest);
        return localVarResp.getData();
    }

    /**
     * Generates Statements In Supported Formats Based On Request Parameters.
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param stmtRequest Report request object (required)
     * @return ApiResponse&lt;GetStatementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatementsResponse> gwApiV1StatementsPostWithHttpInfo(String authorization, StmtRequest stmtRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1StatementsPostValidateBeforeCall(authorization, stmtRequest, null);
        Type localVarReturnType = new TypeToken<GetStatementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates Statements In Supported Formats Based On Request Parameters. (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param stmtRequest Report request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant statement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1StatementsPostAsync(String authorization, StmtRequest stmtRequest, final ApiCallback<GetStatementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1StatementsPostValidateBeforeCall(authorization, stmtRequest, _callback);
        Type localVarReturnType = new TypeToken<GetStatementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1TaxDocumentsAvailableGet
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param year Specifies the tax year to retrieve information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1TaxDocumentsAvailableGetCall(String authorization, String accountId, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/tax-documents/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1TaxDocumentsAvailableGetValidateBeforeCall(String authorization, String accountId, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1TaxDocumentsAvailableGet(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1TaxDocumentsAvailableGet(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling gwApiV1TaxDocumentsAvailableGet(Async)");
        }

        return gwApiV1TaxDocumentsAvailableGetCall(authorization, accountId, year, _callback);

    }

    /**
     * Fetch List Of Available Tax Reports/forms/documents For A Specified Account And Tax Year
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param year Specifies the tax year to retrieve information (required)
     * @return GetAvailableTaxFormsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableTaxFormsResponse gwApiV1TaxDocumentsAvailableGet(String authorization, String accountId, Integer year) throws ApiException {
        ApiResponse<GetAvailableTaxFormsResponse> localVarResp = gwApiV1TaxDocumentsAvailableGetWithHttpInfo(authorization, accountId, year);
        return localVarResp.getData();
    }

    /**
     * Fetch List Of Available Tax Reports/forms/documents For A Specified Account And Tax Year
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param year Specifies the tax year to retrieve information (required)
     * @return ApiResponse&lt;GetAvailableTaxFormsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableTaxFormsResponse> gwApiV1TaxDocumentsAvailableGetWithHttpInfo(String authorization, String accountId, Integer year) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1TaxDocumentsAvailableGetValidateBeforeCall(authorization, accountId, year, null);
        Type localVarReturnType = new TypeToken<GetAvailableTaxFormsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch List Of Available Tax Reports/forms/documents For A Specified Account And Tax Year (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;statements.read&#x60; OR &#x60;reports.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param accountId Specifies the account id to retrieve information (required)
     * @param year Specifies the tax year to retrieve information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the available report dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1TaxDocumentsAvailableGetAsync(String authorization, String accountId, Integer year, final ApiCallback<GetAvailableTaxFormsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1TaxDocumentsAvailableGetValidateBeforeCall(authorization, accountId, year, _callback);
        Type localVarReturnType = new TypeToken<GetAvailableTaxFormsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1TaxDocumentsPost
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param taxFormRequest Tax Form request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant Tax Form. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1TaxDocumentsPostCall(String authorization, TaxFormRequest taxFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxFormRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/tax-documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1TaxDocumentsPostValidateBeforeCall(String authorization, TaxFormRequest taxFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1TaxDocumentsPost(Async)");
        }

        // verify the required parameter 'taxFormRequest' is set
        if (taxFormRequest == null) {
            throw new ApiException("Missing the required parameter 'taxFormRequest' when calling gwApiV1TaxDocumentsPost(Async)");
        }

        return gwApiV1TaxDocumentsPostCall(authorization, taxFormRequest, _callback);

    }

    /**
     * Fetch Tax Forms In Supported Formats Based On Request Parameters.
     * &lt;br&gt;**Scope**: &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param taxFormRequest Tax Form request object (required)
     * @return TaxFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant Tax Form. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TaxFormResponse gwApiV1TaxDocumentsPost(String authorization, TaxFormRequest taxFormRequest) throws ApiException {
        ApiResponse<TaxFormResponse> localVarResp = gwApiV1TaxDocumentsPostWithHttpInfo(authorization, taxFormRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch Tax Forms In Supported Formats Based On Request Parameters.
     * &lt;br&gt;**Scope**: &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param taxFormRequest Tax Form request object (required)
     * @return ApiResponse&lt;TaxFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant Tax Form. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxFormResponse> gwApiV1TaxDocumentsPostWithHttpInfo(String authorization, TaxFormRequest taxFormRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1TaxDocumentsPostValidateBeforeCall(authorization, taxFormRequest, null);
        Type localVarReturnType = new TypeToken<TaxFormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch Tax Forms In Supported Formats Based On Request Parameters. (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;statements.write&#x60; OR &#x60;reports.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param taxFormRequest Tax Form request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing the relevant Tax Form. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1TaxDocumentsPostAsync(String authorization, TaxFormRequest taxFormRequest, final ApiCallback<TaxFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1TaxDocumentsPostValidateBeforeCall(authorization, taxFormRequest, _callback);
        Type localVarReturnType = new TypeToken<TaxFormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
