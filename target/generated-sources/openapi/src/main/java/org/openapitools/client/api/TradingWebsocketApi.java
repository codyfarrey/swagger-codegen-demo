/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingWebsocketApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingWebsocketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingWebsocketApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wsGet
     * @param connection  (required)
     * @param upgrade  (required)
     * @param api 32-character Web API session cookie value. (required)
     * @param oauthToken 8-character OAuth access token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Successful request to switch protocols. </td><td>  * Connection -  <br>  * Upgrade -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call wsGetCall(String connection, String upgrade, String api, String oauthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (api != null) {
            localVarCookieParams.put("api", localVarApiClient.parameterToString(api));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (connection != null) {
            localVarHeaderParams.put("Connection", localVarApiClient.parameterToString(connection));
        }


        if (upgrade != null) {
            localVarHeaderParams.put("Upgrade", localVarApiClient.parameterToString(upgrade));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wsGetValidateBeforeCall(String connection, String upgrade, String api, String oauthToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connection' is set
        if (connection == null) {
            throw new ApiException("Missing the required parameter 'connection' when calling wsGet(Async)");
        }

        // verify the required parameter 'upgrade' is set
        if (upgrade == null) {
            throw new ApiException("Missing the required parameter 'upgrade' when calling wsGet(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling wsGet(Async)");
        }

        // verify the required parameter 'oauthToken' is set
        if (oauthToken == null) {
            throw new ApiException("Missing the required parameter 'oauthToken' when calling wsGet(Async)");
        }

        return wsGetCall(connection, upgrade, api, oauthToken, _callback);

    }

    /**
     * Open Websocket.
     * Open websocket.
     * @param connection  (required)
     * @param upgrade  (required)
     * @param api 32-character Web API session cookie value. (required)
     * @param oauthToken 8-character OAuth access token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Successful request to switch protocols. </td><td>  * Connection -  <br>  * Upgrade -  <br>  </td></tr>
     </table>
     */
    public void wsGet(String connection, String upgrade, String api, String oauthToken) throws ApiException {
        wsGetWithHttpInfo(connection, upgrade, api, oauthToken);
    }

    /**
     * Open Websocket.
     * Open websocket.
     * @param connection  (required)
     * @param upgrade  (required)
     * @param api 32-character Web API session cookie value. (required)
     * @param oauthToken 8-character OAuth access token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Successful request to switch protocols. </td><td>  * Connection -  <br>  * Upgrade -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> wsGetWithHttpInfo(String connection, String upgrade, String api, String oauthToken) throws ApiException {
        okhttp3.Call localVarCall = wsGetValidateBeforeCall(connection, upgrade, api, oauthToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Open Websocket. (asynchronously)
     * Open websocket.
     * @param connection  (required)
     * @param upgrade  (required)
     * @param api 32-character Web API session cookie value. (required)
     * @param oauthToken 8-character OAuth access token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Successful request to switch protocols. </td><td>  * Connection -  <br>  * Upgrade -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call wsGetAsync(String connection, String upgrade, String api, String oauthToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wsGetValidateBeforeCall(connection, upgrade, api, oauthToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
