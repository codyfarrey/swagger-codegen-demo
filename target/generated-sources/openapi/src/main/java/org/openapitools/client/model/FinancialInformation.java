/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetExperience;
import org.openapitools.client.model.QuestionnaireType;
import org.openapitools.client.model.SOIQuestionnaire;
import org.openapitools.client.model.SourceOfIncomeType;
import org.openapitools.client.model.SourceOfWealthType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FinancialInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class FinancialInformation {
  public static final String SERIALIZED_NAME_INVESTMENT_EXPERIENCE = "investmentExperience";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_EXPERIENCE)
  @javax.annotation.Nullable
  private List<AssetExperience> investmentExperience = new ArrayList<>();

  /**
   * Gets or Sets investmentObjectives
   */
  @JsonAdapter(InvestmentObjectivesEnum.Adapter.class)
  public enum InvestmentObjectivesEnum {
    TRADING("Trading"),
    
    GROWTH("Growth"),
    
    SPECULATION("Speculation"),
    
    HEDGING("Hedging"),
    
    PRESERVATION("Preservation"),
    
    INCOME("Income");

    private String value;

    InvestmentObjectivesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvestmentObjectivesEnum fromValue(String value) {
      for (InvestmentObjectivesEnum b : InvestmentObjectivesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvestmentObjectivesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvestmentObjectivesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvestmentObjectivesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvestmentObjectivesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvestmentObjectivesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVESTMENT_OBJECTIVES = "investmentObjectives";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_OBJECTIVES)
  @javax.annotation.Nullable
  private List<InvestmentObjectivesEnum> investmentObjectives = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_SOURCES_OF_INCOME = "additionalSourcesOfIncome";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SOURCES_OF_INCOME)
  @javax.annotation.Nullable
  private List<SourceOfIncomeType> additionalSourcesOfIncome = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES_OF_WEALTH = "sourcesOfWealth";
  @SerializedName(SERIALIZED_NAME_SOURCES_OF_WEALTH)
  @javax.annotation.Nullable
  private List<SourceOfWealthType> sourcesOfWealth = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOI_QUESTIONNAIRE = "soiQuestionnaire";
  @SerializedName(SERIALIZED_NAME_SOI_QUESTIONNAIRE)
  @javax.annotation.Nullable
  private SOIQuestionnaire soiQuestionnaire;

  public static final String SERIALIZED_NAME_QUESTIONNAIRES = "questionnaires";
  @SerializedName(SERIALIZED_NAME_QUESTIONNAIRES)
  @javax.annotation.Nullable
  private List<QuestionnaireType> questionnaires = new ArrayList<>();

  public static final String SERIALIZED_NAME_NET_WORTH = "netWorth";
  @SerializedName(SERIALIZED_NAME_NET_WORTH)
  @javax.annotation.Nullable
  private BigDecimal netWorth;

  public static final String SERIALIZED_NAME_LIQUID_NET_WORTH = "liquidNetWorth";
  @SerializedName(SERIALIZED_NAME_LIQUID_NET_WORTH)
  @javax.annotation.Nullable
  private BigDecimal liquidNetWorth;

  public static final String SERIALIZED_NAME_ANNUAL_NET_INCOME = "annualNetIncome";
  @SerializedName(SERIALIZED_NAME_ANNUAL_NET_INCOME)
  @javax.annotation.Nullable
  private BigDecimal annualNetIncome;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "totalAssets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal totalAssets;

  public static final String SERIALIZED_NAME_SOURCE_OF_FUNDS = "sourceOfFunds";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_FUNDS)
  @javax.annotation.Nullable
  private String sourceOfFunds;

  public static final String SERIALIZED_NAME_TRANSLATED = "translated";
  @SerializedName(SERIALIZED_NAME_TRANSLATED)
  @javax.annotation.Nullable
  private Boolean translated;

  public FinancialInformation() {
  }

  public FinancialInformation investmentExperience(@javax.annotation.Nullable List<AssetExperience> investmentExperience) {
    this.investmentExperience = investmentExperience;
    return this;
  }

  public FinancialInformation addInvestmentExperienceItem(AssetExperience investmentExperienceItem) {
    if (this.investmentExperience == null) {
      this.investmentExperience = new ArrayList<>();
    }
    this.investmentExperience.add(investmentExperienceItem);
    return this;
  }

  /**
   * Get investmentExperience
   * @return investmentExperience
   */
  @javax.annotation.Nullable
  public List<AssetExperience> getInvestmentExperience() {
    return investmentExperience;
  }

  public void setInvestmentExperience(@javax.annotation.Nullable List<AssetExperience> investmentExperience) {
    this.investmentExperience = investmentExperience;
  }


  public FinancialInformation investmentObjectives(@javax.annotation.Nullable List<InvestmentObjectivesEnum> investmentObjectives) {
    this.investmentObjectives = investmentObjectives;
    return this;
  }

  public FinancialInformation addInvestmentObjectivesItem(InvestmentObjectivesEnum investmentObjectivesItem) {
    if (this.investmentObjectives == null) {
      this.investmentObjectives = new ArrayList<>();
    }
    this.investmentObjectives.add(investmentObjectivesItem);
    return this;
  }

  /**
   * Get investmentObjectives
   * @return investmentObjectives
   */
  @javax.annotation.Nullable
  public List<InvestmentObjectivesEnum> getInvestmentObjectives() {
    return investmentObjectives;
  }

  public void setInvestmentObjectives(@javax.annotation.Nullable List<InvestmentObjectivesEnum> investmentObjectives) {
    this.investmentObjectives = investmentObjectives;
  }


  public FinancialInformation additionalSourcesOfIncome(@javax.annotation.Nullable List<SourceOfIncomeType> additionalSourcesOfIncome) {
    this.additionalSourcesOfIncome = additionalSourcesOfIncome;
    return this;
  }

  public FinancialInformation addAdditionalSourcesOfIncomeItem(SourceOfIncomeType additionalSourcesOfIncomeItem) {
    if (this.additionalSourcesOfIncome == null) {
      this.additionalSourcesOfIncome = new ArrayList<>();
    }
    this.additionalSourcesOfIncome.add(additionalSourcesOfIncomeItem);
    return this;
  }

  /**
   * Get additionalSourcesOfIncome
   * @return additionalSourcesOfIncome
   */
  @javax.annotation.Nullable
  public List<SourceOfIncomeType> getAdditionalSourcesOfIncome() {
    return additionalSourcesOfIncome;
  }

  public void setAdditionalSourcesOfIncome(@javax.annotation.Nullable List<SourceOfIncomeType> additionalSourcesOfIncome) {
    this.additionalSourcesOfIncome = additionalSourcesOfIncome;
  }


  public FinancialInformation sourcesOfWealth(@javax.annotation.Nullable List<SourceOfWealthType> sourcesOfWealth) {
    this.sourcesOfWealth = sourcesOfWealth;
    return this;
  }

  public FinancialInformation addSourcesOfWealthItem(SourceOfWealthType sourcesOfWealthItem) {
    if (this.sourcesOfWealth == null) {
      this.sourcesOfWealth = new ArrayList<>();
    }
    this.sourcesOfWealth.add(sourcesOfWealthItem);
    return this;
  }

  /**
   * Get sourcesOfWealth
   * @return sourcesOfWealth
   */
  @javax.annotation.Nullable
  public List<SourceOfWealthType> getSourcesOfWealth() {
    return sourcesOfWealth;
  }

  public void setSourcesOfWealth(@javax.annotation.Nullable List<SourceOfWealthType> sourcesOfWealth) {
    this.sourcesOfWealth = sourcesOfWealth;
  }


  public FinancialInformation soiQuestionnaire(@javax.annotation.Nullable SOIQuestionnaire soiQuestionnaire) {
    this.soiQuestionnaire = soiQuestionnaire;
    return this;
  }

  /**
   * Get soiQuestionnaire
   * @return soiQuestionnaire
   */
  @javax.annotation.Nullable
  public SOIQuestionnaire getSoiQuestionnaire() {
    return soiQuestionnaire;
  }

  public void setSoiQuestionnaire(@javax.annotation.Nullable SOIQuestionnaire soiQuestionnaire) {
    this.soiQuestionnaire = soiQuestionnaire;
  }


  public FinancialInformation questionnaires(@javax.annotation.Nullable List<QuestionnaireType> questionnaires) {
    this.questionnaires = questionnaires;
    return this;
  }

  public FinancialInformation addQuestionnairesItem(QuestionnaireType questionnairesItem) {
    if (this.questionnaires == null) {
      this.questionnaires = new ArrayList<>();
    }
    this.questionnaires.add(questionnairesItem);
    return this;
  }

  /**
   * Get questionnaires
   * @return questionnaires
   */
  @javax.annotation.Nullable
  public List<QuestionnaireType> getQuestionnaires() {
    return questionnaires;
  }

  public void setQuestionnaires(@javax.annotation.Nullable List<QuestionnaireType> questionnaires) {
    this.questionnaires = questionnaires;
  }


  public FinancialInformation netWorth(@javax.annotation.Nullable BigDecimal netWorth) {
    this.netWorth = netWorth;
    return this;
  }

  /**
   * Get netWorth
   * @return netWorth
   */
  @javax.annotation.Nullable
  public BigDecimal getNetWorth() {
    return netWorth;
  }

  public void setNetWorth(@javax.annotation.Nullable BigDecimal netWorth) {
    this.netWorth = netWorth;
  }


  public FinancialInformation liquidNetWorth(@javax.annotation.Nullable BigDecimal liquidNetWorth) {
    this.liquidNetWorth = liquidNetWorth;
    return this;
  }

  /**
   * Get liquidNetWorth
   * @return liquidNetWorth
   */
  @javax.annotation.Nullable
  public BigDecimal getLiquidNetWorth() {
    return liquidNetWorth;
  }

  public void setLiquidNetWorth(@javax.annotation.Nullable BigDecimal liquidNetWorth) {
    this.liquidNetWorth = liquidNetWorth;
  }


  public FinancialInformation annualNetIncome(@javax.annotation.Nullable BigDecimal annualNetIncome) {
    this.annualNetIncome = annualNetIncome;
    return this;
  }

  /**
   * Get annualNetIncome
   * @return annualNetIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getAnnualNetIncome() {
    return annualNetIncome;
  }

  public void setAnnualNetIncome(@javax.annotation.Nullable BigDecimal annualNetIncome) {
    this.annualNetIncome = annualNetIncome;
  }


  public FinancialInformation totalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
    return this;
  }

  /**
   * Get totalAssets
   * @return totalAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAssets() {
    return totalAssets;
  }

  public void setTotalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
  }


  public FinancialInformation sourceOfFunds(@javax.annotation.Nullable String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

  /**
   * Get sourceOfFunds
   * @return sourceOfFunds
   */
  @javax.annotation.Nullable
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(@javax.annotation.Nullable String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }


  public FinancialInformation translated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
    return this;
  }

  /**
   * Get translated
   * @return translated
   */
  @javax.annotation.Nullable
  public Boolean getTranslated() {
    return translated;
  }

  public void setTranslated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialInformation financialInformation = (FinancialInformation) o;
    return Objects.equals(this.investmentExperience, financialInformation.investmentExperience) &&
        Objects.equals(this.investmentObjectives, financialInformation.investmentObjectives) &&
        Objects.equals(this.additionalSourcesOfIncome, financialInformation.additionalSourcesOfIncome) &&
        Objects.equals(this.sourcesOfWealth, financialInformation.sourcesOfWealth) &&
        Objects.equals(this.soiQuestionnaire, financialInformation.soiQuestionnaire) &&
        Objects.equals(this.questionnaires, financialInformation.questionnaires) &&
        Objects.equals(this.netWorth, financialInformation.netWorth) &&
        Objects.equals(this.liquidNetWorth, financialInformation.liquidNetWorth) &&
        Objects.equals(this.annualNetIncome, financialInformation.annualNetIncome) &&
        Objects.equals(this.totalAssets, financialInformation.totalAssets) &&
        Objects.equals(this.sourceOfFunds, financialInformation.sourceOfFunds) &&
        Objects.equals(this.translated, financialInformation.translated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(investmentExperience, investmentObjectives, additionalSourcesOfIncome, sourcesOfWealth, soiQuestionnaire, questionnaires, netWorth, liquidNetWorth, annualNetIncome, totalAssets, sourceOfFunds, translated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialInformation {\n");
    sb.append("    investmentExperience: ").append(toIndentedString(investmentExperience)).append("\n");
    sb.append("    investmentObjectives: ").append(toIndentedString(investmentObjectives)).append("\n");
    sb.append("    additionalSourcesOfIncome: ").append(toIndentedString(additionalSourcesOfIncome)).append("\n");
    sb.append("    sourcesOfWealth: ").append(toIndentedString(sourcesOfWealth)).append("\n");
    sb.append("    soiQuestionnaire: ").append(toIndentedString(soiQuestionnaire)).append("\n");
    sb.append("    questionnaires: ").append(toIndentedString(questionnaires)).append("\n");
    sb.append("    netWorth: ").append(toIndentedString(netWorth)).append("\n");
    sb.append("    liquidNetWorth: ").append(toIndentedString(liquidNetWorth)).append("\n");
    sb.append("    annualNetIncome: ").append(toIndentedString(annualNetIncome)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    sb.append("    translated: ").append(toIndentedString(translated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("investmentExperience");
    openapiFields.add("investmentObjectives");
    openapiFields.add("additionalSourcesOfIncome");
    openapiFields.add("sourcesOfWealth");
    openapiFields.add("soiQuestionnaire");
    openapiFields.add("questionnaires");
    openapiFields.add("netWorth");
    openapiFields.add("liquidNetWorth");
    openapiFields.add("annualNetIncome");
    openapiFields.add("totalAssets");
    openapiFields.add("sourceOfFunds");
    openapiFields.add("translated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FinancialInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinancialInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinancialInformation is not found in the empty JSON string", FinancialInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinancialInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinancialInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("investmentExperience") != null && !jsonObj.get("investmentExperience").isJsonNull()) {
        JsonArray jsonArrayinvestmentExperience = jsonObj.getAsJsonArray("investmentExperience");
        if (jsonArrayinvestmentExperience != null) {
          // ensure the json data is an array
          if (!jsonObj.get("investmentExperience").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `investmentExperience` to be an array in the JSON string but got `%s`", jsonObj.get("investmentExperience").toString()));
          }

          // validate the optional field `investmentExperience` (array)
          for (int i = 0; i < jsonArrayinvestmentExperience.size(); i++) {
            AssetExperience.validateJsonElement(jsonArrayinvestmentExperience.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("investmentObjectives") != null && !jsonObj.get("investmentObjectives").isJsonNull() && !jsonObj.get("investmentObjectives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `investmentObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("investmentObjectives").toString()));
      }
      if (jsonObj.get("additionalSourcesOfIncome") != null && !jsonObj.get("additionalSourcesOfIncome").isJsonNull()) {
        JsonArray jsonArrayadditionalSourcesOfIncome = jsonObj.getAsJsonArray("additionalSourcesOfIncome");
        if (jsonArrayadditionalSourcesOfIncome != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalSourcesOfIncome").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalSourcesOfIncome` to be an array in the JSON string but got `%s`", jsonObj.get("additionalSourcesOfIncome").toString()));
          }

          // validate the optional field `additionalSourcesOfIncome` (array)
          for (int i = 0; i < jsonArrayadditionalSourcesOfIncome.size(); i++) {
            SourceOfIncomeType.validateJsonElement(jsonArrayadditionalSourcesOfIncome.get(i));
          };
        }
      }
      if (jsonObj.get("sourcesOfWealth") != null && !jsonObj.get("sourcesOfWealth").isJsonNull()) {
        JsonArray jsonArraysourcesOfWealth = jsonObj.getAsJsonArray("sourcesOfWealth");
        if (jsonArraysourcesOfWealth != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourcesOfWealth").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourcesOfWealth` to be an array in the JSON string but got `%s`", jsonObj.get("sourcesOfWealth").toString()));
          }

          // validate the optional field `sourcesOfWealth` (array)
          for (int i = 0; i < jsonArraysourcesOfWealth.size(); i++) {
            SourceOfWealthType.validateJsonElement(jsonArraysourcesOfWealth.get(i));
          };
        }
      }
      // validate the optional field `soiQuestionnaire`
      if (jsonObj.get("soiQuestionnaire") != null && !jsonObj.get("soiQuestionnaire").isJsonNull()) {
        SOIQuestionnaire.validateJsonElement(jsonObj.get("soiQuestionnaire"));
      }
      if (jsonObj.get("questionnaires") != null && !jsonObj.get("questionnaires").isJsonNull()) {
        JsonArray jsonArrayquestionnaires = jsonObj.getAsJsonArray("questionnaires");
        if (jsonArrayquestionnaires != null) {
          // ensure the json data is an array
          if (!jsonObj.get("questionnaires").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `questionnaires` to be an array in the JSON string but got `%s`", jsonObj.get("questionnaires").toString()));
          }

          // validate the optional field `questionnaires` (array)
          for (int i = 0; i < jsonArrayquestionnaires.size(); i++) {
            QuestionnaireType.validateJsonElement(jsonArrayquestionnaires.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceOfFunds") != null && !jsonObj.get("sourceOfFunds").isJsonNull()) && !jsonObj.get("sourceOfFunds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfFunds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfFunds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinancialInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinancialInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinancialInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinancialInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<FinancialInformation>() {
           @Override
           public void write(JsonWriter out, FinancialInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinancialInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FinancialInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FinancialInformation
   * @throws IOException if the JSON string is invalid with respect to FinancialInformation
   */
  public static FinancialInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinancialInformation.class);
  }

  /**
   * Convert an instance of FinancialInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

