/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnswerDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Answer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Answer {
  public static final String SERIALIZED_NAME_ANSWER_DETAIL = "answerDetail";
  @SerializedName(SERIALIZED_NAME_ANSWER_DETAIL)
  @javax.annotation.Nullable
  private List<AnswerDetail> answerDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  @javax.annotation.Nullable
  private String detail;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_QUESTION_ID = "questionId";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  @javax.annotation.Nullable
  private Integer questionId;

  public Answer() {
  }

  public Answer answerDetail(@javax.annotation.Nullable List<AnswerDetail> answerDetail) {
    this.answerDetail = answerDetail;
    return this;
  }

  public Answer addAnswerDetailItem(AnswerDetail answerDetailItem) {
    if (this.answerDetail == null) {
      this.answerDetail = new ArrayList<>();
    }
    this.answerDetail.add(answerDetailItem);
    return this;
  }

  /**
   * Get answerDetail
   * @return answerDetail
   */
  @javax.annotation.Nullable
  public List<AnswerDetail> getAnswerDetail() {
    return answerDetail;
  }

  public void setAnswerDetail(@javax.annotation.Nullable List<AnswerDetail> answerDetail) {
    this.answerDetail = answerDetail;
  }


  public Answer detail(@javax.annotation.Nullable String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(@javax.annotation.Nullable String detail) {
    this.detail = detail;
  }


  public Answer id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public Answer questionId(@javax.annotation.Nullable Integer questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Get questionId
   * @return questionId
   */
  @javax.annotation.Nullable
  public Integer getQuestionId() {
    return questionId;
  }

  public void setQuestionId(@javax.annotation.Nullable Integer questionId) {
    this.questionId = questionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Answer answer = (Answer) o;
    return Objects.equals(this.answerDetail, answer.answerDetail) &&
        Objects.equals(this.detail, answer.detail) &&
        Objects.equals(this.id, answer.id) &&
        Objects.equals(this.questionId, answer.questionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerDetail, detail, id, questionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Answer {\n");
    sb.append("    answerDetail: ").append(toIndentedString(answerDetail)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerDetail");
    openapiFields.add("detail");
    openapiFields.add("id");
    openapiFields.add("questionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Answer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Answer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Answer is not found in the empty JSON string", Answer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Answer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Answer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("answerDetail") != null && !jsonObj.get("answerDetail").isJsonNull()) {
        JsonArray jsonArrayanswerDetail = jsonObj.getAsJsonArray("answerDetail");
        if (jsonArrayanswerDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("answerDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `answerDetail` to be an array in the JSON string but got `%s`", jsonObj.get("answerDetail").toString()));
          }

          // validate the optional field `answerDetail` (array)
          for (int i = 0; i < jsonArrayanswerDetail.size(); i++) {
            AnswerDetail.validateJsonElement(jsonArrayanswerDetail.get(i));
          };
        }
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Answer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Answer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Answer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Answer.class));

       return (TypeAdapter<T>) new TypeAdapter<Answer>() {
           @Override
           public void write(JsonWriter out, Answer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Answer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Answer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Answer
   * @throws IOException if the JSON string is invalid with respect to Answer
   */
  public static Answer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Answer.class);
  }

  /**
   * Convert an instance of Answer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

