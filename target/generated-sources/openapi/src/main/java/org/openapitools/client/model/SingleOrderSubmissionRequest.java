/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.SingleOrderSubmissionRequestStrategyParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single order ticket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SingleOrderSubmissionRequest {
  public static final String SERIALIZED_NAME_ACCT_ID = "acctId";
  @SerializedName(SERIALIZED_NAME_ACCT_ID)
  @javax.annotation.Nullable
  private String acctId;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nonnull
  private Integer conid;

  public static final String SERIALIZED_NAME_CONIDEX = "conidex";
  @SerializedName(SERIALIZED_NAME_CONIDEX)
  @javax.annotation.Nullable
  private String conidex;

  public static final String SERIALIZED_NAME_SEC_TYPE = "secType";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private String secType;

  public static final String SERIALIZED_NAME_C_O_I_D = "cOID";
  @SerializedName(SERIALIZED_NAME_C_O_I_D)
  @javax.annotation.Nullable
  private String cOID;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_IS_SINGLE_GROUP = "isSingleGroup";
  @SerializedName(SERIALIZED_NAME_IS_SINGLE_GROUP)
  @javax.annotation.Nullable
  private Boolean isSingleGroup;

  public static final String SERIALIZED_NAME_OUTSIDE_R_T_H = "outsideRTH";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_R_T_H)
  @javax.annotation.Nullable
  private Boolean outsideRTH;

  public static final String SERIALIZED_NAME_AUX_PRICE = "auxPrice";
  @SerializedName(SERIALIZED_NAME_AUX_PRICE)
  @javax.annotation.Nullable
  private BigDecimal auxPrice;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  @javax.annotation.Nullable
  private String ticker;

  public static final String SERIALIZED_NAME_TRAILING_AMT = "trailingAmt";
  @SerializedName(SERIALIZED_NAME_TRAILING_AMT)
  @javax.annotation.Nullable
  private BigDecimal trailingAmt;

  /**
   * Specifies the type of trailing used with a Trailing order.
   */
  @JsonAdapter(TrailingTypeEnum.Adapter.class)
  public enum TrailingTypeEnum {
    AMT("amt"),
    
    PERCENT("%");

    private String value;

    TrailingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrailingTypeEnum fromValue(String value) {
      for (TrailingTypeEnum b : TrailingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrailingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrailingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrailingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrailingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrailingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAILING_TYPE = "trailingType";
  @SerializedName(SERIALIZED_NAME_TRAILING_TYPE)
  @javax.annotation.Nullable
  private TrailingTypeEnum trailingType;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  @javax.annotation.Nullable
  private String referrer;

  public static final String SERIALIZED_NAME_CASH_QTY = "cashQty";
  @SerializedName(SERIALIZED_NAME_CASH_QTY)
  @javax.annotation.Nullable
  private BigDecimal cashQty;

  public static final String SERIALIZED_NAME_USE_ADAPTIVE = "useAdaptive";
  @SerializedName(SERIALIZED_NAME_USE_ADAPTIVE)
  @javax.annotation.Nullable
  private Boolean useAdaptive;

  public static final String SERIALIZED_NAME_IS_CCY_CONV = "isCcyConv";
  @SerializedName(SERIALIZED_NAME_IS_CCY_CONV)
  @javax.annotation.Nullable
  private Boolean isCcyConv;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  @javax.annotation.Nonnull
  private String orderType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private BigDecimal price;

  /**
   * Side of the order ticket.
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    BUY("BUY"),
    
    SELL("SELL");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  @javax.annotation.Nonnull
  private SideEnum side;

  /**
   * Time in force of the order ticket.
   */
  @JsonAdapter(TifEnum.Adapter.class)
  public enum TifEnum {
    DAY("DAY"),
    
    IOC("IOC"),
    
    GTC("GTC"),
    
    OPG("OPG"),
    
    PAX("PAX");

    private String value;

    TifEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TifEnum fromValue(String value) {
      for (TifEnum b : TifEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TifEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TifEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TifEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TifEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TifEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIF = "tif";
  @SerializedName(SERIALIZED_NAME_TIF)
  @javax.annotation.Nonnull
  private TifEnum tif;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nonnull
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  @javax.annotation.Nullable
  private String strategy;

  public static final String SERIALIZED_NAME_STRATEGY_PARAMETERS = "strategyParameters";
  @SerializedName(SERIALIZED_NAME_STRATEGY_PARAMETERS)
  @javax.annotation.Nullable
  private SingleOrderSubmissionRequestStrategyParameters strategyParameters;

  public SingleOrderSubmissionRequest() {
  }

  public SingleOrderSubmissionRequest acctId(@javax.annotation.Nullable String acctId) {
    this.acctId = acctId;
    return this;
  }

  /**
   * Receiving account of the order ticket.
   * @return acctId
   */
  @javax.annotation.Nullable
  public String getAcctId() {
    return acctId;
  }

  public void setAcctId(@javax.annotation.Nullable String acctId) {
    this.acctId = acctId;
  }


  public SingleOrderSubmissionRequest conid(@javax.annotation.Nonnull Integer conid) {
    this.conid = conid;
    return this;
  }

  /**
   * IB contract ID of the instrument.
   * @return conid
   */
  @javax.annotation.Nonnull
  public Integer getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nonnull Integer conid) {
    this.conid = conid;
  }


  public SingleOrderSubmissionRequest conidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
    return this;
  }

  /**
   * Contract ID and routing destination together in format 123456@EXCHANGE.
   * @return conidex
   */
  @javax.annotation.Nullable
  public String getConidex() {
    return conidex;
  }

  public void setConidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
  }


  public SingleOrderSubmissionRequest secType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
    return this;
  }

  /**
   * IB asset class identifier.
   * @return secType
   */
  @javax.annotation.Nullable
  public String getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
  }


  public SingleOrderSubmissionRequest cOID(@javax.annotation.Nullable String cOID) {
    this.cOID = cOID;
    return this;
  }

  /**
   * Client-configurable order identifier.
   * @return cOID
   */
  @javax.annotation.Nullable
  public String getcOID() {
    return cOID;
  }

  public void setcOID(@javax.annotation.Nullable String cOID) {
    this.cOID = cOID;
  }


  public SingleOrderSubmissionRequest parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * If the order ticket is a child order in a bracket, the parentId field must be set equal to the cOID provided for the parent order.
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }


  public SingleOrderSubmissionRequest listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * The listing exchange of the instrument.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public SingleOrderSubmissionRequest isSingleGroup(@javax.annotation.Nullable Boolean isSingleGroup) {
    this.isSingleGroup = isSingleGroup;
    return this;
  }

  /**
   * Indicates that all orders in the containing array are to be treated as an OCA group.
   * @return isSingleGroup
   */
  @javax.annotation.Nullable
  public Boolean getIsSingleGroup() {
    return isSingleGroup;
  }

  public void setIsSingleGroup(@javax.annotation.Nullable Boolean isSingleGroup) {
    this.isSingleGroup = isSingleGroup;
  }


  public SingleOrderSubmissionRequest outsideRTH(@javax.annotation.Nullable Boolean outsideRTH) {
    this.outsideRTH = outsideRTH;
    return this;
  }

  /**
   * Instructs IB to permit the order to execute outside of regular trading hours.
   * @return outsideRTH
   */
  @javax.annotation.Nullable
  public Boolean getOutsideRTH() {
    return outsideRTH;
  }

  public void setOutsideRTH(@javax.annotation.Nullable Boolean outsideRTH) {
    this.outsideRTH = outsideRTH;
  }


  public SingleOrderSubmissionRequest auxPrice(@javax.annotation.Nullable BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
    return this;
  }

  /**
   * Additional price value used in certain order types, such as stop orders.
   * @return auxPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getAuxPrice() {
    return auxPrice;
  }

  public void setAuxPrice(@javax.annotation.Nullable BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
  }


  public SingleOrderSubmissionRequest ticker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Ticker symbol of the instrument.
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
  }


  public SingleOrderSubmissionRequest trailingAmt(@javax.annotation.Nullable BigDecimal trailingAmt) {
    this.trailingAmt = trailingAmt;
    return this;
  }

  /**
   * Offset used with Trailing orders.
   * @return trailingAmt
   */
  @javax.annotation.Nullable
  public BigDecimal getTrailingAmt() {
    return trailingAmt;
  }

  public void setTrailingAmt(@javax.annotation.Nullable BigDecimal trailingAmt) {
    this.trailingAmt = trailingAmt;
  }


  public SingleOrderSubmissionRequest trailingType(@javax.annotation.Nullable TrailingTypeEnum trailingType) {
    this.trailingType = trailingType;
    return this;
  }

  /**
   * Specifies the type of trailing used with a Trailing order.
   * @return trailingType
   */
  @javax.annotation.Nullable
  public TrailingTypeEnum getTrailingType() {
    return trailingType;
  }

  public void setTrailingType(@javax.annotation.Nullable TrailingTypeEnum trailingType) {
    this.trailingType = trailingType;
  }


  public SingleOrderSubmissionRequest referrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * IB internal identifier for order entry UI element.
   * @return referrer
   */
  @javax.annotation.Nullable
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
  }


  public SingleOrderSubmissionRequest cashQty(@javax.annotation.Nullable BigDecimal cashQty) {
    this.cashQty = cashQty;
    return this;
  }

  /**
   * Quantity of currency used with cash quantity orders.
   * @return cashQty
   */
  @javax.annotation.Nullable
  public BigDecimal getCashQty() {
    return cashQty;
  }

  public void setCashQty(@javax.annotation.Nullable BigDecimal cashQty) {
    this.cashQty = cashQty;
  }


  public SingleOrderSubmissionRequest useAdaptive(@javax.annotation.Nullable Boolean useAdaptive) {
    this.useAdaptive = useAdaptive;
    return this;
  }

  /**
   * Instructs IB to apply the Price Management Algo.
   * @return useAdaptive
   */
  @javax.annotation.Nullable
  public Boolean getUseAdaptive() {
    return useAdaptive;
  }

  public void setUseAdaptive(@javax.annotation.Nullable Boolean useAdaptive) {
    this.useAdaptive = useAdaptive;
  }


  public SingleOrderSubmissionRequest isCcyConv(@javax.annotation.Nullable Boolean isCcyConv) {
    this.isCcyConv = isCcyConv;
    return this;
  }

  /**
   * Indicates that a forex order is for currency conversion and should not entail a virtual forex position in the account, where applicable.
   * @return isCcyConv
   */
  @javax.annotation.Nullable
  public Boolean getIsCcyConv() {
    return isCcyConv;
  }

  public void setIsCcyConv(@javax.annotation.Nullable Boolean isCcyConv) {
    this.isCcyConv = isCcyConv;
  }


  public SingleOrderSubmissionRequest orderType(@javax.annotation.Nonnull String orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * IB order type identifier.
   * @return orderType
   */
  @javax.annotation.Nonnull
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(@javax.annotation.Nonnull String orderType) {
    this.orderType = orderType;
  }


  public SingleOrderSubmissionRequest price(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the order ticket, where applicable.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
  }


  public SingleOrderSubmissionRequest side(@javax.annotation.Nonnull SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Side of the order ticket.
   * @return side
   */
  @javax.annotation.Nonnull
  public SideEnum getSide() {
    return side;
  }

  public void setSide(@javax.annotation.Nonnull SideEnum side) {
    this.side = side;
  }


  public SingleOrderSubmissionRequest tif(@javax.annotation.Nonnull TifEnum tif) {
    this.tif = tif;
    return this;
  }

  /**
   * Time in force of the order ticket.
   * @return tif
   */
  @javax.annotation.Nonnull
  public TifEnum getTif() {
    return tif;
  }

  public void setTif(@javax.annotation.Nonnull TifEnum tif) {
    this.tif = tif;
  }


  public SingleOrderSubmissionRequest quantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of the order ticket in units of the instrument.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
  }


  public SingleOrderSubmissionRequest strategy(@javax.annotation.Nullable String strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * The name of an execution algorithm.
   * @return strategy
   */
  @javax.annotation.Nullable
  public String getStrategy() {
    return strategy;
  }

  public void setStrategy(@javax.annotation.Nullable String strategy) {
    this.strategy = strategy;
  }


  public SingleOrderSubmissionRequest strategyParameters(@javax.annotation.Nullable SingleOrderSubmissionRequestStrategyParameters strategyParameters) {
    this.strategyParameters = strategyParameters;
    return this;
  }

  /**
   * Get strategyParameters
   * @return strategyParameters
   */
  @javax.annotation.Nullable
  public SingleOrderSubmissionRequestStrategyParameters getStrategyParameters() {
    return strategyParameters;
  }

  public void setStrategyParameters(@javax.annotation.Nullable SingleOrderSubmissionRequestStrategyParameters strategyParameters) {
    this.strategyParameters = strategyParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleOrderSubmissionRequest singleOrderSubmissionRequest = (SingleOrderSubmissionRequest) o;
    return Objects.equals(this.acctId, singleOrderSubmissionRequest.acctId) &&
        Objects.equals(this.conid, singleOrderSubmissionRequest.conid) &&
        Objects.equals(this.conidex, singleOrderSubmissionRequest.conidex) &&
        Objects.equals(this.secType, singleOrderSubmissionRequest.secType) &&
        Objects.equals(this.cOID, singleOrderSubmissionRequest.cOID) &&
        Objects.equals(this.parentId, singleOrderSubmissionRequest.parentId) &&
        Objects.equals(this.listingExchange, singleOrderSubmissionRequest.listingExchange) &&
        Objects.equals(this.isSingleGroup, singleOrderSubmissionRequest.isSingleGroup) &&
        Objects.equals(this.outsideRTH, singleOrderSubmissionRequest.outsideRTH) &&
        Objects.equals(this.auxPrice, singleOrderSubmissionRequest.auxPrice) &&
        Objects.equals(this.ticker, singleOrderSubmissionRequest.ticker) &&
        Objects.equals(this.trailingAmt, singleOrderSubmissionRequest.trailingAmt) &&
        Objects.equals(this.trailingType, singleOrderSubmissionRequest.trailingType) &&
        Objects.equals(this.referrer, singleOrderSubmissionRequest.referrer) &&
        Objects.equals(this.cashQty, singleOrderSubmissionRequest.cashQty) &&
        Objects.equals(this.useAdaptive, singleOrderSubmissionRequest.useAdaptive) &&
        Objects.equals(this.isCcyConv, singleOrderSubmissionRequest.isCcyConv) &&
        Objects.equals(this.orderType, singleOrderSubmissionRequest.orderType) &&
        Objects.equals(this.price, singleOrderSubmissionRequest.price) &&
        Objects.equals(this.side, singleOrderSubmissionRequest.side) &&
        Objects.equals(this.tif, singleOrderSubmissionRequest.tif) &&
        Objects.equals(this.quantity, singleOrderSubmissionRequest.quantity) &&
        Objects.equals(this.strategy, singleOrderSubmissionRequest.strategy) &&
        Objects.equals(this.strategyParameters, singleOrderSubmissionRequest.strategyParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctId, conid, conidex, secType, cOID, parentId, listingExchange, isSingleGroup, outsideRTH, auxPrice, ticker, trailingAmt, trailingType, referrer, cashQty, useAdaptive, isCcyConv, orderType, price, side, tif, quantity, strategy, strategyParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleOrderSubmissionRequest {\n");
    sb.append("    acctId: ").append(toIndentedString(acctId)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    conidex: ").append(toIndentedString(conidex)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    cOID: ").append(toIndentedString(cOID)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    isSingleGroup: ").append(toIndentedString(isSingleGroup)).append("\n");
    sb.append("    outsideRTH: ").append(toIndentedString(outsideRTH)).append("\n");
    sb.append("    auxPrice: ").append(toIndentedString(auxPrice)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    trailingAmt: ").append(toIndentedString(trailingAmt)).append("\n");
    sb.append("    trailingType: ").append(toIndentedString(trailingType)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    cashQty: ").append(toIndentedString(cashQty)).append("\n");
    sb.append("    useAdaptive: ").append(toIndentedString(useAdaptive)).append("\n");
    sb.append("    isCcyConv: ").append(toIndentedString(isCcyConv)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    strategyParameters: ").append(toIndentedString(strategyParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctId");
    openapiFields.add("conid");
    openapiFields.add("conidex");
    openapiFields.add("secType");
    openapiFields.add("cOID");
    openapiFields.add("parentId");
    openapiFields.add("listingExchange");
    openapiFields.add("isSingleGroup");
    openapiFields.add("outsideRTH");
    openapiFields.add("auxPrice");
    openapiFields.add("ticker");
    openapiFields.add("trailingAmt");
    openapiFields.add("trailingType");
    openapiFields.add("referrer");
    openapiFields.add("cashQty");
    openapiFields.add("useAdaptive");
    openapiFields.add("isCcyConv");
    openapiFields.add("orderType");
    openapiFields.add("price");
    openapiFields.add("side");
    openapiFields.add("tif");
    openapiFields.add("quantity");
    openapiFields.add("strategy");
    openapiFields.add("strategyParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conid");
    openapiRequiredFields.add("orderType");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("tif");
    openapiRequiredFields.add("quantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleOrderSubmissionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleOrderSubmissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleOrderSubmissionRequest is not found in the empty JSON string", SingleOrderSubmissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleOrderSubmissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleOrderSubmissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleOrderSubmissionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acctId") != null && !jsonObj.get("acctId").isJsonNull()) && !jsonObj.get("acctId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctId").toString()));
      }
      if ((jsonObj.get("conidex") != null && !jsonObj.get("conidex").isJsonNull()) && !jsonObj.get("conidex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidex").toString()));
      }
      if ((jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) && !jsonObj.get("secType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secType").toString()));
      }
      if ((jsonObj.get("cOID") != null && !jsonObj.get("cOID").isJsonNull()) && !jsonObj.get("cOID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cOID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cOID").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if ((jsonObj.get("listingExchange") != null && !jsonObj.get("listingExchange").isJsonNull()) && !jsonObj.get("listingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingExchange").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("trailingType") != null && !jsonObj.get("trailingType").isJsonNull()) && !jsonObj.get("trailingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trailingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trailingType").toString()));
      }
      // validate the optional field `trailingType`
      if (jsonObj.get("trailingType") != null && !jsonObj.get("trailingType").isJsonNull()) {
        TrailingTypeEnum.validateJsonElement(jsonObj.get("trailingType"));
      }
      if ((jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if (!jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the required field `side`
      SideEnum.validateJsonElement(jsonObj.get("side"));
      if (!jsonObj.get("tif").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tif` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tif").toString()));
      }
      // validate the required field `tif`
      TifEnum.validateJsonElement(jsonObj.get("tif"));
      if ((jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) && !jsonObj.get("strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategy").toString()));
      }
      // validate the optional field `strategyParameters`
      if (jsonObj.get("strategyParameters") != null && !jsonObj.get("strategyParameters").isJsonNull()) {
        SingleOrderSubmissionRequestStrategyParameters.validateJsonElement(jsonObj.get("strategyParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleOrderSubmissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleOrderSubmissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleOrderSubmissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleOrderSubmissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleOrderSubmissionRequest>() {
           @Override
           public void write(JsonWriter out, SingleOrderSubmissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleOrderSubmissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleOrderSubmissionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleOrderSubmissionRequest
   * @throws IOException if the JSON string is invalid with respect to SingleOrderSubmissionRequest
   */
  public static SingleOrderSubmissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleOrderSubmissionRequest.class);
  }

  /**
   * Convert an instance of SingleOrderSubmissionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

