/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ContraBrokerInfo;
import org.openapitools.client.model.NonDisclosedDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComplexAssetTransferInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class ComplexAssetTransferInstruction {
  public static final String SERIALIZED_NAME_CLIENT_INSTRUCTION_ID = "clientInstructionId";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal clientInstructionId;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    IN("IN"),
    
    OUT("OUT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nonnull
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nonnull
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_TRADING_INSTRUMENT = "tradingInstrument";
  @SerializedName(SERIALIZED_NAME_TRADING_INSTRUMENT)
  @javax.annotation.Nullable
  private Object tradingInstrument;

  public static final String SERIALIZED_NAME_CONTRA_BROKER_INFO = "contraBrokerInfo";
  @SerializedName(SERIALIZED_NAME_CONTRA_BROKER_INFO)
  @javax.annotation.Nonnull
  private ContraBrokerInfo contraBrokerInfo;

  public static final String SERIALIZED_NAME_NON_DISCLOSED_DETAIL = "nonDisclosedDetail";
  @SerializedName(SERIALIZED_NAME_NON_DISCLOSED_DETAIL)
  @javax.annotation.Nullable
  private NonDisclosedDetail nonDisclosedDetail;

  public ComplexAssetTransferInstruction() {
  }

  public ComplexAssetTransferInstruction clientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
    return this;
  }

  /**
   * Get clientInstructionId
   * @return clientInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getClientInstructionId() {
    return clientInstructionId;
  }

  public void setClientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
  }


  public ComplexAssetTransferInstruction direction(@javax.annotation.Nonnull DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nonnull DirectionEnum direction) {
    this.direction = direction;
  }


  public ComplexAssetTransferInstruction accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public ComplexAssetTransferInstruction quantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * minimum: 0
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
  }


  public ComplexAssetTransferInstruction tradingInstrument(@javax.annotation.Nullable Object tradingInstrument) {
    this.tradingInstrument = tradingInstrument;
    return this;
  }

  /**
   * Get tradingInstrument
   * @return tradingInstrument
   */
  @javax.annotation.Nullable
  public Object getTradingInstrument() {
    return tradingInstrument;
  }

  public void setTradingInstrument(@javax.annotation.Nullable Object tradingInstrument) {
    this.tradingInstrument = tradingInstrument;
  }


  public ComplexAssetTransferInstruction contraBrokerInfo(@javax.annotation.Nonnull ContraBrokerInfo contraBrokerInfo) {
    this.contraBrokerInfo = contraBrokerInfo;
    return this;
  }

  /**
   * Get contraBrokerInfo
   * @return contraBrokerInfo
   */
  @javax.annotation.Nonnull
  public ContraBrokerInfo getContraBrokerInfo() {
    return contraBrokerInfo;
  }

  public void setContraBrokerInfo(@javax.annotation.Nonnull ContraBrokerInfo contraBrokerInfo) {
    this.contraBrokerInfo = contraBrokerInfo;
  }


  public ComplexAssetTransferInstruction nonDisclosedDetail(@javax.annotation.Nullable NonDisclosedDetail nonDisclosedDetail) {
    this.nonDisclosedDetail = nonDisclosedDetail;
    return this;
  }

  /**
   * Get nonDisclosedDetail
   * @return nonDisclosedDetail
   */
  @javax.annotation.Nullable
  public NonDisclosedDetail getNonDisclosedDetail() {
    return nonDisclosedDetail;
  }

  public void setNonDisclosedDetail(@javax.annotation.Nullable NonDisclosedDetail nonDisclosedDetail) {
    this.nonDisclosedDetail = nonDisclosedDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplexAssetTransferInstruction complexAssetTransferInstruction = (ComplexAssetTransferInstruction) o;
    return Objects.equals(this.clientInstructionId, complexAssetTransferInstruction.clientInstructionId) &&
        Objects.equals(this.direction, complexAssetTransferInstruction.direction) &&
        Objects.equals(this.accountId, complexAssetTransferInstruction.accountId) &&
        Objects.equals(this.quantity, complexAssetTransferInstruction.quantity) &&
        Objects.equals(this.tradingInstrument, complexAssetTransferInstruction.tradingInstrument) &&
        Objects.equals(this.contraBrokerInfo, complexAssetTransferInstruction.contraBrokerInfo) &&
        Objects.equals(this.nonDisclosedDetail, complexAssetTransferInstruction.nonDisclosedDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInstructionId, direction, accountId, quantity, tradingInstrument, contraBrokerInfo, nonDisclosedDetail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplexAssetTransferInstruction {\n");
    sb.append("    clientInstructionId: ").append(toIndentedString(clientInstructionId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tradingInstrument: ").append(toIndentedString(tradingInstrument)).append("\n");
    sb.append("    contraBrokerInfo: ").append(toIndentedString(contraBrokerInfo)).append("\n");
    sb.append("    nonDisclosedDetail: ").append(toIndentedString(nonDisclosedDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInstructionId");
    openapiFields.add("direction");
    openapiFields.add("accountId");
    openapiFields.add("quantity");
    openapiFields.add("tradingInstrument");
    openapiFields.add("contraBrokerInfo");
    openapiFields.add("nonDisclosedDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientInstructionId");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("tradingInstrument");
    openapiRequiredFields.add("contraBrokerInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplexAssetTransferInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplexAssetTransferInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplexAssetTransferInstruction is not found in the empty JSON string", ComplexAssetTransferInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplexAssetTransferInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplexAssetTransferInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComplexAssetTransferInstruction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the required field `direction`
      DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the required field `tradingInstrument`
      Object.validateJsonElement(jsonObj.get("tradingInstrument"));
      // validate the required field `contraBrokerInfo`
      ContraBrokerInfo.validateJsonElement(jsonObj.get("contraBrokerInfo"));
      // validate the optional field `nonDisclosedDetail`
      if (jsonObj.get("nonDisclosedDetail") != null && !jsonObj.get("nonDisclosedDetail").isJsonNull()) {
        NonDisclosedDetail.validateJsonElement(jsonObj.get("nonDisclosedDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplexAssetTransferInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplexAssetTransferInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplexAssetTransferInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplexAssetTransferInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplexAssetTransferInstruction>() {
           @Override
           public void write(JsonWriter out, ComplexAssetTransferInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplexAssetTransferInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplexAssetTransferInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplexAssetTransferInstruction
   * @throws IOException if the JSON string is invalid with respect to ComplexAssetTransferInstruction
   */
  public static ComplexAssetTransferInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplexAssetTransferInstruction.class);
  }

  /**
   * Convert an instance of ComplexAssetTransferInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

