/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecDefInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SecDefInfoResponse {
  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private Integer conid;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  @javax.annotation.Nullable
  private String ticker;

  public static final String SERIALIZED_NAME_SEC_TYPE = "secType";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private String secType;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_VALID_EXCHANGES = "validExchanges";
  @SerializedName(SERIALIZED_NAME_VALID_EXCHANGES)
  @javax.annotation.Nullable
  private String validExchanges;

  public static final String SERIALIZED_NAME_PRICE_RENDERING = "priceRendering";
  @SerializedName(SERIALIZED_NAME_PRICE_RENDERING)
  @javax.annotation.Nullable
  private Object priceRendering = null;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  @javax.annotation.Nullable
  private String maturityDate;

  /**
   * Set the right for the given contract. * &#x60;C&#x60; - for Call options. * &#x60;P&#x60; - for Put options. 
   */
  @JsonAdapter(RightEnum.Adapter.class)
  public enum RightEnum {
    P("P"),
    
    C("C");

    private String value;

    RightEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RightEnum fromValue(String value) {
      for (RightEnum b : RightEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RightEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RightEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RightEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RightEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RightEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  @javax.annotation.Nullable
  private RightEnum right;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  @javax.annotation.Nullable
  private BigDecimal strike;

  public SecDefInfoResponse() {
  }

  public SecDefInfoResponse conid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Contract Identifier of the given contract.
   * @return conid
   */
  @javax.annotation.Nullable
  public Integer getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
  }


  public SecDefInfoResponse ticker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Ticker symbol for the given contract
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
  }


  public SecDefInfoResponse secType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
    return this;
  }

  /**
   * Security type for the given contract.
   * @return secType
   */
  @javax.annotation.Nullable
  public String getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
  }


  public SecDefInfoResponse listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Primary listing exchange for the given contract.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public SecDefInfoResponse exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * Exchange requesting data for.
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public SecDefInfoResponse companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of the company for the given contract.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public SecDefInfoResponse currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Traded currency allowed for the given contract.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public SecDefInfoResponse validExchanges(@javax.annotation.Nullable String validExchanges) {
    this.validExchanges = validExchanges;
    return this;
  }

  /**
   * Series of all valid exchanges the contract can be traded on in a single comma-separated string.
   * @return validExchanges
   */
  @javax.annotation.Nullable
  public String getValidExchanges() {
    return validExchanges;
  }

  public void setValidExchanges(@javax.annotation.Nullable String validExchanges) {
    this.validExchanges = validExchanges;
  }


  public SecDefInfoResponse priceRendering(@javax.annotation.Nullable Object priceRendering) {
    this.priceRendering = priceRendering;
    return this;
  }

  /**
   * Get priceRendering
   * @return priceRendering
   */
  @javax.annotation.Nullable
  public Object getPriceRendering() {
    return priceRendering;
  }

  public void setPriceRendering(@javax.annotation.Nullable Object priceRendering) {
    this.priceRendering = priceRendering;
  }


  public SecDefInfoResponse maturityDate(@javax.annotation.Nullable String maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

  /**
   * Date of expiration for the given contract.
   * @return maturityDate
   */
  @javax.annotation.Nullable
  public String getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(@javax.annotation.Nullable String maturityDate) {
    this.maturityDate = maturityDate;
  }


  public SecDefInfoResponse right(@javax.annotation.Nullable RightEnum right) {
    this.right = right;
    return this;
  }

  /**
   * Set the right for the given contract. * &#x60;C&#x60; - for Call options. * &#x60;P&#x60; - for Put options. 
   * @return right
   */
  @javax.annotation.Nullable
  public RightEnum getRight() {
    return right;
  }

  public void setRight(@javax.annotation.Nullable RightEnum right) {
    this.right = right;
  }


  public SecDefInfoResponse strike(@javax.annotation.Nullable BigDecimal strike) {
    this.strike = strike;
    return this;
  }

  /**
   * Returns the given strike value for the given contract.
   * @return strike
   */
  @javax.annotation.Nullable
  public BigDecimal getStrike() {
    return strike;
  }

  public void setStrike(@javax.annotation.Nullable BigDecimal strike) {
    this.strike = strike;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecDefInfoResponse secDefInfoResponse = (SecDefInfoResponse) o;
    return Objects.equals(this.conid, secDefInfoResponse.conid) &&
        Objects.equals(this.ticker, secDefInfoResponse.ticker) &&
        Objects.equals(this.secType, secDefInfoResponse.secType) &&
        Objects.equals(this.listingExchange, secDefInfoResponse.listingExchange) &&
        Objects.equals(this.exchange, secDefInfoResponse.exchange) &&
        Objects.equals(this.companyName, secDefInfoResponse.companyName) &&
        Objects.equals(this.currency, secDefInfoResponse.currency) &&
        Objects.equals(this.validExchanges, secDefInfoResponse.validExchanges) &&
        Objects.equals(this.priceRendering, secDefInfoResponse.priceRendering) &&
        Objects.equals(this.maturityDate, secDefInfoResponse.maturityDate) &&
        Objects.equals(this.right, secDefInfoResponse.right) &&
        Objects.equals(this.strike, secDefInfoResponse.strike);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(conid, ticker, secType, listingExchange, exchange, companyName, currency, validExchanges, priceRendering, maturityDate, right, strike);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecDefInfoResponse {\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    validExchanges: ").append(toIndentedString(validExchanges)).append("\n");
    sb.append("    priceRendering: ").append(toIndentedString(priceRendering)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conid");
    openapiFields.add("ticker");
    openapiFields.add("secType");
    openapiFields.add("listingExchange");
    openapiFields.add("exchange");
    openapiFields.add("companyName");
    openapiFields.add("currency");
    openapiFields.add("validExchanges");
    openapiFields.add("priceRendering");
    openapiFields.add("maturityDate");
    openapiFields.add("right");
    openapiFields.add("strike");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecDefInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecDefInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecDefInfoResponse is not found in the empty JSON string", SecDefInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecDefInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecDefInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) && !jsonObj.get("secType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secType").toString()));
      }
      if ((jsonObj.get("listingExchange") != null && !jsonObj.get("listingExchange").isJsonNull()) && !jsonObj.get("listingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingExchange").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("validExchanges") != null && !jsonObj.get("validExchanges").isJsonNull()) && !jsonObj.get("validExchanges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validExchanges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validExchanges").toString()));
      }
      if ((jsonObj.get("maturityDate") != null && !jsonObj.get("maturityDate").isJsonNull()) && !jsonObj.get("maturityDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maturityDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maturityDate").toString()));
      }
      if ((jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) && !jsonObj.get("right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right").toString()));
      }
      // validate the optional field `right`
      if (jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) {
        RightEnum.validateJsonElement(jsonObj.get("right"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecDefInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecDefInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecDefInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecDefInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SecDefInfoResponse>() {
           @Override
           public void write(JsonWriter out, SecDefInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecDefInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecDefInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecDefInfoResponse
   * @throws IOException if the JSON string is invalid with respect to SecDefInfoResponse
   */
  public static SecDefInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecDefInfoResponse.class);
  }

  /**
   * Convert an instance of SecDefInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

