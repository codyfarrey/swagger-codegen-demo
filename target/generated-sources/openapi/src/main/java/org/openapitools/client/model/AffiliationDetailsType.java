/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AffiliationDetailsType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AffiliationDetailsType {
  /**
   * Gets or Sets affiliationRelationship
   */
  @JsonAdapter(AffiliationRelationshipEnum.Adapter.class)
  public enum AffiliationRelationshipEnum {
    SELF("Self"),
    
    SPOUSE("Spouse"),
    
    PARENT("Parent"),
    
    CHILD("Child"),
    
    OTHER("Other");

    private String value;

    AffiliationRelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AffiliationRelationshipEnum fromValue(String value) {
      for (AffiliationRelationshipEnum b : AffiliationRelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AffiliationRelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AffiliationRelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AffiliationRelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AffiliationRelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AffiliationRelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AFFILIATION_RELATIONSHIP = "affiliationRelationship";
  @SerializedName(SERIALIZED_NAME_AFFILIATION_RELATIONSHIP)
  @javax.annotation.Nullable
  private AffiliationRelationshipEnum affiliationRelationship;

  public static final String SERIALIZED_NAME_PERSON_NAME = "personName";
  @SerializedName(SERIALIZED_NAME_PERSON_NAME)
  @javax.annotation.Nullable
  private String personName;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  @javax.annotation.Nullable
  private Integer companyId;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  @javax.annotation.Nullable
  private String company;

  public static final String SERIALIZED_NAME_COMPANY_MAILING_ADDRESS = "companyMailingAddress";
  @SerializedName(SERIALIZED_NAME_COMPANY_MAILING_ADDRESS)
  @javax.annotation.Nullable
  private Address companyMailingAddress;

  public static final String SERIALIZED_NAME_COMPANY_PHONE = "companyPhone";
  @SerializedName(SERIALIZED_NAME_COMPANY_PHONE)
  @javax.annotation.Nullable
  private String companyPhone;

  public static final String SERIALIZED_NAME_COMPANY_EMAIL_ADDRESS = "companyEmailAddress";
  @SerializedName(SERIALIZED_NAME_COMPANY_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private String companyEmailAddress;

  public static final String SERIALIZED_NAME_DUPLICATE_STMT_REQUIRED = "duplicateStmtRequired";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_STMT_REQUIRED)
  @javax.annotation.Nullable
  private Boolean duplicateStmtRequired;

  public AffiliationDetailsType() {
  }

  public AffiliationDetailsType affiliationRelationship(@javax.annotation.Nullable AffiliationRelationshipEnum affiliationRelationship) {
    this.affiliationRelationship = affiliationRelationship;
    return this;
  }

  /**
   * Get affiliationRelationship
   * @return affiliationRelationship
   */
  @javax.annotation.Nullable
  public AffiliationRelationshipEnum getAffiliationRelationship() {
    return affiliationRelationship;
  }

  public void setAffiliationRelationship(@javax.annotation.Nullable AffiliationRelationshipEnum affiliationRelationship) {
    this.affiliationRelationship = affiliationRelationship;
  }


  public AffiliationDetailsType personName(@javax.annotation.Nullable String personName) {
    this.personName = personName;
    return this;
  }

  /**
   * Get personName
   * @return personName
   */
  @javax.annotation.Nullable
  public String getPersonName() {
    return personName;
  }

  public void setPersonName(@javax.annotation.Nullable String personName) {
    this.personName = personName;
  }


  public AffiliationDetailsType companyId(@javax.annotation.Nullable Integer companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Get companyId
   * @return companyId
   */
  @javax.annotation.Nullable
  public Integer getCompanyId() {
    return companyId;
  }

  public void setCompanyId(@javax.annotation.Nullable Integer companyId) {
    this.companyId = companyId;
  }


  public AffiliationDetailsType company(@javax.annotation.Nullable String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(@javax.annotation.Nullable String company) {
    this.company = company;
  }


  public AffiliationDetailsType companyMailingAddress(@javax.annotation.Nullable Address companyMailingAddress) {
    this.companyMailingAddress = companyMailingAddress;
    return this;
  }

  /**
   * Get companyMailingAddress
   * @return companyMailingAddress
   */
  @javax.annotation.Nullable
  public Address getCompanyMailingAddress() {
    return companyMailingAddress;
  }

  public void setCompanyMailingAddress(@javax.annotation.Nullable Address companyMailingAddress) {
    this.companyMailingAddress = companyMailingAddress;
  }


  public AffiliationDetailsType companyPhone(@javax.annotation.Nullable String companyPhone) {
    this.companyPhone = companyPhone;
    return this;
  }

  /**
   * Get companyPhone
   * @return companyPhone
   */
  @javax.annotation.Nullable
  public String getCompanyPhone() {
    return companyPhone;
  }

  public void setCompanyPhone(@javax.annotation.Nullable String companyPhone) {
    this.companyPhone = companyPhone;
  }


  public AffiliationDetailsType companyEmailAddress(@javax.annotation.Nullable String companyEmailAddress) {
    this.companyEmailAddress = companyEmailAddress;
    return this;
  }

  /**
   * Get companyEmailAddress
   * @return companyEmailAddress
   */
  @javax.annotation.Nullable
  public String getCompanyEmailAddress() {
    return companyEmailAddress;
  }

  public void setCompanyEmailAddress(@javax.annotation.Nullable String companyEmailAddress) {
    this.companyEmailAddress = companyEmailAddress;
  }


  public AffiliationDetailsType duplicateStmtRequired(@javax.annotation.Nullable Boolean duplicateStmtRequired) {
    this.duplicateStmtRequired = duplicateStmtRequired;
    return this;
  }

  /**
   * Get duplicateStmtRequired
   * @return duplicateStmtRequired
   */
  @javax.annotation.Nullable
  public Boolean getDuplicateStmtRequired() {
    return duplicateStmtRequired;
  }

  public void setDuplicateStmtRequired(@javax.annotation.Nullable Boolean duplicateStmtRequired) {
    this.duplicateStmtRequired = duplicateStmtRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffiliationDetailsType affiliationDetailsType = (AffiliationDetailsType) o;
    return Objects.equals(this.affiliationRelationship, affiliationDetailsType.affiliationRelationship) &&
        Objects.equals(this.personName, affiliationDetailsType.personName) &&
        Objects.equals(this.companyId, affiliationDetailsType.companyId) &&
        Objects.equals(this.company, affiliationDetailsType.company) &&
        Objects.equals(this.companyMailingAddress, affiliationDetailsType.companyMailingAddress) &&
        Objects.equals(this.companyPhone, affiliationDetailsType.companyPhone) &&
        Objects.equals(this.companyEmailAddress, affiliationDetailsType.companyEmailAddress) &&
        Objects.equals(this.duplicateStmtRequired, affiliationDetailsType.duplicateStmtRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliationRelationship, personName, companyId, company, companyMailingAddress, companyPhone, companyEmailAddress, duplicateStmtRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffiliationDetailsType {\n");
    sb.append("    affiliationRelationship: ").append(toIndentedString(affiliationRelationship)).append("\n");
    sb.append("    personName: ").append(toIndentedString(personName)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    companyMailingAddress: ").append(toIndentedString(companyMailingAddress)).append("\n");
    sb.append("    companyPhone: ").append(toIndentedString(companyPhone)).append("\n");
    sb.append("    companyEmailAddress: ").append(toIndentedString(companyEmailAddress)).append("\n");
    sb.append("    duplicateStmtRequired: ").append(toIndentedString(duplicateStmtRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliationRelationship");
    openapiFields.add("personName");
    openapiFields.add("companyId");
    openapiFields.add("company");
    openapiFields.add("companyMailingAddress");
    openapiFields.add("companyPhone");
    openapiFields.add("companyEmailAddress");
    openapiFields.add("duplicateStmtRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AffiliationDetailsType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AffiliationDetailsType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffiliationDetailsType is not found in the empty JSON string", AffiliationDetailsType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AffiliationDetailsType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffiliationDetailsType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliationRelationship") != null && !jsonObj.get("affiliationRelationship").isJsonNull()) && !jsonObj.get("affiliationRelationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliationRelationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliationRelationship").toString()));
      }
      // validate the optional field `affiliationRelationship`
      if (jsonObj.get("affiliationRelationship") != null && !jsonObj.get("affiliationRelationship").isJsonNull()) {
        AffiliationRelationshipEnum.validateJsonElement(jsonObj.get("affiliationRelationship"));
      }
      if ((jsonObj.get("personName") != null && !jsonObj.get("personName").isJsonNull()) && !jsonObj.get("personName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personName").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      // validate the optional field `companyMailingAddress`
      if (jsonObj.get("companyMailingAddress") != null && !jsonObj.get("companyMailingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("companyMailingAddress"));
      }
      if ((jsonObj.get("companyPhone") != null && !jsonObj.get("companyPhone").isJsonNull()) && !jsonObj.get("companyPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyPhone").toString()));
      }
      if ((jsonObj.get("companyEmailAddress") != null && !jsonObj.get("companyEmailAddress").isJsonNull()) && !jsonObj.get("companyEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyEmailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffiliationDetailsType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffiliationDetailsType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffiliationDetailsType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffiliationDetailsType.class));

       return (TypeAdapter<T>) new TypeAdapter<AffiliationDetailsType>() {
           @Override
           public void write(JsonWriter out, AffiliationDetailsType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffiliationDetailsType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AffiliationDetailsType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AffiliationDetailsType
   * @throws IOException if the JSON string is invalid with respect to AffiliationDetailsType
   */
  public static AffiliationDetailsType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffiliationDetailsType.class);
  }

  /**
   * Convert an instance of AffiliationDetailsType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

