/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WatchlistsResponseDataUserListsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the watchlist query results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class WatchlistsResponseData {
  public static final String SERIALIZED_NAME_SCANNERS_ONLY = "scanners_only";
  @SerializedName(SERIALIZED_NAME_SCANNERS_ONLY)
  @javax.annotation.Nullable
  private Boolean scannersOnly;

  public static final String SERIALIZED_NAME_SHOW_SCANNERS = "show_scanners";
  @SerializedName(SERIALIZED_NAME_SHOW_SCANNERS)
  @javax.annotation.Nullable
  private Boolean showScanners;

  public static final String SERIALIZED_NAME_BULK_DELETE = "bulk_delete";
  @SerializedName(SERIALIZED_NAME_BULK_DELETE)
  @javax.annotation.Nullable
  private Boolean bulkDelete;

  public static final String SERIALIZED_NAME_USER_LISTS = "user_lists";
  @SerializedName(SERIALIZED_NAME_USER_LISTS)
  @javax.annotation.Nullable
  private List<WatchlistsResponseDataUserListsInner> userLists = new ArrayList<>();

  public WatchlistsResponseData() {
  }

  public WatchlistsResponseData scannersOnly(@javax.annotation.Nullable Boolean scannersOnly) {
    this.scannersOnly = scannersOnly;
    return this;
  }

  /**
   * Indicates if query results contain only market scanners.
   * @return scannersOnly
   */
  @javax.annotation.Nullable
  public Boolean getScannersOnly() {
    return scannersOnly;
  }

  public void setScannersOnly(@javax.annotation.Nullable Boolean scannersOnly) {
    this.scannersOnly = scannersOnly;
  }


  public WatchlistsResponseData showScanners(@javax.annotation.Nullable Boolean showScanners) {
    this.showScanners = showScanners;
    return this;
  }

  /**
   * Indicates if market scanners are included in query results.
   * @return showScanners
   */
  @javax.annotation.Nullable
  public Boolean getShowScanners() {
    return showScanners;
  }

  public void setShowScanners(@javax.annotation.Nullable Boolean showScanners) {
    this.showScanners = showScanners;
  }


  public WatchlistsResponseData bulkDelete(@javax.annotation.Nullable Boolean bulkDelete) {
    this.bulkDelete = bulkDelete;
    return this;
  }

  /**
   * Indicates if username&#39;s watchlists can be bulk-deleted.
   * @return bulkDelete
   */
  @javax.annotation.Nullable
  public Boolean getBulkDelete() {
    return bulkDelete;
  }

  public void setBulkDelete(@javax.annotation.Nullable Boolean bulkDelete) {
    this.bulkDelete = bulkDelete;
  }


  public WatchlistsResponseData userLists(@javax.annotation.Nullable List<WatchlistsResponseDataUserListsInner> userLists) {
    this.userLists = userLists;
    return this;
  }

  public WatchlistsResponseData addUserListsItem(WatchlistsResponseDataUserListsInner userListsItem) {
    if (this.userLists == null) {
      this.userLists = new ArrayList<>();
    }
    this.userLists.add(userListsItem);
    return this;
  }

  /**
   * Array of objects detailing the watchlists saved for the username in use in the current Web API session.
   * @return userLists
   */
  @javax.annotation.Nullable
  public List<WatchlistsResponseDataUserListsInner> getUserLists() {
    return userLists;
  }

  public void setUserLists(@javax.annotation.Nullable List<WatchlistsResponseDataUserListsInner> userLists) {
    this.userLists = userLists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchlistsResponseData watchlistsResponseData = (WatchlistsResponseData) o;
    return Objects.equals(this.scannersOnly, watchlistsResponseData.scannersOnly) &&
        Objects.equals(this.showScanners, watchlistsResponseData.showScanners) &&
        Objects.equals(this.bulkDelete, watchlistsResponseData.bulkDelete) &&
        Objects.equals(this.userLists, watchlistsResponseData.userLists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scannersOnly, showScanners, bulkDelete, userLists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchlistsResponseData {\n");
    sb.append("    scannersOnly: ").append(toIndentedString(scannersOnly)).append("\n");
    sb.append("    showScanners: ").append(toIndentedString(showScanners)).append("\n");
    sb.append("    bulkDelete: ").append(toIndentedString(bulkDelete)).append("\n");
    sb.append("    userLists: ").append(toIndentedString(userLists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scanners_only");
    openapiFields.add("show_scanners");
    openapiFields.add("bulk_delete");
    openapiFields.add("user_lists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatchlistsResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchlistsResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchlistsResponseData is not found in the empty JSON string", WatchlistsResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WatchlistsResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchlistsResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("user_lists") != null && !jsonObj.get("user_lists").isJsonNull()) {
        JsonArray jsonArrayuserLists = jsonObj.getAsJsonArray("user_lists");
        if (jsonArrayuserLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("user_lists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `user_lists` to be an array in the JSON string but got `%s`", jsonObj.get("user_lists").toString()));
          }

          // validate the optional field `user_lists` (array)
          for (int i = 0; i < jsonArrayuserLists.size(); i++) {
            WatchlistsResponseDataUserListsInner.validateJsonElement(jsonArrayuserLists.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchlistsResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchlistsResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchlistsResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchlistsResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchlistsResponseData>() {
           @Override
           public void write(JsonWriter out, WatchlistsResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchlistsResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatchlistsResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatchlistsResponseData
   * @throws IOException if the JSON string is invalid with respect to WatchlistsResponseData
   */
  public static WatchlistsResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchlistsResponseData.class);
  }

  /**
   * Convert an instance of WatchlistsResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

