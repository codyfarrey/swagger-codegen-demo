/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserAccountsResponseAcctProps;
import org.openapitools.client.model.UserAccountsResponseAliases;
import org.openapitools.client.model.UserAccountsResponseAllowFeatures;
import org.openapitools.client.model.UserAccountsResponseChartPeriods;
import org.openapitools.client.model.UserAccountsResponseServerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserAccountsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class UserAccountsResponse {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  @javax.annotation.Nullable
  private List<String> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCT_PROPS = "acctProps";
  @SerializedName(SERIALIZED_NAME_ACCT_PROPS)
  @javax.annotation.Nullable
  private UserAccountsResponseAcctProps acctProps;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  @javax.annotation.Nullable
  private UserAccountsResponseAliases aliases;

  public static final String SERIALIZED_NAME_ALLOW_FEATURES = "allowFeatures";
  @SerializedName(SERIALIZED_NAME_ALLOW_FEATURES)
  @javax.annotation.Nullable
  private UserAccountsResponseAllowFeatures allowFeatures;

  public static final String SERIALIZED_NAME_CHART_PERIODS = "chartPeriods";
  @SerializedName(SERIALIZED_NAME_CHART_PERIODS)
  @javax.annotation.Nullable
  private UserAccountsResponseChartPeriods chartPeriods;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  @javax.annotation.Nullable
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  @javax.annotation.Nullable
  private List<String> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_ACCOUNT = "selectedAccount";
  @SerializedName(SERIALIZED_NAME_SELECTED_ACCOUNT)
  @javax.annotation.Nullable
  private String selectedAccount;

  public static final String SERIALIZED_NAME_SERVER_INFO = "serverInfo";
  @SerializedName(SERIALIZED_NAME_SERVER_INFO)
  @javax.annotation.Nullable
  private UserAccountsResponseServerInfo serverInfo;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  @javax.annotation.Nullable
  private String sessionId;

  public static final String SERIALIZED_NAME_IS_FT = "isFt";
  @SerializedName(SERIALIZED_NAME_IS_FT)
  @javax.annotation.Nullable
  private Boolean isFt;

  public static final String SERIALIZED_NAME_IS_PAPER = "isPaper";
  @SerializedName(SERIALIZED_NAME_IS_PAPER)
  @javax.annotation.Nullable
  private Boolean isPaper;

  public UserAccountsResponse() {
  }

  public UserAccountsResponse accounts(@javax.annotation.Nullable List<String> accounts) {
    this.accounts = accounts;
    return this;
  }

  public UserAccountsResponse addAccountsItem(String accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * Returns an array of all accessible accountIds.
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<String> getAccounts() {
    return accounts;
  }

  public void setAccounts(@javax.annotation.Nullable List<String> accounts) {
    this.accounts = accounts;
  }


  public UserAccountsResponse acctProps(@javax.annotation.Nullable UserAccountsResponseAcctProps acctProps) {
    this.acctProps = acctProps;
    return this;
  }

  /**
   * Get acctProps
   * @return acctProps
   */
  @javax.annotation.Nullable
  public UserAccountsResponseAcctProps getAcctProps() {
    return acctProps;
  }

  public void setAcctProps(@javax.annotation.Nullable UserAccountsResponseAcctProps acctProps) {
    this.acctProps = acctProps;
  }


  public UserAccountsResponse aliases(@javax.annotation.Nullable UserAccountsResponseAliases aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public UserAccountsResponseAliases getAliases() {
    return aliases;
  }

  public void setAliases(@javax.annotation.Nullable UserAccountsResponseAliases aliases) {
    this.aliases = aliases;
  }


  public UserAccountsResponse allowFeatures(@javax.annotation.Nullable UserAccountsResponseAllowFeatures allowFeatures) {
    this.allowFeatures = allowFeatures;
    return this;
  }

  /**
   * Get allowFeatures
   * @return allowFeatures
   */
  @javax.annotation.Nullable
  public UserAccountsResponseAllowFeatures getAllowFeatures() {
    return allowFeatures;
  }

  public void setAllowFeatures(@javax.annotation.Nullable UserAccountsResponseAllowFeatures allowFeatures) {
    this.allowFeatures = allowFeatures;
  }


  public UserAccountsResponse chartPeriods(@javax.annotation.Nullable UserAccountsResponseChartPeriods chartPeriods) {
    this.chartPeriods = chartPeriods;
    return this;
  }

  /**
   * Get chartPeriods
   * @return chartPeriods
   */
  @javax.annotation.Nullable
  public UserAccountsResponseChartPeriods getChartPeriods() {
    return chartPeriods;
  }

  public void setChartPeriods(@javax.annotation.Nullable UserAccountsResponseChartPeriods chartPeriods) {
    this.chartPeriods = chartPeriods;
  }


  public UserAccountsResponse groups(@javax.annotation.Nullable List<String> groups) {
    this.groups = groups;
    return this;
  }

  public UserAccountsResponse addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }

  public void setGroups(@javax.annotation.Nullable List<String> groups) {
    this.groups = groups;
  }


  public UserAccountsResponse profiles(@javax.annotation.Nullable List<String> profiles) {
    this.profiles = profiles;
    return this;
  }

  public UserAccountsResponse addProfilesItem(String profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * Get profiles
   * @return profiles
   */
  @javax.annotation.Nullable
  public List<String> getProfiles() {
    return profiles;
  }

  public void setProfiles(@javax.annotation.Nullable List<String> profiles) {
    this.profiles = profiles;
  }


  public UserAccountsResponse selectedAccount(@javax.annotation.Nullable String selectedAccount) {
    this.selectedAccount = selectedAccount;
    return this;
  }

  /**
   * Get selectedAccount
   * @return selectedAccount
   */
  @javax.annotation.Nullable
  public String getSelectedAccount() {
    return selectedAccount;
  }

  public void setSelectedAccount(@javax.annotation.Nullable String selectedAccount) {
    this.selectedAccount = selectedAccount;
  }


  public UserAccountsResponse serverInfo(@javax.annotation.Nullable UserAccountsResponseServerInfo serverInfo) {
    this.serverInfo = serverInfo;
    return this;
  }

  /**
   * Get serverInfo
   * @return serverInfo
   */
  @javax.annotation.Nullable
  public UserAccountsResponseServerInfo getServerInfo() {
    return serverInfo;
  }

  public void setServerInfo(@javax.annotation.Nullable UserAccountsResponseServerInfo serverInfo) {
    this.serverInfo = serverInfo;
  }


  public UserAccountsResponse sessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
  }


  public UserAccountsResponse isFt(@javax.annotation.Nullable Boolean isFt) {
    this.isFt = isFt;
    return this;
  }

  /**
   * Get isFt
   * @return isFt
   */
  @javax.annotation.Nullable
  public Boolean getIsFt() {
    return isFt;
  }

  public void setIsFt(@javax.annotation.Nullable Boolean isFt) {
    this.isFt = isFt;
  }


  public UserAccountsResponse isPaper(@javax.annotation.Nullable Boolean isPaper) {
    this.isPaper = isPaper;
    return this;
  }

  /**
   * Get isPaper
   * @return isPaper
   */
  @javax.annotation.Nullable
  public Boolean getIsPaper() {
    return isPaper;
  }

  public void setIsPaper(@javax.annotation.Nullable Boolean isPaper) {
    this.isPaper = isPaper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccountsResponse userAccountsResponse = (UserAccountsResponse) o;
    return Objects.equals(this.accounts, userAccountsResponse.accounts) &&
        Objects.equals(this.acctProps, userAccountsResponse.acctProps) &&
        Objects.equals(this.aliases, userAccountsResponse.aliases) &&
        Objects.equals(this.allowFeatures, userAccountsResponse.allowFeatures) &&
        Objects.equals(this.chartPeriods, userAccountsResponse.chartPeriods) &&
        Objects.equals(this.groups, userAccountsResponse.groups) &&
        Objects.equals(this.profiles, userAccountsResponse.profiles) &&
        Objects.equals(this.selectedAccount, userAccountsResponse.selectedAccount) &&
        Objects.equals(this.serverInfo, userAccountsResponse.serverInfo) &&
        Objects.equals(this.sessionId, userAccountsResponse.sessionId) &&
        Objects.equals(this.isFt, userAccountsResponse.isFt) &&
        Objects.equals(this.isPaper, userAccountsResponse.isPaper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, acctProps, aliases, allowFeatures, chartPeriods, groups, profiles, selectedAccount, serverInfo, sessionId, isFt, isPaper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccountsResponse {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    acctProps: ").append(toIndentedString(acctProps)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    allowFeatures: ").append(toIndentedString(allowFeatures)).append("\n");
    sb.append("    chartPeriods: ").append(toIndentedString(chartPeriods)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    selectedAccount: ").append(toIndentedString(selectedAccount)).append("\n");
    sb.append("    serverInfo: ").append(toIndentedString(serverInfo)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    isFt: ").append(toIndentedString(isFt)).append("\n");
    sb.append("    isPaper: ").append(toIndentedString(isPaper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("acctProps");
    openapiFields.add("aliases");
    openapiFields.add("allowFeatures");
    openapiFields.add("chartPeriods");
    openapiFields.add("groups");
    openapiFields.add("profiles");
    openapiFields.add("selectedAccount");
    openapiFields.add("serverInfo");
    openapiFields.add("sessionId");
    openapiFields.add("isFt");
    openapiFields.add("isPaper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAccountsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAccountsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAccountsResponse is not found in the empty JSON string", UserAccountsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAccountsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAccountsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull() && !jsonObj.get("accounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
      }
      // validate the optional field `acctProps`
      if (jsonObj.get("acctProps") != null && !jsonObj.get("acctProps").isJsonNull()) {
        UserAccountsResponseAcctProps.validateJsonElement(jsonObj.get("acctProps"));
      }
      // validate the optional field `aliases`
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull()) {
        UserAccountsResponseAliases.validateJsonElement(jsonObj.get("aliases"));
      }
      // validate the optional field `allowFeatures`
      if (jsonObj.get("allowFeatures") != null && !jsonObj.get("allowFeatures").isJsonNull()) {
        UserAccountsResponseAllowFeatures.validateJsonElement(jsonObj.get("allowFeatures"));
      }
      // validate the optional field `chartPeriods`
      if (jsonObj.get("chartPeriods") != null && !jsonObj.get("chartPeriods").isJsonNull()) {
        UserAccountsResponseChartPeriods.validateJsonElement(jsonObj.get("chartPeriods"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("profiles") != null && !jsonObj.get("profiles").isJsonNull() && !jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }
      if ((jsonObj.get("selectedAccount") != null && !jsonObj.get("selectedAccount").isJsonNull()) && !jsonObj.get("selectedAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedAccount").toString()));
      }
      // validate the optional field `serverInfo`
      if (jsonObj.get("serverInfo") != null && !jsonObj.get("serverInfo").isJsonNull()) {
        UserAccountsResponseServerInfo.validateJsonElement(jsonObj.get("serverInfo"));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAccountsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAccountsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAccountsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAccountsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAccountsResponse>() {
           @Override
           public void write(JsonWriter out, UserAccountsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAccountsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAccountsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAccountsResponse
   * @throws IOException if the JSON string is invalid with respect to UserAccountsResponse
   */
  public static UserAccountsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAccountsResponse.class);
  }

  /**
   * Convert an instance of UserAccountsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

