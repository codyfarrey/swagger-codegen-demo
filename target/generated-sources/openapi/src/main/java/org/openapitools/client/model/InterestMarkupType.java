/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InterestMarkupType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class InterestMarkupType {
  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    USD("USD"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    CAD("CAD"),
    
    JPY("JPY"),
    
    HKD("HKD"),
    
    AUD("AUD"),
    
    CHF("CHF"),
    
    MXN("MXN"),
    
    SEK("SEK"),
    
    NZD("NZD"),
    
    HUF("HUF"),
    
    CZK("CZK"),
    
    CNH("CNH"),
    
    DKK("DKK"),
    
    RUB("RUB"),
    
    ILS("ILS"),
    
    NOK("NOK"),
    
    SGD("SGD"),
    
    PLN("PLN"),
    
    ZAR("ZAR"),
    
    AED("AED"),
    
    KRW("KRW"),
    
    SAR("SAR"),
    
    TRY("TRY");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DEBIT_MARKUP = "debitMarkup";
  @SerializedName(SERIALIZED_NAME_DEBIT_MARKUP)
  @javax.annotation.Nullable
  private BigDecimal debitMarkup;

  public static final String SERIALIZED_NAME_IB_DEBIT_MARKUP = "ibDebitMarkup";
  @SerializedName(SERIALIZED_NAME_IB_DEBIT_MARKUP)
  @javax.annotation.Nullable
  private BigDecimal ibDebitMarkup;

  public static final String SERIALIZED_NAME_CREDIT_MARKDOWN = "creditMarkdown";
  @SerializedName(SERIALIZED_NAME_CREDIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal creditMarkdown;

  public static final String SERIALIZED_NAME_SHORT_CREDIT_MARKDOWN = "shortCreditMarkdown";
  @SerializedName(SERIALIZED_NAME_SHORT_CREDIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal shortCreditMarkdown;

  public static final String SERIALIZED_NAME_SHORT_CFD_CREDIT_MARKDOWN = "shortCfdCreditMarkdown";
  @SerializedName(SERIALIZED_NAME_SHORT_CFD_CREDIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal shortCfdCreditMarkdown;

  public static final String SERIALIZED_NAME_LONG_CFD_DEBIT_MARKDOWN = "longCfdDebitMarkdown";
  @SerializedName(SERIALIZED_NAME_LONG_CFD_DEBIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal longCfdDebitMarkdown;

  public static final String SERIALIZED_NAME_SHORT_INDEX_CFD_CREDIT_MARKDOWN = "shortIndexCfdCreditMarkdown";
  @SerializedName(SERIALIZED_NAME_SHORT_INDEX_CFD_CREDIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal shortIndexCfdCreditMarkdown;

  public static final String SERIALIZED_NAME_LONG_INDEX_CFD_DEBIT_MARKDOWN = "longIndexCfdDebitMarkdown";
  @SerializedName(SERIALIZED_NAME_LONG_INDEX_CFD_DEBIT_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal longIndexCfdDebitMarkdown;

  public static final String SERIALIZED_NAME_SHORT_FX_CFD_MARKUP = "shortFxCfdMarkup";
  @SerializedName(SERIALIZED_NAME_SHORT_FX_CFD_MARKUP)
  @javax.annotation.Nullable
  private BigDecimal shortFxCfdMarkup;

  public static final String SERIALIZED_NAME_LONG_FX_CFD_MARKDOWN = "longFxCfdMarkdown";
  @SerializedName(SERIALIZED_NAME_LONG_FX_CFD_MARKDOWN)
  @javax.annotation.Nullable
  private BigDecimal longFxCfdMarkdown;

  public InterestMarkupType() {
  }

  public InterestMarkupType currency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
  }


  public InterestMarkupType debitMarkup(@javax.annotation.Nullable BigDecimal debitMarkup) {
    this.debitMarkup = debitMarkup;
    return this;
  }

  /**
   * Get debitMarkup
   * @return debitMarkup
   */
  @javax.annotation.Nullable
  public BigDecimal getDebitMarkup() {
    return debitMarkup;
  }

  public void setDebitMarkup(@javax.annotation.Nullable BigDecimal debitMarkup) {
    this.debitMarkup = debitMarkup;
  }


  public InterestMarkupType ibDebitMarkup(@javax.annotation.Nullable BigDecimal ibDebitMarkup) {
    this.ibDebitMarkup = ibDebitMarkup;
    return this;
  }

  /**
   * Get ibDebitMarkup
   * @return ibDebitMarkup
   */
  @javax.annotation.Nullable
  public BigDecimal getIbDebitMarkup() {
    return ibDebitMarkup;
  }

  public void setIbDebitMarkup(@javax.annotation.Nullable BigDecimal ibDebitMarkup) {
    this.ibDebitMarkup = ibDebitMarkup;
  }


  public InterestMarkupType creditMarkdown(@javax.annotation.Nullable BigDecimal creditMarkdown) {
    this.creditMarkdown = creditMarkdown;
    return this;
  }

  /**
   * Get creditMarkdown
   * @return creditMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getCreditMarkdown() {
    return creditMarkdown;
  }

  public void setCreditMarkdown(@javax.annotation.Nullable BigDecimal creditMarkdown) {
    this.creditMarkdown = creditMarkdown;
  }


  public InterestMarkupType shortCreditMarkdown(@javax.annotation.Nullable BigDecimal shortCreditMarkdown) {
    this.shortCreditMarkdown = shortCreditMarkdown;
    return this;
  }

  /**
   * Get shortCreditMarkdown
   * @return shortCreditMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getShortCreditMarkdown() {
    return shortCreditMarkdown;
  }

  public void setShortCreditMarkdown(@javax.annotation.Nullable BigDecimal shortCreditMarkdown) {
    this.shortCreditMarkdown = shortCreditMarkdown;
  }


  public InterestMarkupType shortCfdCreditMarkdown(@javax.annotation.Nullable BigDecimal shortCfdCreditMarkdown) {
    this.shortCfdCreditMarkdown = shortCfdCreditMarkdown;
    return this;
  }

  /**
   * Get shortCfdCreditMarkdown
   * @return shortCfdCreditMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getShortCfdCreditMarkdown() {
    return shortCfdCreditMarkdown;
  }

  public void setShortCfdCreditMarkdown(@javax.annotation.Nullable BigDecimal shortCfdCreditMarkdown) {
    this.shortCfdCreditMarkdown = shortCfdCreditMarkdown;
  }


  public InterestMarkupType longCfdDebitMarkdown(@javax.annotation.Nullable BigDecimal longCfdDebitMarkdown) {
    this.longCfdDebitMarkdown = longCfdDebitMarkdown;
    return this;
  }

  /**
   * Get longCfdDebitMarkdown
   * @return longCfdDebitMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getLongCfdDebitMarkdown() {
    return longCfdDebitMarkdown;
  }

  public void setLongCfdDebitMarkdown(@javax.annotation.Nullable BigDecimal longCfdDebitMarkdown) {
    this.longCfdDebitMarkdown = longCfdDebitMarkdown;
  }


  public InterestMarkupType shortIndexCfdCreditMarkdown(@javax.annotation.Nullable BigDecimal shortIndexCfdCreditMarkdown) {
    this.shortIndexCfdCreditMarkdown = shortIndexCfdCreditMarkdown;
    return this;
  }

  /**
   * Get shortIndexCfdCreditMarkdown
   * @return shortIndexCfdCreditMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getShortIndexCfdCreditMarkdown() {
    return shortIndexCfdCreditMarkdown;
  }

  public void setShortIndexCfdCreditMarkdown(@javax.annotation.Nullable BigDecimal shortIndexCfdCreditMarkdown) {
    this.shortIndexCfdCreditMarkdown = shortIndexCfdCreditMarkdown;
  }


  public InterestMarkupType longIndexCfdDebitMarkdown(@javax.annotation.Nullable BigDecimal longIndexCfdDebitMarkdown) {
    this.longIndexCfdDebitMarkdown = longIndexCfdDebitMarkdown;
    return this;
  }

  /**
   * Get longIndexCfdDebitMarkdown
   * @return longIndexCfdDebitMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getLongIndexCfdDebitMarkdown() {
    return longIndexCfdDebitMarkdown;
  }

  public void setLongIndexCfdDebitMarkdown(@javax.annotation.Nullable BigDecimal longIndexCfdDebitMarkdown) {
    this.longIndexCfdDebitMarkdown = longIndexCfdDebitMarkdown;
  }


  public InterestMarkupType shortFxCfdMarkup(@javax.annotation.Nullable BigDecimal shortFxCfdMarkup) {
    this.shortFxCfdMarkup = shortFxCfdMarkup;
    return this;
  }

  /**
   * Get shortFxCfdMarkup
   * @return shortFxCfdMarkup
   */
  @javax.annotation.Nullable
  public BigDecimal getShortFxCfdMarkup() {
    return shortFxCfdMarkup;
  }

  public void setShortFxCfdMarkup(@javax.annotation.Nullable BigDecimal shortFxCfdMarkup) {
    this.shortFxCfdMarkup = shortFxCfdMarkup;
  }


  public InterestMarkupType longFxCfdMarkdown(@javax.annotation.Nullable BigDecimal longFxCfdMarkdown) {
    this.longFxCfdMarkdown = longFxCfdMarkdown;
    return this;
  }

  /**
   * Get longFxCfdMarkdown
   * @return longFxCfdMarkdown
   */
  @javax.annotation.Nullable
  public BigDecimal getLongFxCfdMarkdown() {
    return longFxCfdMarkdown;
  }

  public void setLongFxCfdMarkdown(@javax.annotation.Nullable BigDecimal longFxCfdMarkdown) {
    this.longFxCfdMarkdown = longFxCfdMarkdown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterestMarkupType interestMarkupType = (InterestMarkupType) o;
    return Objects.equals(this.currency, interestMarkupType.currency) &&
        Objects.equals(this.debitMarkup, interestMarkupType.debitMarkup) &&
        Objects.equals(this.ibDebitMarkup, interestMarkupType.ibDebitMarkup) &&
        Objects.equals(this.creditMarkdown, interestMarkupType.creditMarkdown) &&
        Objects.equals(this.shortCreditMarkdown, interestMarkupType.shortCreditMarkdown) &&
        Objects.equals(this.shortCfdCreditMarkdown, interestMarkupType.shortCfdCreditMarkdown) &&
        Objects.equals(this.longCfdDebitMarkdown, interestMarkupType.longCfdDebitMarkdown) &&
        Objects.equals(this.shortIndexCfdCreditMarkdown, interestMarkupType.shortIndexCfdCreditMarkdown) &&
        Objects.equals(this.longIndexCfdDebitMarkdown, interestMarkupType.longIndexCfdDebitMarkdown) &&
        Objects.equals(this.shortFxCfdMarkup, interestMarkupType.shortFxCfdMarkup) &&
        Objects.equals(this.longFxCfdMarkdown, interestMarkupType.longFxCfdMarkdown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, debitMarkup, ibDebitMarkup, creditMarkdown, shortCreditMarkdown, shortCfdCreditMarkdown, longCfdDebitMarkdown, shortIndexCfdCreditMarkdown, longIndexCfdDebitMarkdown, shortFxCfdMarkup, longFxCfdMarkdown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterestMarkupType {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    debitMarkup: ").append(toIndentedString(debitMarkup)).append("\n");
    sb.append("    ibDebitMarkup: ").append(toIndentedString(ibDebitMarkup)).append("\n");
    sb.append("    creditMarkdown: ").append(toIndentedString(creditMarkdown)).append("\n");
    sb.append("    shortCreditMarkdown: ").append(toIndentedString(shortCreditMarkdown)).append("\n");
    sb.append("    shortCfdCreditMarkdown: ").append(toIndentedString(shortCfdCreditMarkdown)).append("\n");
    sb.append("    longCfdDebitMarkdown: ").append(toIndentedString(longCfdDebitMarkdown)).append("\n");
    sb.append("    shortIndexCfdCreditMarkdown: ").append(toIndentedString(shortIndexCfdCreditMarkdown)).append("\n");
    sb.append("    longIndexCfdDebitMarkdown: ").append(toIndentedString(longIndexCfdDebitMarkdown)).append("\n");
    sb.append("    shortFxCfdMarkup: ").append(toIndentedString(shortFxCfdMarkup)).append("\n");
    sb.append("    longFxCfdMarkdown: ").append(toIndentedString(longFxCfdMarkdown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("debitMarkup");
    openapiFields.add("ibDebitMarkup");
    openapiFields.add("creditMarkdown");
    openapiFields.add("shortCreditMarkdown");
    openapiFields.add("shortCfdCreditMarkdown");
    openapiFields.add("longCfdDebitMarkdown");
    openapiFields.add("shortIndexCfdCreditMarkdown");
    openapiFields.add("longIndexCfdDebitMarkdown");
    openapiFields.add("shortFxCfdMarkup");
    openapiFields.add("longFxCfdMarkdown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InterestMarkupType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InterestMarkupType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterestMarkupType is not found in the empty JSON string", InterestMarkupType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InterestMarkupType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InterestMarkupType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterestMarkupType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterestMarkupType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterestMarkupType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterestMarkupType.class));

       return (TypeAdapter<T>) new TypeAdapter<InterestMarkupType>() {
           @Override
           public void write(JsonWriter out, InterestMarkupType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterestMarkupType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InterestMarkupType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InterestMarkupType
   * @throws IOException if the JSON string is invalid with respect to InterestMarkupType
   */
  public static InterestMarkupType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterestMarkupType.class);
  }

  /**
   * Convert an instance of InterestMarkupType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

