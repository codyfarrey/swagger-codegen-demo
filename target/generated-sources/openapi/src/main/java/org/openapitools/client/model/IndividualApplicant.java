/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccreditedInvestorInformation;
import org.openapitools.client.model.AssociatedIndividual;
import org.openapitools.client.model.FinancialInformation;
import org.openapitools.client.model.IndividualTaxInformation;
import org.openapitools.client.model.RegulatedMembership;
import org.openapitools.client.model.RegulatoryInformation;
import org.openapitools.client.model.WithholdingStatementType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndividualApplicant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IndividualApplicant {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS = "accountHolderDetails";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS)
  @javax.annotation.Nullable
  private List<AssociatedIndividual> accountHolderDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINANCIAL_INFORMATION = "financialInformation";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_INFORMATION)
  @javax.annotation.Nullable
  private List<FinancialInformation> financialInformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGULATORY_INFORMATION = "regulatoryInformation";
  @SerializedName(SERIALIZED_NAME_REGULATORY_INFORMATION)
  @javax.annotation.Nullable
  private List<RegulatoryInformation> regulatoryInformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGULATED_MEMBERSHIPS = "regulatedMemberships";
  @SerializedName(SERIALIZED_NAME_REGULATED_MEMBERSHIPS)
  @javax.annotation.Nullable
  private List<RegulatedMembership> regulatedMemberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCREDITED_INVESTOR_INFORMATION = "accreditedInvestorInformation";
  @SerializedName(SERIALIZED_NAME_ACCREDITED_INVESTOR_INFORMATION)
  @javax.annotation.Nullable
  private AccreditedInvestorInformation accreditedInvestorInformation;

  public static final String SERIALIZED_NAME_TAX_INFORMATION = "taxInformation";
  @SerializedName(SERIALIZED_NAME_TAX_INFORMATION)
  @javax.annotation.Nullable
  private IndividualTaxInformation taxInformation;

  public static final String SERIALIZED_NAME_WITHHOLDING_STATEMENT = "withholdingStatement";
  @SerializedName(SERIALIZED_NAME_WITHHOLDING_STATEMENT)
  @javax.annotation.Nullable
  private WithholdingStatementType withholdingStatement;

  public IndividualApplicant() {
  }

  public IndividualApplicant accountHolderDetails(@javax.annotation.Nullable List<AssociatedIndividual> accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
    return this;
  }

  public IndividualApplicant addAccountHolderDetailsItem(AssociatedIndividual accountHolderDetailsItem) {
    if (this.accountHolderDetails == null) {
      this.accountHolderDetails = new ArrayList<>();
    }
    this.accountHolderDetails.add(accountHolderDetailsItem);
    return this;
  }

  /**
   * Get accountHolderDetails
   * @return accountHolderDetails
   */
  @javax.annotation.Nullable
  public List<AssociatedIndividual> getAccountHolderDetails() {
    return accountHolderDetails;
  }

  public void setAccountHolderDetails(@javax.annotation.Nullable List<AssociatedIndividual> accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
  }


  public IndividualApplicant financialInformation(@javax.annotation.Nullable List<FinancialInformation> financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

  public IndividualApplicant addFinancialInformationItem(FinancialInformation financialInformationItem) {
    if (this.financialInformation == null) {
      this.financialInformation = new ArrayList<>();
    }
    this.financialInformation.add(financialInformationItem);
    return this;
  }

  /**
   * Get financialInformation
   * @return financialInformation
   */
  @javax.annotation.Nullable
  public List<FinancialInformation> getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(@javax.annotation.Nullable List<FinancialInformation> financialInformation) {
    this.financialInformation = financialInformation;
  }


  public IndividualApplicant regulatoryInformation(@javax.annotation.Nullable List<RegulatoryInformation> regulatoryInformation) {
    this.regulatoryInformation = regulatoryInformation;
    return this;
  }

  public IndividualApplicant addRegulatoryInformationItem(RegulatoryInformation regulatoryInformationItem) {
    if (this.regulatoryInformation == null) {
      this.regulatoryInformation = new ArrayList<>();
    }
    this.regulatoryInformation.add(regulatoryInformationItem);
    return this;
  }

  /**
   * Get regulatoryInformation
   * @return regulatoryInformation
   */
  @javax.annotation.Nullable
  public List<RegulatoryInformation> getRegulatoryInformation() {
    return regulatoryInformation;
  }

  public void setRegulatoryInformation(@javax.annotation.Nullable List<RegulatoryInformation> regulatoryInformation) {
    this.regulatoryInformation = regulatoryInformation;
  }


  public IndividualApplicant regulatedMemberships(@javax.annotation.Nullable List<RegulatedMembership> regulatedMemberships) {
    this.regulatedMemberships = regulatedMemberships;
    return this;
  }

  public IndividualApplicant addRegulatedMembershipsItem(RegulatedMembership regulatedMembershipsItem) {
    if (this.regulatedMemberships == null) {
      this.regulatedMemberships = new ArrayList<>();
    }
    this.regulatedMemberships.add(regulatedMembershipsItem);
    return this;
  }

  /**
   * Get regulatedMemberships
   * @return regulatedMemberships
   */
  @javax.annotation.Nullable
  public List<RegulatedMembership> getRegulatedMemberships() {
    return regulatedMemberships;
  }

  public void setRegulatedMemberships(@javax.annotation.Nullable List<RegulatedMembership> regulatedMemberships) {
    this.regulatedMemberships = regulatedMemberships;
  }


  public IndividualApplicant accreditedInvestorInformation(@javax.annotation.Nullable AccreditedInvestorInformation accreditedInvestorInformation) {
    this.accreditedInvestorInformation = accreditedInvestorInformation;
    return this;
  }

  /**
   * Get accreditedInvestorInformation
   * @return accreditedInvestorInformation
   */
  @javax.annotation.Nullable
  public AccreditedInvestorInformation getAccreditedInvestorInformation() {
    return accreditedInvestorInformation;
  }

  public void setAccreditedInvestorInformation(@javax.annotation.Nullable AccreditedInvestorInformation accreditedInvestorInformation) {
    this.accreditedInvestorInformation = accreditedInvestorInformation;
  }


  public IndividualApplicant taxInformation(@javax.annotation.Nullable IndividualTaxInformation taxInformation) {
    this.taxInformation = taxInformation;
    return this;
  }

  /**
   * Get taxInformation
   * @return taxInformation
   */
  @javax.annotation.Nullable
  public IndividualTaxInformation getTaxInformation() {
    return taxInformation;
  }

  public void setTaxInformation(@javax.annotation.Nullable IndividualTaxInformation taxInformation) {
    this.taxInformation = taxInformation;
  }


  public IndividualApplicant withholdingStatement(@javax.annotation.Nullable WithholdingStatementType withholdingStatement) {
    this.withholdingStatement = withholdingStatement;
    return this;
  }

  /**
   * Get withholdingStatement
   * @return withholdingStatement
   */
  @javax.annotation.Nullable
  public WithholdingStatementType getWithholdingStatement() {
    return withholdingStatement;
  }

  public void setWithholdingStatement(@javax.annotation.Nullable WithholdingStatementType withholdingStatement) {
    this.withholdingStatement = withholdingStatement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualApplicant individualApplicant = (IndividualApplicant) o;
    return Objects.equals(this.accountHolderDetails, individualApplicant.accountHolderDetails) &&
        Objects.equals(this.financialInformation, individualApplicant.financialInformation) &&
        Objects.equals(this.regulatoryInformation, individualApplicant.regulatoryInformation) &&
        Objects.equals(this.regulatedMemberships, individualApplicant.regulatedMemberships) &&
        Objects.equals(this.accreditedInvestorInformation, individualApplicant.accreditedInvestorInformation) &&
        Objects.equals(this.taxInformation, individualApplicant.taxInformation) &&
        Objects.equals(this.withholdingStatement, individualApplicant.withholdingStatement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderDetails, financialInformation, regulatoryInformation, regulatedMemberships, accreditedInvestorInformation, taxInformation, withholdingStatement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualApplicant {\n");
    sb.append("    accountHolderDetails: ").append(toIndentedString(accountHolderDetails)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    regulatoryInformation: ").append(toIndentedString(regulatoryInformation)).append("\n");
    sb.append("    regulatedMemberships: ").append(toIndentedString(regulatedMemberships)).append("\n");
    sb.append("    accreditedInvestorInformation: ").append(toIndentedString(accreditedInvestorInformation)).append("\n");
    sb.append("    taxInformation: ").append(toIndentedString(taxInformation)).append("\n");
    sb.append("    withholdingStatement: ").append(toIndentedString(withholdingStatement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderDetails");
    openapiFields.add("financialInformation");
    openapiFields.add("regulatoryInformation");
    openapiFields.add("regulatedMemberships");
    openapiFields.add("accreditedInvestorInformation");
    openapiFields.add("taxInformation");
    openapiFields.add("withholdingStatement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndividualApplicant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndividualApplicant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndividualApplicant is not found in the empty JSON string", IndividualApplicant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndividualApplicant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndividualApplicant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accountHolderDetails") != null && !jsonObj.get("accountHolderDetails").isJsonNull()) {
        JsonArray jsonArrayaccountHolderDetails = jsonObj.getAsJsonArray("accountHolderDetails");
        if (jsonArrayaccountHolderDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountHolderDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountHolderDetails` to be an array in the JSON string but got `%s`", jsonObj.get("accountHolderDetails").toString()));
          }

          // validate the optional field `accountHolderDetails` (array)
          for (int i = 0; i < jsonArrayaccountHolderDetails.size(); i++) {
            AssociatedIndividual.validateJsonElement(jsonArrayaccountHolderDetails.get(i));
          };
        }
      }
      if (jsonObj.get("financialInformation") != null && !jsonObj.get("financialInformation").isJsonNull()) {
        JsonArray jsonArrayfinancialInformation = jsonObj.getAsJsonArray("financialInformation");
        if (jsonArrayfinancialInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("financialInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `financialInformation` to be an array in the JSON string but got `%s`", jsonObj.get("financialInformation").toString()));
          }

          // validate the optional field `financialInformation` (array)
          for (int i = 0; i < jsonArrayfinancialInformation.size(); i++) {
            FinancialInformation.validateJsonElement(jsonArrayfinancialInformation.get(i));
          };
        }
      }
      if (jsonObj.get("regulatoryInformation") != null && !jsonObj.get("regulatoryInformation").isJsonNull()) {
        JsonArray jsonArrayregulatoryInformation = jsonObj.getAsJsonArray("regulatoryInformation");
        if (jsonArrayregulatoryInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatoryInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatoryInformation` to be an array in the JSON string but got `%s`", jsonObj.get("regulatoryInformation").toString()));
          }

          // validate the optional field `regulatoryInformation` (array)
          for (int i = 0; i < jsonArrayregulatoryInformation.size(); i++) {
            RegulatoryInformation.validateJsonElement(jsonArrayregulatoryInformation.get(i));
          };
        }
      }
      if (jsonObj.get("regulatedMemberships") != null && !jsonObj.get("regulatedMemberships").isJsonNull()) {
        JsonArray jsonArrayregulatedMemberships = jsonObj.getAsJsonArray("regulatedMemberships");
        if (jsonArrayregulatedMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatedMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatedMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("regulatedMemberships").toString()));
          }

          // validate the optional field `regulatedMemberships` (array)
          for (int i = 0; i < jsonArrayregulatedMemberships.size(); i++) {
            RegulatedMembership.validateJsonElement(jsonArrayregulatedMemberships.get(i));
          };
        }
      }
      // validate the optional field `accreditedInvestorInformation`
      if (jsonObj.get("accreditedInvestorInformation") != null && !jsonObj.get("accreditedInvestorInformation").isJsonNull()) {
        AccreditedInvestorInformation.validateJsonElement(jsonObj.get("accreditedInvestorInformation"));
      }
      // validate the optional field `taxInformation`
      if (jsonObj.get("taxInformation") != null && !jsonObj.get("taxInformation").isJsonNull()) {
        IndividualTaxInformation.validateJsonElement(jsonObj.get("taxInformation"));
      }
      // validate the optional field `withholdingStatement`
      if (jsonObj.get("withholdingStatement") != null && !jsonObj.get("withholdingStatement").isJsonNull()) {
        WithholdingStatementType.validateJsonElement(jsonObj.get("withholdingStatement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndividualApplicant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndividualApplicant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndividualApplicant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndividualApplicant.class));

       return (TypeAdapter<T>) new TypeAdapter<IndividualApplicant>() {
           @Override
           public void write(JsonWriter out, IndividualApplicant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndividualApplicant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndividualApplicant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndividualApplicant
   * @throws IOException if the JSON string is invalid with respect to IndividualApplicant
   */
  public static IndividualApplicant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndividualApplicant.class);
  }

  /**
   * Convert an instance of IndividualApplicant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

