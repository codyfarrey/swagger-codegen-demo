/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object describing the account&#39;s balances in its base currency, by asset class and account segments. Will be duplicated by another object in response bearing the currency&#39;s name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class LedgerValue {
  public static final String SERIALIZED_NAME_ACCTCODE = "acctcode";
  @SerializedName(SERIALIZED_NAME_ACCTCODE)
  @javax.annotation.Nullable
  private String acctcode;

  public static final String SERIALIZED_NAME_CASHBALANCE = "cashbalance";
  @SerializedName(SERIALIZED_NAME_CASHBALANCE)
  @javax.annotation.Nullable
  private BigDecimal cashbalance;

  public static final String SERIALIZED_NAME_CASHBALANCEFXSEGMENT = "cashbalancefxsegment";
  @SerializedName(SERIALIZED_NAME_CASHBALANCEFXSEGMENT)
  @javax.annotation.Nullable
  private BigDecimal cashbalancefxsegment;

  public static final String SERIALIZED_NAME_COMMODITYMARKETVALUE = "commoditymarketvalue";
  @SerializedName(SERIALIZED_NAME_COMMODITYMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal commoditymarketvalue;

  public static final String SERIALIZED_NAME_CORPORATEBONDSMARKETVALUE = "corporatebondsmarketvalue";
  @SerializedName(SERIALIZED_NAME_CORPORATEBONDSMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal corporatebondsmarketvalue;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_DIVIDENDS = "dividends";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS)
  @javax.annotation.Nullable
  private BigDecimal dividends;

  public static final String SERIALIZED_NAME_EXCHANGERATE = "exchangerate";
  @SerializedName(SERIALIZED_NAME_EXCHANGERATE)
  @javax.annotation.Nullable
  private Integer exchangerate;

  public static final String SERIALIZED_NAME_FUNDS = "funds";
  @SerializedName(SERIALIZED_NAME_FUNDS)
  @javax.annotation.Nullable
  private BigDecimal funds;

  public static final String SERIALIZED_NAME_FUTUREMARKETVALUE = "futuremarketvalue";
  @SerializedName(SERIALIZED_NAME_FUTUREMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal futuremarketvalue;

  public static final String SERIALIZED_NAME_FUTUREOPTIONMARKETVALUE = "futureoptionmarketvalue";
  @SerializedName(SERIALIZED_NAME_FUTUREOPTIONMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal futureoptionmarketvalue;

  public static final String SERIALIZED_NAME_FUTURESONLYPNL = "futuresonlypnl";
  @SerializedName(SERIALIZED_NAME_FUTURESONLYPNL)
  @javax.annotation.Nullable
  private BigDecimal futuresonlypnl;

  public static final String SERIALIZED_NAME_INTEREST = "interest";
  @SerializedName(SERIALIZED_NAME_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal interest;

  public static final String SERIALIZED_NAME_ISSUEROPTIONSMARKETVALUE = "issueroptionsmarketvalue";
  @SerializedName(SERIALIZED_NAME_ISSUEROPTIONSMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal issueroptionsmarketvalue;

  /**
   * Identifies the nature of data. Always takes values &#39;LedgerList&#39;.
   */
  @JsonAdapter(KeyEnum.Adapter.class)
  public enum KeyEnum {
    LEDGER_LIST("LedgerList");

    private String value;

    KeyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyEnum fromValue(String value) {
      for (KeyEnum b : KeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private KeyEnum key;

  public static final String SERIALIZED_NAME_MONEYFUNDS = "moneyfunds";
  @SerializedName(SERIALIZED_NAME_MONEYFUNDS)
  @javax.annotation.Nullable
  private BigDecimal moneyfunds;

  public static final String SERIALIZED_NAME_NETLIQUIDATIONVALUE = "netliquidationvalue";
  @SerializedName(SERIALIZED_NAME_NETLIQUIDATIONVALUE)
  @javax.annotation.Nullable
  private BigDecimal netliquidationvalue;

  public static final String SERIALIZED_NAME_REALIZEDPNL = "realizedpnl";
  @SerializedName(SERIALIZED_NAME_REALIZEDPNL)
  @javax.annotation.Nullable
  private BigDecimal realizedpnl;

  public static final String SERIALIZED_NAME_SECONDKEY = "secondkey";
  @SerializedName(SERIALIZED_NAME_SECONDKEY)
  @javax.annotation.Nullable
  private String secondkey;

  public static final String SERIALIZED_NAME_SESSIONID = "sessionid";
  @SerializedName(SERIALIZED_NAME_SESSIONID)
  @javax.annotation.Nullable
  private Integer sessionid;

  public static final String SERIALIZED_NAME_SETTLEDCASH = "settledcash";
  @SerializedName(SERIALIZED_NAME_SETTLEDCASH)
  @javax.annotation.Nullable
  private BigDecimal settledcash;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  @javax.annotation.Nullable
  private Integer severity;

  public static final String SERIALIZED_NAME_STOCKMARKETVALUE = "stockmarketvalue";
  @SerializedName(SERIALIZED_NAME_STOCKMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal stockmarketvalue;

  public static final String SERIALIZED_NAME_STOCKOPTIONMARKETVALUE = "stockoptionmarketvalue";
  @SerializedName(SERIALIZED_NAME_STOCKOPTIONMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal stockoptionmarketvalue;

  public static final String SERIALIZED_NAME_TBILLSMARKETVALUE = "tbillsmarketvalue";
  @SerializedName(SERIALIZED_NAME_TBILLSMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal tbillsmarketvalue;

  public static final String SERIALIZED_NAME_TBONDSMARKETVALUE = "tbondsmarketvalue";
  @SerializedName(SERIALIZED_NAME_TBONDSMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal tbondsmarketvalue;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private Integer timestamp;

  public static final String SERIALIZED_NAME_UNREALIZEDPNL = "unrealizedpnl";
  @SerializedName(SERIALIZED_NAME_UNREALIZEDPNL)
  @javax.annotation.Nullable
  private BigDecimal unrealizedpnl;

  public static final String SERIALIZED_NAME_WARRANTSMARKETVALUE = "warrantsmarketvalue";
  @SerializedName(SERIALIZED_NAME_WARRANTSMARKETVALUE)
  @javax.annotation.Nullable
  private BigDecimal warrantsmarketvalue;

  public LedgerValue() {
  }

  public LedgerValue acctcode(@javax.annotation.Nullable String acctcode) {
    this.acctcode = acctcode;
    return this;
  }

  /**
   * The Account ID of the requested account.
   * @return acctcode
   */
  @javax.annotation.Nullable
  public String getAcctcode() {
    return acctcode;
  }

  public void setAcctcode(@javax.annotation.Nullable String acctcode) {
    this.acctcode = acctcode;
  }


  public LedgerValue cashbalance(@javax.annotation.Nullable BigDecimal cashbalance) {
    this.cashbalance = cashbalance;
    return this;
  }

  /**
   * The given account&#39;s cash balance in this currency.
   * @return cashbalance
   */
  @javax.annotation.Nullable
  public BigDecimal getCashbalance() {
    return cashbalance;
  }

  public void setCashbalance(@javax.annotation.Nullable BigDecimal cashbalance) {
    this.cashbalance = cashbalance;
  }


  public LedgerValue cashbalancefxsegment(@javax.annotation.Nullable BigDecimal cashbalancefxsegment) {
    this.cashbalancefxsegment = cashbalancefxsegment;
    return this;
  }

  /**
   * The given account&#39;s cash balance in its dedicated forex segment in this currency, if applicable.
   * @return cashbalancefxsegment
   */
  @javax.annotation.Nullable
  public BigDecimal getCashbalancefxsegment() {
    return cashbalancefxsegment;
  }

  public void setCashbalancefxsegment(@javax.annotation.Nullable BigDecimal cashbalancefxsegment) {
    this.cashbalancefxsegment = cashbalancefxsegment;
  }


  public LedgerValue commoditymarketvalue(@javax.annotation.Nullable BigDecimal commoditymarketvalue) {
    this.commoditymarketvalue = commoditymarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s commodity positions in this currency.
   * @return commoditymarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getCommoditymarketvalue() {
    return commoditymarketvalue;
  }

  public void setCommoditymarketvalue(@javax.annotation.Nullable BigDecimal commoditymarketvalue) {
    this.commoditymarketvalue = commoditymarketvalue;
  }


  public LedgerValue corporatebondsmarketvalue(@javax.annotation.Nullable BigDecimal corporatebondsmarketvalue) {
    this.corporatebondsmarketvalue = corporatebondsmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s corporate bond positions in this currency.
   * @return corporatebondsmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getCorporatebondsmarketvalue() {
    return corporatebondsmarketvalue;
  }

  public void setCorporatebondsmarketvalue(@javax.annotation.Nullable BigDecimal corporatebondsmarketvalue) {
    this.corporatebondsmarketvalue = corporatebondsmarketvalue;
  }


  public LedgerValue currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Three-letter name of the currency reflected by this object, or &#39;BASE&#39; for the account&#39;s base currency.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public LedgerValue dividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
    return this;
  }

  /**
   * The given account&#39;s receivable (not yet disbursed) dividend balance in this currency.
   * @return dividends
   */
  @javax.annotation.Nullable
  public BigDecimal getDividends() {
    return dividends;
  }

  public void setDividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
  }


  public LedgerValue exchangerate(@javax.annotation.Nullable Integer exchangerate) {
    this.exchangerate = exchangerate;
    return this;
  }

  /**
   * Exchange rate of this currency relative to the account&#39;s base currency.
   * @return exchangerate
   */
  @javax.annotation.Nullable
  public Integer getExchangerate() {
    return exchangerate;
  }

  public void setExchangerate(@javax.annotation.Nullable Integer exchangerate) {
    this.exchangerate = exchangerate;
  }


  public LedgerValue funds(@javax.annotation.Nullable BigDecimal funds) {
    this.funds = funds;
    return this;
  }

  /**
   * The value of the given account&#39;s mutual fund holdings in this currency.
   * @return funds
   */
  @javax.annotation.Nullable
  public BigDecimal getFunds() {
    return funds;
  }

  public void setFunds(@javax.annotation.Nullable BigDecimal funds) {
    this.funds = funds;
  }


  public LedgerValue futuremarketvalue(@javax.annotation.Nullable BigDecimal futuremarketvalue) {
    this.futuremarketvalue = futuremarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s futures positions in this currency.
   * @return futuremarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getFuturemarketvalue() {
    return futuremarketvalue;
  }

  public void setFuturemarketvalue(@javax.annotation.Nullable BigDecimal futuremarketvalue) {
    this.futuremarketvalue = futuremarketvalue;
  }


  public LedgerValue futureoptionmarketvalue(@javax.annotation.Nullable BigDecimal futureoptionmarketvalue) {
    this.futureoptionmarketvalue = futureoptionmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s futures options positions in this currency.
   * @return futureoptionmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getFutureoptionmarketvalue() {
    return futureoptionmarketvalue;
  }

  public void setFutureoptionmarketvalue(@javax.annotation.Nullable BigDecimal futureoptionmarketvalue) {
    this.futureoptionmarketvalue = futureoptionmarketvalue;
  }


  public LedgerValue futuresonlypnl(@javax.annotation.Nullable BigDecimal futuresonlypnl) {
    this.futuresonlypnl = futuresonlypnl;
    return this;
  }

  /**
   * PnL of the given account&#39;s futures positions in this currency.
   * @return futuresonlypnl
   */
  @javax.annotation.Nullable
  public BigDecimal getFuturesonlypnl() {
    return futuresonlypnl;
  }

  public void setFuturesonlypnl(@javax.annotation.Nullable BigDecimal futuresonlypnl) {
    this.futuresonlypnl = futuresonlypnl;
  }


  public LedgerValue interest(@javax.annotation.Nullable BigDecimal interest) {
    this.interest = interest;
    return this;
  }

  /**
   * The given account&#39;s receivable interest balance in this currency.
   * @return interest
   */
  @javax.annotation.Nullable
  public BigDecimal getInterest() {
    return interest;
  }

  public void setInterest(@javax.annotation.Nullable BigDecimal interest) {
    this.interest = interest;
  }


  public LedgerValue issueroptionsmarketvalue(@javax.annotation.Nullable BigDecimal issueroptionsmarketvalue) {
    this.issueroptionsmarketvalue = issueroptionsmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s issuer options positions in this currency.
   * @return issueroptionsmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getIssueroptionsmarketvalue() {
    return issueroptionsmarketvalue;
  }

  public void setIssueroptionsmarketvalue(@javax.annotation.Nullable BigDecimal issueroptionsmarketvalue) {
    this.issueroptionsmarketvalue = issueroptionsmarketvalue;
  }


  public LedgerValue key(@javax.annotation.Nullable KeyEnum key) {
    this.key = key;
    return this;
  }

  /**
   * Identifies the nature of data. Always takes values &#39;LedgerList&#39;.
   * @return key
   */
  @javax.annotation.Nullable
  public KeyEnum getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable KeyEnum key) {
    this.key = key;
  }


  public LedgerValue moneyfunds(@javax.annotation.Nullable BigDecimal moneyfunds) {
    this.moneyfunds = moneyfunds;
    return this;
  }

  /**
   * The value of the given account&#39;s money market fund holdings in this currency.
   * @return moneyfunds
   */
  @javax.annotation.Nullable
  public BigDecimal getMoneyfunds() {
    return moneyfunds;
  }

  public void setMoneyfunds(@javax.annotation.Nullable BigDecimal moneyfunds) {
    this.moneyfunds = moneyfunds;
  }


  public LedgerValue netliquidationvalue(@javax.annotation.Nullable BigDecimal netliquidationvalue) {
    this.netliquidationvalue = netliquidationvalue;
    return this;
  }

  /**
   * The given account&#39;s net liquidation value of positions in this currency.
   * @return netliquidationvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getNetliquidationvalue() {
    return netliquidationvalue;
  }

  public void setNetliquidationvalue(@javax.annotation.Nullable BigDecimal netliquidationvalue) {
    this.netliquidationvalue = netliquidationvalue;
  }


  public LedgerValue realizedpnl(@javax.annotation.Nullable BigDecimal realizedpnl) {
    this.realizedpnl = realizedpnl;
    return this;
  }

  /**
   * The given account&#39;s realized PnL for positions in this currency.
   * @return realizedpnl
   */
  @javax.annotation.Nullable
  public BigDecimal getRealizedpnl() {
    return realizedpnl;
  }

  public void setRealizedpnl(@javax.annotation.Nullable BigDecimal realizedpnl) {
    this.realizedpnl = realizedpnl;
  }


  public LedgerValue secondkey(@javax.annotation.Nullable String secondkey) {
    this.secondkey = secondkey;
    return this;
  }

  /**
   * Additional identifier of the currency reflected in this object. Always matches &#39;currency&#39; field.
   * @return secondkey
   */
  @javax.annotation.Nullable
  public String getSecondkey() {
    return secondkey;
  }

  public void setSecondkey(@javax.annotation.Nullable String secondkey) {
    this.secondkey = secondkey;
  }


  public LedgerValue sessionid(@javax.annotation.Nullable Integer sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  /**
   * Get sessionid
   * @return sessionid
   */
  @javax.annotation.Nullable
  public Integer getSessionid() {
    return sessionid;
  }

  public void setSessionid(@javax.annotation.Nullable Integer sessionid) {
    this.sessionid = sessionid;
  }


  public LedgerValue settledcash(@javax.annotation.Nullable BigDecimal settledcash) {
    this.settledcash = settledcash;
    return this;
  }

  /**
   * The given account&#39;s settled cash balance in this currency.
   * @return settledcash
   */
  @javax.annotation.Nullable
  public BigDecimal getSettledcash() {
    return settledcash;
  }

  public void setSettledcash(@javax.annotation.Nullable BigDecimal settledcash) {
    this.settledcash = settledcash;
  }


  public LedgerValue severity(@javax.annotation.Nullable Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(@javax.annotation.Nullable Integer severity) {
    this.severity = severity;
  }


  public LedgerValue stockmarketvalue(@javax.annotation.Nullable BigDecimal stockmarketvalue) {
    this.stockmarketvalue = stockmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s stock positions in this currency.
   * @return stockmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getStockmarketvalue() {
    return stockmarketvalue;
  }

  public void setStockmarketvalue(@javax.annotation.Nullable BigDecimal stockmarketvalue) {
    this.stockmarketvalue = stockmarketvalue;
  }


  public LedgerValue stockoptionmarketvalue(@javax.annotation.Nullable BigDecimal stockoptionmarketvalue) {
    this.stockoptionmarketvalue = stockoptionmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s stock options positions in this currency.
   * @return stockoptionmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getStockoptionmarketvalue() {
    return stockoptionmarketvalue;
  }

  public void setStockoptionmarketvalue(@javax.annotation.Nullable BigDecimal stockoptionmarketvalue) {
    this.stockoptionmarketvalue = stockoptionmarketvalue;
  }


  public LedgerValue tbillsmarketvalue(@javax.annotation.Nullable BigDecimal tbillsmarketvalue) {
    this.tbillsmarketvalue = tbillsmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s treasury bill positions in this currency.
   * @return tbillsmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getTbillsmarketvalue() {
    return tbillsmarketvalue;
  }

  public void setTbillsmarketvalue(@javax.annotation.Nullable BigDecimal tbillsmarketvalue) {
    this.tbillsmarketvalue = tbillsmarketvalue;
  }


  public LedgerValue tbondsmarketvalue(@javax.annotation.Nullable BigDecimal tbondsmarketvalue) {
    this.tbondsmarketvalue = tbondsmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s treasury bond positions in this currency.
   * @return tbondsmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getTbondsmarketvalue() {
    return tbondsmarketvalue;
  }

  public void setTbondsmarketvalue(@javax.annotation.Nullable BigDecimal tbondsmarketvalue) {
    this.tbondsmarketvalue = tbondsmarketvalue;
  }


  public LedgerValue timestamp(@javax.annotation.Nullable Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of retrievable of this account ledger data.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable Integer timestamp) {
    this.timestamp = timestamp;
  }


  public LedgerValue unrealizedpnl(@javax.annotation.Nullable BigDecimal unrealizedpnl) {
    this.unrealizedpnl = unrealizedpnl;
    return this;
  }

  /**
   * The given account&#39;s unrealied PnL for positions in this currency.
   * @return unrealizedpnl
   */
  @javax.annotation.Nullable
  public BigDecimal getUnrealizedpnl() {
    return unrealizedpnl;
  }

  public void setUnrealizedpnl(@javax.annotation.Nullable BigDecimal unrealizedpnl) {
    this.unrealizedpnl = unrealizedpnl;
  }


  public LedgerValue warrantsmarketvalue(@javax.annotation.Nullable BigDecimal warrantsmarketvalue) {
    this.warrantsmarketvalue = warrantsmarketvalue;
    return this;
  }

  /**
   * Market value of the given account&#39;s warrant positions in this currency.
   * @return warrantsmarketvalue
   */
  @javax.annotation.Nullable
  public BigDecimal getWarrantsmarketvalue() {
    return warrantsmarketvalue;
  }

  public void setWarrantsmarketvalue(@javax.annotation.Nullable BigDecimal warrantsmarketvalue) {
    this.warrantsmarketvalue = warrantsmarketvalue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerValue ledgerValue = (LedgerValue) o;
    return Objects.equals(this.acctcode, ledgerValue.acctcode) &&
        Objects.equals(this.cashbalance, ledgerValue.cashbalance) &&
        Objects.equals(this.cashbalancefxsegment, ledgerValue.cashbalancefxsegment) &&
        Objects.equals(this.commoditymarketvalue, ledgerValue.commoditymarketvalue) &&
        Objects.equals(this.corporatebondsmarketvalue, ledgerValue.corporatebondsmarketvalue) &&
        Objects.equals(this.currency, ledgerValue.currency) &&
        Objects.equals(this.dividends, ledgerValue.dividends) &&
        Objects.equals(this.exchangerate, ledgerValue.exchangerate) &&
        Objects.equals(this.funds, ledgerValue.funds) &&
        Objects.equals(this.futuremarketvalue, ledgerValue.futuremarketvalue) &&
        Objects.equals(this.futureoptionmarketvalue, ledgerValue.futureoptionmarketvalue) &&
        Objects.equals(this.futuresonlypnl, ledgerValue.futuresonlypnl) &&
        Objects.equals(this.interest, ledgerValue.interest) &&
        Objects.equals(this.issueroptionsmarketvalue, ledgerValue.issueroptionsmarketvalue) &&
        Objects.equals(this.key, ledgerValue.key) &&
        Objects.equals(this.moneyfunds, ledgerValue.moneyfunds) &&
        Objects.equals(this.netliquidationvalue, ledgerValue.netliquidationvalue) &&
        Objects.equals(this.realizedpnl, ledgerValue.realizedpnl) &&
        Objects.equals(this.secondkey, ledgerValue.secondkey) &&
        Objects.equals(this.sessionid, ledgerValue.sessionid) &&
        Objects.equals(this.settledcash, ledgerValue.settledcash) &&
        Objects.equals(this.severity, ledgerValue.severity) &&
        Objects.equals(this.stockmarketvalue, ledgerValue.stockmarketvalue) &&
        Objects.equals(this.stockoptionmarketvalue, ledgerValue.stockoptionmarketvalue) &&
        Objects.equals(this.tbillsmarketvalue, ledgerValue.tbillsmarketvalue) &&
        Objects.equals(this.tbondsmarketvalue, ledgerValue.tbondsmarketvalue) &&
        Objects.equals(this.timestamp, ledgerValue.timestamp) &&
        Objects.equals(this.unrealizedpnl, ledgerValue.unrealizedpnl) &&
        Objects.equals(this.warrantsmarketvalue, ledgerValue.warrantsmarketvalue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctcode, cashbalance, cashbalancefxsegment, commoditymarketvalue, corporatebondsmarketvalue, currency, dividends, exchangerate, funds, futuremarketvalue, futureoptionmarketvalue, futuresonlypnl, interest, issueroptionsmarketvalue, key, moneyfunds, netliquidationvalue, realizedpnl, secondkey, sessionid, settledcash, severity, stockmarketvalue, stockoptionmarketvalue, tbillsmarketvalue, tbondsmarketvalue, timestamp, unrealizedpnl, warrantsmarketvalue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerValue {\n");
    sb.append("    acctcode: ").append(toIndentedString(acctcode)).append("\n");
    sb.append("    cashbalance: ").append(toIndentedString(cashbalance)).append("\n");
    sb.append("    cashbalancefxsegment: ").append(toIndentedString(cashbalancefxsegment)).append("\n");
    sb.append("    commoditymarketvalue: ").append(toIndentedString(commoditymarketvalue)).append("\n");
    sb.append("    corporatebondsmarketvalue: ").append(toIndentedString(corporatebondsmarketvalue)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dividends: ").append(toIndentedString(dividends)).append("\n");
    sb.append("    exchangerate: ").append(toIndentedString(exchangerate)).append("\n");
    sb.append("    funds: ").append(toIndentedString(funds)).append("\n");
    sb.append("    futuremarketvalue: ").append(toIndentedString(futuremarketvalue)).append("\n");
    sb.append("    futureoptionmarketvalue: ").append(toIndentedString(futureoptionmarketvalue)).append("\n");
    sb.append("    futuresonlypnl: ").append(toIndentedString(futuresonlypnl)).append("\n");
    sb.append("    interest: ").append(toIndentedString(interest)).append("\n");
    sb.append("    issueroptionsmarketvalue: ").append(toIndentedString(issueroptionsmarketvalue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    moneyfunds: ").append(toIndentedString(moneyfunds)).append("\n");
    sb.append("    netliquidationvalue: ").append(toIndentedString(netliquidationvalue)).append("\n");
    sb.append("    realizedpnl: ").append(toIndentedString(realizedpnl)).append("\n");
    sb.append("    secondkey: ").append(toIndentedString(secondkey)).append("\n");
    sb.append("    sessionid: ").append(toIndentedString(sessionid)).append("\n");
    sb.append("    settledcash: ").append(toIndentedString(settledcash)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    stockmarketvalue: ").append(toIndentedString(stockmarketvalue)).append("\n");
    sb.append("    stockoptionmarketvalue: ").append(toIndentedString(stockoptionmarketvalue)).append("\n");
    sb.append("    tbillsmarketvalue: ").append(toIndentedString(tbillsmarketvalue)).append("\n");
    sb.append("    tbondsmarketvalue: ").append(toIndentedString(tbondsmarketvalue)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    unrealizedpnl: ").append(toIndentedString(unrealizedpnl)).append("\n");
    sb.append("    warrantsmarketvalue: ").append(toIndentedString(warrantsmarketvalue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctcode");
    openapiFields.add("cashbalance");
    openapiFields.add("cashbalancefxsegment");
    openapiFields.add("commoditymarketvalue");
    openapiFields.add("corporatebondsmarketvalue");
    openapiFields.add("currency");
    openapiFields.add("dividends");
    openapiFields.add("exchangerate");
    openapiFields.add("funds");
    openapiFields.add("futuremarketvalue");
    openapiFields.add("futureoptionmarketvalue");
    openapiFields.add("futuresonlypnl");
    openapiFields.add("interest");
    openapiFields.add("issueroptionsmarketvalue");
    openapiFields.add("key");
    openapiFields.add("moneyfunds");
    openapiFields.add("netliquidationvalue");
    openapiFields.add("realizedpnl");
    openapiFields.add("secondkey");
    openapiFields.add("sessionid");
    openapiFields.add("settledcash");
    openapiFields.add("severity");
    openapiFields.add("stockmarketvalue");
    openapiFields.add("stockoptionmarketvalue");
    openapiFields.add("tbillsmarketvalue");
    openapiFields.add("tbondsmarketvalue");
    openapiFields.add("timestamp");
    openapiFields.add("unrealizedpnl");
    openapiFields.add("warrantsmarketvalue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LedgerValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LedgerValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LedgerValue is not found in the empty JSON string", LedgerValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LedgerValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LedgerValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acctcode") != null && !jsonObj.get("acctcode").isJsonNull()) && !jsonObj.get("acctcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctcode").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        KeyEnum.validateJsonElement(jsonObj.get("key"));
      }
      if ((jsonObj.get("secondkey") != null && !jsonObj.get("secondkey").isJsonNull()) && !jsonObj.get("secondkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondkey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LedgerValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LedgerValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LedgerValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LedgerValue.class));

       return (TypeAdapter<T>) new TypeAdapter<LedgerValue>() {
           @Override
           public void write(JsonWriter out, LedgerValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LedgerValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LedgerValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LedgerValue
   * @throws IOException if the JSON string is invalid with respect to LedgerValue
   */
  public static LedgerValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LedgerValue.class);
  }

  /**
   * Convert an instance of LedgerValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

