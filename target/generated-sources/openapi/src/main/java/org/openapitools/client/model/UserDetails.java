/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateOfBirth;
import org.openapitools.client.model.Identification;
import org.openapitools.client.model.MailingAddress;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.Residence;
import org.openapitools.client.model.TaxResidency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class UserDetails {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private Name name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_RESIDENCE_ADDRESS = "residenceAddress";
  @SerializedName(SERIALIZED_NAME_RESIDENCE_ADDRESS)
  @javax.annotation.Nullable
  private Residence residenceAddress;

  public static final String SERIALIZED_NAME_MAILING_ADDRESS = "mailingAddress";
  @SerializedName(SERIALIZED_NAME_MAILING_ADDRESS)
  @javax.annotation.Nullable
  private MailingAddress mailingAddress;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  @javax.annotation.Nullable
  private Identification identification;

  public static final String SERIALIZED_NAME_TAX_RESIDENCIES = "taxResidencies";
  @SerializedName(SERIALIZED_NAME_TAX_RESIDENCIES)
  @javax.annotation.Nullable
  private List<TaxResidency> taxResidencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  @javax.annotation.Nullable
  private DateOfBirth dateOfBirth;

  public static final String SERIALIZED_NAME_SAME_MAIL_ADDRESS = "sameMailAddress";
  @SerializedName(SERIALIZED_NAME_SAME_MAIL_ADDRESS)
  @javax.annotation.Nullable
  private Boolean sameMailAddress;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public UserDetails() {
  }

  public UserDetails name(@javax.annotation.Nullable Name name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable Name name) {
    this.name = name;
  }


  public UserDetails email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public UserDetails residenceAddress(@javax.annotation.Nullable Residence residenceAddress) {
    this.residenceAddress = residenceAddress;
    return this;
  }

  /**
   * Get residenceAddress
   * @return residenceAddress
   */
  @javax.annotation.Nullable
  public Residence getResidenceAddress() {
    return residenceAddress;
  }

  public void setResidenceAddress(@javax.annotation.Nullable Residence residenceAddress) {
    this.residenceAddress = residenceAddress;
  }


  public UserDetails mailingAddress(@javax.annotation.Nullable MailingAddress mailingAddress) {
    this.mailingAddress = mailingAddress;
    return this;
  }

  /**
   * Get mailingAddress
   * @return mailingAddress
   */
  @javax.annotation.Nullable
  public MailingAddress getMailingAddress() {
    return mailingAddress;
  }

  public void setMailingAddress(@javax.annotation.Nullable MailingAddress mailingAddress) {
    this.mailingAddress = mailingAddress;
  }


  public UserDetails identification(@javax.annotation.Nullable Identification identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Get identification
   * @return identification
   */
  @javax.annotation.Nullable
  public Identification getIdentification() {
    return identification;
  }

  public void setIdentification(@javax.annotation.Nullable Identification identification) {
    this.identification = identification;
  }


  public UserDetails taxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
    return this;
  }

  public UserDetails addTaxResidenciesItem(TaxResidency taxResidenciesItem) {
    if (this.taxResidencies == null) {
      this.taxResidencies = new ArrayList<>();
    }
    this.taxResidencies.add(taxResidenciesItem);
    return this;
  }

  /**
   * Get taxResidencies
   * @return taxResidencies
   */
  @javax.annotation.Nullable
  public List<TaxResidency> getTaxResidencies() {
    return taxResidencies;
  }

  public void setTaxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
  }


  public UserDetails dateOfBirth(@javax.annotation.Nullable DateOfBirth dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public DateOfBirth getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(@javax.annotation.Nullable DateOfBirth dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public UserDetails sameMailAddress(@javax.annotation.Nullable Boolean sameMailAddress) {
    this.sameMailAddress = sameMailAddress;
    return this;
  }

  /**
   * Get sameMailAddress
   * @return sameMailAddress
   */
  @javax.annotation.Nullable
  public Boolean getSameMailAddress() {
    return sameMailAddress;
  }

  public void setSameMailAddress(@javax.annotation.Nullable Boolean sameMailAddress) {
    this.sameMailAddress = sameMailAddress;
  }


  public UserDetails externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDetails userDetails = (UserDetails) o;
    return Objects.equals(this.name, userDetails.name) &&
        Objects.equals(this.email, userDetails.email) &&
        Objects.equals(this.residenceAddress, userDetails.residenceAddress) &&
        Objects.equals(this.mailingAddress, userDetails.mailingAddress) &&
        Objects.equals(this.identification, userDetails.identification) &&
        Objects.equals(this.taxResidencies, userDetails.taxResidencies) &&
        Objects.equals(this.dateOfBirth, userDetails.dateOfBirth) &&
        Objects.equals(this.sameMailAddress, userDetails.sameMailAddress) &&
        Objects.equals(this.externalId, userDetails.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, email, residenceAddress, mailingAddress, identification, taxResidencies, dateOfBirth, sameMailAddress, externalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDetails {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    residenceAddress: ").append(toIndentedString(residenceAddress)).append("\n");
    sb.append("    mailingAddress: ").append(toIndentedString(mailingAddress)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    taxResidencies: ").append(toIndentedString(taxResidencies)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    sameMailAddress: ").append(toIndentedString(sameMailAddress)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("residenceAddress");
    openapiFields.add("mailingAddress");
    openapiFields.add("identification");
    openapiFields.add("taxResidencies");
    openapiFields.add("dateOfBirth");
    openapiFields.add("sameMailAddress");
    openapiFields.add("externalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDetails is not found in the empty JSON string", UserDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `residenceAddress`
      if (jsonObj.get("residenceAddress") != null && !jsonObj.get("residenceAddress").isJsonNull()) {
        Residence.validateJsonElement(jsonObj.get("residenceAddress"));
      }
      // validate the optional field `mailingAddress`
      if (jsonObj.get("mailingAddress") != null && !jsonObj.get("mailingAddress").isJsonNull()) {
        MailingAddress.validateJsonElement(jsonObj.get("mailingAddress"));
      }
      // validate the optional field `identification`
      if (jsonObj.get("identification") != null && !jsonObj.get("identification").isJsonNull()) {
        Identification.validateJsonElement(jsonObj.get("identification"));
      }
      if (jsonObj.get("taxResidencies") != null && !jsonObj.get("taxResidencies").isJsonNull()) {
        JsonArray jsonArraytaxResidencies = jsonObj.getAsJsonArray("taxResidencies");
        if (jsonArraytaxResidencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxResidencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxResidencies` to be an array in the JSON string but got `%s`", jsonObj.get("taxResidencies").toString()));
          }

          // validate the optional field `taxResidencies` (array)
          for (int i = 0; i < jsonArraytaxResidencies.size(); i++) {
            TaxResidency.validateJsonElement(jsonArraytaxResidencies.get(i));
          };
        }
      }
      // validate the optional field `dateOfBirth`
      if (jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) {
        DateOfBirth.validateJsonElement(jsonObj.get("dateOfBirth"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDetails>() {
           @Override
           public void write(JsonWriter out, UserDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDetails
   * @throws IOException if the JSON string is invalid with respect to UserDetails
   */
  public static UserDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDetails.class);
  }

  /**
   * Convert an instance of UserDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

