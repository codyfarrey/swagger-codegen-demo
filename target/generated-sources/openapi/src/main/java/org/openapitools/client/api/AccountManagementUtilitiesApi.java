/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BusinessRejectResponse;
import org.openapitools.client.model.EnumerationResponse;
import org.openapitools.client.model.ForbiddenRequestResponse;
import org.openapitools.client.model.FormFileResponse;
import org.openapitools.client.model.GetBrokerListResponse;
import org.openapitools.client.model.GetParticipatingListResponse;
import org.openapitools.client.model.GwApiV1FeeTemplatesPostRequest;
import org.openapitools.client.model.GwApiV1FeeTemplatesQueryPostRequest;
import org.openapitools.client.model.GwApiV1RequestsRequestIdStatusGet200Response;
import org.openapitools.client.model.InstructionResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.NoSuchInstructionResponse;
import org.openapitools.client.model.ProblemDetailResponse;
import org.openapitools.client.model.QueryFeeTemplateResult;
import org.openapitools.client.model.RequestDetailsRequest;
import org.openapitools.client.model.RequestDetailsResponse;
import org.openapitools.client.model.UserNameAvailableResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountManagementUtilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountManagementUtilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountManagementUtilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gwApiV1EnumerationsComplexAssetTransferGet
     * @param clientId The client&#39;s clientId (required)
     * @param instructionType Asset transfer type to get the list of supported brokers (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of brokers supported for given asset type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1EnumerationsComplexAssetTransferGetCall(String clientId, Object instructionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/enumerations/complex-asset-transfer"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instructionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionType", instructionType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1EnumerationsComplexAssetTransferGetValidateBeforeCall(String clientId, Object instructionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1EnumerationsComplexAssetTransferGet(Async)");
        }

        // verify the required parameter 'instructionType' is set
        if (instructionType == null) {
            throw new ApiException("Missing the required parameter 'instructionType' when calling gwApiV1EnumerationsComplexAssetTransferGet(Async)");
        }

        return gwApiV1EnumerationsComplexAssetTransferGetCall(clientId, instructionType, _callback);

    }

    /**
     * Get A List Of Participating Brokers For The Given Asset Type
     * Get list of brokers supported for given asset transfer type&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionType Asset transfer type to get the list of supported brokers (required)
     * @return GetBrokerListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of brokers supported for given asset type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public GetBrokerListResponse gwApiV1EnumerationsComplexAssetTransferGet(String clientId, Object instructionType) throws ApiException {
        ApiResponse<GetBrokerListResponse> localVarResp = gwApiV1EnumerationsComplexAssetTransferGetWithHttpInfo(clientId, instructionType);
        return localVarResp.getData();
    }

    /**
     * Get A List Of Participating Brokers For The Given Asset Type
     * Get list of brokers supported for given asset transfer type&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionType Asset transfer type to get the list of supported brokers (required)
     * @return ApiResponse&lt;GetBrokerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of brokers supported for given asset type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBrokerListResponse> gwApiV1EnumerationsComplexAssetTransferGetWithHttpInfo(String clientId, Object instructionType) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1EnumerationsComplexAssetTransferGetValidateBeforeCall(clientId, instructionType, null);
        Type localVarReturnType = new TypeToken<GetBrokerListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get A List Of Participating Brokers For The Given Asset Type (asynchronously)
     * Get list of brokers supported for given asset transfer type&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionType Asset transfer type to get the list of supported brokers (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of brokers supported for given asset type </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1EnumerationsComplexAssetTransferGetAsync(String clientId, Object instructionType, final ApiCallback<GetBrokerListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1EnumerationsComplexAssetTransferGetValidateBeforeCall(clientId, instructionType, _callback);
        Type localVarReturnType = new TypeToken<GetBrokerListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1EnumerationsEnumerationTypeGet
     * @param type  (required)
     * @param currency  (optional)
     * @param ibEntity  (optional)
     * @param mdStatusNonPro  (optional)
     * @param formNumber  (optional)
     * @param language  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get enumerations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1EnumerationsEnumerationTypeGetCall(String type, String currency, String ibEntity, String mdStatusNonPro, String formNumber, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/enumerations/{enumerationType}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (ibEntity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ibEntity", ibEntity));
        }

        if (mdStatusNonPro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mdStatusNonPro", mdStatusNonPro));
        }

        if (formNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form-number", formNumber));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1EnumerationsEnumerationTypeGetValidateBeforeCall(String type, String currency, String ibEntity, String mdStatusNonPro, String formNumber, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling gwApiV1EnumerationsEnumerationTypeGet(Async)");
        }

        return gwApiV1EnumerationsEnumerationTypeGetCall(type, currency, ibEntity, mdStatusNonPro, formNumber, language, _callback);

    }

    /**
     * Get Enumerations For Trading Permission, Employment Detail, Affiliation Detail, Financial Range Information, ACATS And So On
     * Get enumerations&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param type  (required)
     * @param currency  (optional)
     * @param ibEntity  (optional)
     * @param mdStatusNonPro  (optional)
     * @param formNumber  (optional)
     * @param language  (optional)
     * @return EnumerationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get enumerations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public EnumerationResponse gwApiV1EnumerationsEnumerationTypeGet(String type, String currency, String ibEntity, String mdStatusNonPro, String formNumber, String language) throws ApiException {
        ApiResponse<EnumerationResponse> localVarResp = gwApiV1EnumerationsEnumerationTypeGetWithHttpInfo(type, currency, ibEntity, mdStatusNonPro, formNumber, language);
        return localVarResp.getData();
    }

    /**
     * Get Enumerations For Trading Permission, Employment Detail, Affiliation Detail, Financial Range Information, ACATS And So On
     * Get enumerations&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param type  (required)
     * @param currency  (optional)
     * @param ibEntity  (optional)
     * @param mdStatusNonPro  (optional)
     * @param formNumber  (optional)
     * @param language  (optional)
     * @return ApiResponse&lt;EnumerationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get enumerations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnumerationResponse> gwApiV1EnumerationsEnumerationTypeGetWithHttpInfo(String type, String currency, String ibEntity, String mdStatusNonPro, String formNumber, String language) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1EnumerationsEnumerationTypeGetValidateBeforeCall(type, currency, ibEntity, mdStatusNonPro, formNumber, language, null);
        Type localVarReturnType = new TypeToken<EnumerationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Enumerations For Trading Permission, Employment Detail, Affiliation Detail, Financial Range Information, ACATS And So On (asynchronously)
     * Get enumerations&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param type  (required)
     * @param currency  (optional)
     * @param ibEntity  (optional)
     * @param mdStatusNonPro  (optional)
     * @param formNumber  (optional)
     * @param language  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get enumerations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1EnumerationsEnumerationTypeGetAsync(String type, String currency, String ibEntity, String mdStatusNonPro, String formNumber, String language, final ApiCallback<EnumerationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1EnumerationsEnumerationTypeGetValidateBeforeCall(type, currency, ibEntity, mdStatusNonPro, formNumber, language, _callback);
        Type localVarReturnType = new TypeToken<EnumerationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1FeeTemplatesPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FeeTemplatesPostCall(String clientId, GwApiV1FeeTemplatesPostRequest gwApiV1FeeTemplatesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1FeeTemplatesPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/fee-templates"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1FeeTemplatesPostValidateBeforeCall(String clientId, GwApiV1FeeTemplatesPostRequest gwApiV1FeeTemplatesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1FeeTemplatesPost(Async)");
        }

        // verify the required parameter 'gwApiV1FeeTemplatesPostRequest' is set
        if (gwApiV1FeeTemplatesPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1FeeTemplatesPostRequest' when calling gwApiV1FeeTemplatesPost(Async)");
        }

        return gwApiV1FeeTemplatesPostCall(clientId, gwApiV1FeeTemplatesPostRequest, _callback);

    }

    /**
     * Set Fees For Account
     * Apply predefined fee template to existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1FeeTemplatesPost(String clientId, GwApiV1FeeTemplatesPostRequest gwApiV1FeeTemplatesPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1FeeTemplatesPostWithHttpInfo(clientId, gwApiV1FeeTemplatesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Set Fees For Account
     * Apply predefined fee template to existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1FeeTemplatesPostWithHttpInfo(String clientId, GwApiV1FeeTemplatesPostRequest gwApiV1FeeTemplatesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1FeeTemplatesPostValidateBeforeCall(clientId, gwApiV1FeeTemplatesPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Fees For Account (asynchronously)
     * Apply predefined fee template to existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FeeTemplatesPostAsync(String clientId, GwApiV1FeeTemplatesPostRequest gwApiV1FeeTemplatesPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1FeeTemplatesPostValidateBeforeCall(clientId, gwApiV1FeeTemplatesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1FeeTemplatesQueryPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesQueryPostRequest Create fee template request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FeeTemplatesQueryPostCall(String clientId, GwApiV1FeeTemplatesQueryPostRequest gwApiV1FeeTemplatesQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1FeeTemplatesQueryPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/fee-templates/query"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1FeeTemplatesQueryPostValidateBeforeCall(String clientId, GwApiV1FeeTemplatesQueryPostRequest gwApiV1FeeTemplatesQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1FeeTemplatesQueryPost(Async)");
        }

        // verify the required parameter 'gwApiV1FeeTemplatesQueryPostRequest' is set
        if (gwApiV1FeeTemplatesQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1FeeTemplatesQueryPostRequest' when calling gwApiV1FeeTemplatesQueryPost(Async)");
        }

        return gwApiV1FeeTemplatesQueryPostCall(clientId, gwApiV1FeeTemplatesQueryPostRequest, _callback);

    }

    /**
     * View Fee Template For Account
     * View fee template applied to an existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesQueryPostRequest Create fee template request body (required)
     * @return QueryFeeTemplateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public QueryFeeTemplateResult gwApiV1FeeTemplatesQueryPost(String clientId, GwApiV1FeeTemplatesQueryPostRequest gwApiV1FeeTemplatesQueryPostRequest) throws ApiException {
        ApiResponse<QueryFeeTemplateResult> localVarResp = gwApiV1FeeTemplatesQueryPostWithHttpInfo(clientId, gwApiV1FeeTemplatesQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * View Fee Template For Account
     * View fee template applied to an existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesQueryPostRequest Create fee template request body (required)
     * @return ApiResponse&lt;QueryFeeTemplateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryFeeTemplateResult> gwApiV1FeeTemplatesQueryPostWithHttpInfo(String clientId, GwApiV1FeeTemplatesQueryPostRequest gwApiV1FeeTemplatesQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1FeeTemplatesQueryPostValidateBeforeCall(clientId, gwApiV1FeeTemplatesQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<QueryFeeTemplateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View Fee Template For Account (asynchronously)
     * View fee template applied to an existing account.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;fee-templates.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1FeeTemplatesQueryPostRequest Create fee template request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FeeTemplatesQueryPostAsync(String clientId, GwApiV1FeeTemplatesQueryPostRequest gwApiV1FeeTemplatesQueryPostRequest, final ApiCallback<QueryFeeTemplateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1FeeTemplatesQueryPostValidateBeforeCall(clientId, gwApiV1FeeTemplatesQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<QueryFeeTemplateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1FormsGet
     * @param formNo  (optional)
     * @param getDocs  (optional)
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param language  (optional)
     * @param projection  (optional, default to NONE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get forms </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FormsGetCall(List<Integer> formNo, String getDocs, String fromDate, String toDate, String language, String projection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/forms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formNo != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "formNo", formNo));
        }

        if (getDocs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getDocs", getDocs));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1FormsGetValidateBeforeCall(List<Integer> formNo, String getDocs, String fromDate, String toDate, String language, String projection, final ApiCallback _callback) throws ApiException {
        return gwApiV1FormsGetCall(formNo, getDocs, fromDate, toDate, language, projection, _callback);

    }

    /**
     * Get Forms
     * Get forms&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;forms.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param formNo  (optional)
     * @param getDocs  (optional)
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param language  (optional)
     * @param projection  (optional, default to NONE)
     * @return FormFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get forms </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public FormFileResponse gwApiV1FormsGet(List<Integer> formNo, String getDocs, String fromDate, String toDate, String language, String projection) throws ApiException {
        ApiResponse<FormFileResponse> localVarResp = gwApiV1FormsGetWithHttpInfo(formNo, getDocs, fromDate, toDate, language, projection);
        return localVarResp.getData();
    }

    /**
     * Get Forms
     * Get forms&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;forms.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param formNo  (optional)
     * @param getDocs  (optional)
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param language  (optional)
     * @param projection  (optional, default to NONE)
     * @return ApiResponse&lt;FormFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get forms </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormFileResponse> gwApiV1FormsGetWithHttpInfo(List<Integer> formNo, String getDocs, String fromDate, String toDate, String language, String projection) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1FormsGetValidateBeforeCall(formNo, getDocs, fromDate, toDate, language, projection, null);
        Type localVarReturnType = new TypeToken<FormFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Forms (asynchronously)
     * Get forms&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;forms.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param formNo  (optional)
     * @param getDocs  (optional)
     * @param fromDate  (optional)
     * @param toDate  (optional)
     * @param language  (optional)
     * @param projection  (optional, default to NONE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Get forms </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1FormsGetAsync(List<Integer> formNo, String getDocs, String fromDate, String toDate, String language, String projection, final ApiCallback<FormFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1FormsGetValidateBeforeCall(formNo, getDocs, fromDate, toDate, language, projection, _callback);
        Type localVarReturnType = new TypeToken<FormFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ParticipatingBanksGet
     * @param clientId The client&#39;s clientId (required)
     * @param type Parameter for which the list of participating banks is fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of participating banks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ParticipatingBanksGetCall(String clientId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/participating-banks"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ParticipatingBanksGetValidateBeforeCall(String clientId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1ParticipatingBanksGet(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling gwApiV1ParticipatingBanksGet(Async)");
        }

        return gwApiV1ParticipatingBanksGetCall(clientId, type, _callback);

    }

    /**
     * Get Participating Banks
     * Get list of banks which support banking connection with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param type Parameter for which the list of participating banks is fetched (required)
     * @return GetParticipatingListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of participating banks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public GetParticipatingListResponse gwApiV1ParticipatingBanksGet(String clientId, String type) throws ApiException {
        ApiResponse<GetParticipatingListResponse> localVarResp = gwApiV1ParticipatingBanksGetWithHttpInfo(clientId, type);
        return localVarResp.getData();
    }

    /**
     * Get Participating Banks
     * Get list of banks which support banking connection with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param type Parameter for which the list of participating banks is fetched (required)
     * @return ApiResponse&lt;GetParticipatingListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of participating banks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetParticipatingListResponse> gwApiV1ParticipatingBanksGetWithHttpInfo(String clientId, String type) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ParticipatingBanksGetValidateBeforeCall(clientId, type, null);
        Type localVarReturnType = new TypeToken<GetParticipatingListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Participating Banks (asynchronously)
     * Get list of banks which support banking connection with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;enumerations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param type Parameter for which the list of participating banks is fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of participating banks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ParticipatingBanksGetAsync(String clientId, String type, final ApiCallback<GetParticipatingListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ParticipatingBanksGetValidateBeforeCall(clientId, type, _callback);
        Type localVarReturnType = new TypeToken<GetParticipatingListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1RequestsGet
     * @param requestDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Fetch Requests&#39; Details By Timeframe </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1RequestsGetCall(RequestDetailsRequest requestDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestDetails", requestDetails));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1RequestsGetValidateBeforeCall(RequestDetailsRequest requestDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestDetails' is set
        if (requestDetails == null) {
            throw new ApiException("Missing the required parameter 'requestDetails' when calling gwApiV1RequestsGet(Async)");
        }

        return gwApiV1RequestsGetCall(requestDetails, _callback);

    }

    /**
     * Get Requests&#39; Details By Timeframe
     * Fetch Requests&#39; Details By Timeframe&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestDetails  (required)
     * @return RequestDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Fetch Requests&#39; Details By Timeframe </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public RequestDetailsResponse gwApiV1RequestsGet(RequestDetailsRequest requestDetails) throws ApiException {
        ApiResponse<RequestDetailsResponse> localVarResp = gwApiV1RequestsGetWithHttpInfo(requestDetails);
        return localVarResp.getData();
    }

    /**
     * Get Requests&#39; Details By Timeframe
     * Fetch Requests&#39; Details By Timeframe&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestDetails  (required)
     * @return ApiResponse&lt;RequestDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Fetch Requests&#39; Details By Timeframe </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestDetailsResponse> gwApiV1RequestsGetWithHttpInfo(RequestDetailsRequest requestDetails) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1RequestsGetValidateBeforeCall(requestDetails, null);
        Type localVarReturnType = new TypeToken<RequestDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Requests&#39; Details By Timeframe (asynchronously)
     * Fetch Requests&#39; Details By Timeframe&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Fetch Requests&#39; Details By Timeframe </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1RequestsGetAsync(RequestDetailsRequest requestDetails, final ApiCallback<RequestDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1RequestsGetValidateBeforeCall(requestDetails, _callback);
        Type localVarReturnType = new TypeToken<RequestDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1RequestsRequestIdStatusGet
     * @param requestId  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns status for account management request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1RequestsRequestIdStatusGetCall(Integer requestId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/requests/{requestId}/status"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1RequestsRequestIdStatusGetValidateBeforeCall(Integer requestId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling gwApiV1RequestsRequestIdStatusGet(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling gwApiV1RequestsRequestIdStatusGet(Async)");
        }

        return gwApiV1RequestsRequestIdStatusGetCall(requestId, type, _callback);

    }

    /**
     * Get Status Of A Request
     * Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestId  (required)
     * @param type  (required)
     * @return GwApiV1RequestsRequestIdStatusGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns status for account management request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1RequestsRequestIdStatusGet200Response gwApiV1RequestsRequestIdStatusGet(Integer requestId, String type) throws ApiException {
        ApiResponse<GwApiV1RequestsRequestIdStatusGet200Response> localVarResp = gwApiV1RequestsRequestIdStatusGetWithHttpInfo(requestId, type);
        return localVarResp.getData();
    }

    /**
     * Get Status Of A Request
     * Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestId  (required)
     * @param type  (required)
     * @return ApiResponse&lt;GwApiV1RequestsRequestIdStatusGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns status for account management request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1RequestsRequestIdStatusGet200Response> gwApiV1RequestsRequestIdStatusGetWithHttpInfo(Integer requestId, String type) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1RequestsRequestIdStatusGetValidateBeforeCall(requestId, type, null);
        Type localVarReturnType = new TypeToken<GwApiV1RequestsRequestIdStatusGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status Of A Request (asynchronously)
     * Returns status for account management request&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param requestId  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns status for account management request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1RequestsRequestIdStatusGetAsync(Integer requestId, String type, final ApiCallback<GwApiV1RequestsRequestIdStatusGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1RequestsRequestIdStatusGetValidateBeforeCall(requestId, type, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1RequestsRequestIdStatusGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ValidationsUsernamesUsernameGet
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Verify whether user is valid and available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ValidationsUsernamesUsernameGetCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/validations/usernames/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ValidationsUsernamesUsernameGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling gwApiV1ValidationsUsernamesUsernameGet(Async)");
        }

        return gwApiV1ValidationsUsernamesUsernameGetCall(username, _callback);

    }

    /**
     * Verify User Availability
     * Verify whether user is valid and available&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;validations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param username  (required)
     * @return UserNameAvailableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Verify whether user is valid and available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public UserNameAvailableResponse gwApiV1ValidationsUsernamesUsernameGet(String username) throws ApiException {
        ApiResponse<UserNameAvailableResponse> localVarResp = gwApiV1ValidationsUsernamesUsernameGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Verify User Availability
     * Verify whether user is valid and available&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;validations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param username  (required)
     * @return ApiResponse&lt;UserNameAvailableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Verify whether user is valid and available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserNameAvailableResponse> gwApiV1ValidationsUsernamesUsernameGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ValidationsUsernamesUsernameGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<UserNameAvailableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify User Availability (asynchronously)
     * Verify whether user is valid and available&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60; OR &#x60;validations.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Verify whether user is valid and available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ValidationsUsernamesUsernameGetAsync(String username, final ApiCallback<UserNameAvailableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ValidationsUsernamesUsernameGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<UserNameAvailableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
