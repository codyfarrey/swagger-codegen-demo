/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MarkupStaircaseType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommissionMarkupType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class CommissionMarkupType {
  public static final String SERIALIZED_NAME_STAIRS = "stairs";
  @SerializedName(SERIALIZED_NAME_STAIRS)
  @javax.annotation.Nullable
  private List<MarkupStaircaseType> stairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  @javax.annotation.Nullable
  private BigDecimal minimum;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  @javax.annotation.Nullable
  private BigDecimal maximum;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FA("FA"),
    
    FM("FM"),
    
    PM("PM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_PLUS_COST = "plusCost";
  @SerializedName(SERIALIZED_NAME_PLUS_COST)
  @javax.annotation.Nullable
  private Boolean plusCost;

  public static final String SERIALIZED_NAME_TICKET_CHARGE = "ticketCharge";
  @SerializedName(SERIALIZED_NAME_TICKET_CHARGE)
  @javax.annotation.Nullable
  private BigDecimal ticketCharge;

  public CommissionMarkupType() {
  }

  public CommissionMarkupType stairs(@javax.annotation.Nullable List<MarkupStaircaseType> stairs) {
    this.stairs = stairs;
    return this;
  }

  public CommissionMarkupType addStairsItem(MarkupStaircaseType stairsItem) {
    if (this.stairs == null) {
      this.stairs = new ArrayList<>();
    }
    this.stairs.add(stairsItem);
    return this;
  }

  /**
   * Get stairs
   * @return stairs
   */
  @javax.annotation.Nullable
  public List<MarkupStaircaseType> getStairs() {
    return stairs;
  }

  public void setStairs(@javax.annotation.Nullable List<MarkupStaircaseType> stairs) {
    this.stairs = stairs;
  }


  public CommissionMarkupType code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public CommissionMarkupType minimum(@javax.annotation.Nullable BigDecimal minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Get minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimum() {
    return minimum;
  }

  public void setMinimum(@javax.annotation.Nullable BigDecimal minimum) {
    this.minimum = minimum;
  }


  public CommissionMarkupType maximum(@javax.annotation.Nullable BigDecimal maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Get maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public BigDecimal getMaximum() {
    return maximum;
  }

  public void setMaximum(@javax.annotation.Nullable BigDecimal maximum) {
    this.maximum = maximum;
  }


  public CommissionMarkupType type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public CommissionMarkupType amount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
  }


  public CommissionMarkupType plusCost(@javax.annotation.Nullable Boolean plusCost) {
    this.plusCost = plusCost;
    return this;
  }

  /**
   * Get plusCost
   * @return plusCost
   */
  @javax.annotation.Nullable
  public Boolean getPlusCost() {
    return plusCost;
  }

  public void setPlusCost(@javax.annotation.Nullable Boolean plusCost) {
    this.plusCost = plusCost;
  }


  public CommissionMarkupType ticketCharge(@javax.annotation.Nullable BigDecimal ticketCharge) {
    this.ticketCharge = ticketCharge;
    return this;
  }

  /**
   * Get ticketCharge
   * @return ticketCharge
   */
  @javax.annotation.Nullable
  public BigDecimal getTicketCharge() {
    return ticketCharge;
  }

  public void setTicketCharge(@javax.annotation.Nullable BigDecimal ticketCharge) {
    this.ticketCharge = ticketCharge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommissionMarkupType commissionMarkupType = (CommissionMarkupType) o;
    return Objects.equals(this.stairs, commissionMarkupType.stairs) &&
        Objects.equals(this.code, commissionMarkupType.code) &&
        Objects.equals(this.minimum, commissionMarkupType.minimum) &&
        Objects.equals(this.maximum, commissionMarkupType.maximum) &&
        Objects.equals(this.type, commissionMarkupType.type) &&
        Objects.equals(this.amount, commissionMarkupType.amount) &&
        Objects.equals(this.plusCost, commissionMarkupType.plusCost) &&
        Objects.equals(this.ticketCharge, commissionMarkupType.ticketCharge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stairs, code, minimum, maximum, type, amount, plusCost, ticketCharge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommissionMarkupType {\n");
    sb.append("    stairs: ").append(toIndentedString(stairs)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    plusCost: ").append(toIndentedString(plusCost)).append("\n");
    sb.append("    ticketCharge: ").append(toIndentedString(ticketCharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stairs");
    openapiFields.add("code");
    openapiFields.add("minimum");
    openapiFields.add("maximum");
    openapiFields.add("type");
    openapiFields.add("amount");
    openapiFields.add("plusCost");
    openapiFields.add("ticketCharge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommissionMarkupType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommissionMarkupType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommissionMarkupType is not found in the empty JSON string", CommissionMarkupType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommissionMarkupType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommissionMarkupType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("stairs") != null && !jsonObj.get("stairs").isJsonNull()) {
        JsonArray jsonArraystairs = jsonObj.getAsJsonArray("stairs");
        if (jsonArraystairs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stairs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stairs` to be an array in the JSON string but got `%s`", jsonObj.get("stairs").toString()));
          }

          // validate the optional field `stairs` (array)
          for (int i = 0; i < jsonArraystairs.size(); i++) {
            MarkupStaircaseType.validateJsonElement(jsonArraystairs.get(i));
          };
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommissionMarkupType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommissionMarkupType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommissionMarkupType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommissionMarkupType.class));

       return (TypeAdapter<T>) new TypeAdapter<CommissionMarkupType>() {
           @Override
           public void write(JsonWriter out, CommissionMarkupType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommissionMarkupType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommissionMarkupType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommissionMarkupType
   * @throws IOException if the JSON string is invalid with respect to CommissionMarkupType
   */
  public static CommissionMarkupType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommissionMarkupType.class);
  }

  /**
   * Convert an instance of CommissionMarkupType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

