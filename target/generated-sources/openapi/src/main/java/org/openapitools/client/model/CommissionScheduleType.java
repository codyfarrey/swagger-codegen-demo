/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommissionMarkupType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommissionScheduleType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class CommissionScheduleType {
  public static final String SERIALIZED_NAME_MARKUPS = "markups";
  @SerializedName(SERIALIZED_NAME_MARKUPS)
  @javax.annotation.Nullable
  private List<CommissionMarkupType> markups = new ArrayList<>();

  /**
   * Gets or Sets pricingStructure
   */
  @JsonAdapter(PricingStructureEnum.Adapter.class)
  public enum PricingStructureEnum {
    FIXED("FIXED"),
    
    TIERED("TIERED");

    private String value;

    PricingStructureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingStructureEnum fromValue(String value) {
      for (PricingStructureEnum b : PricingStructureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingStructureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingStructureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingStructureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingStructureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingStructureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_STRUCTURE = "pricingStructure";
  @SerializedName(SERIALIZED_NAME_PRICING_STRUCTURE)
  @javax.annotation.Nullable
  private PricingStructureEnum pricingStructure;

  public CommissionScheduleType() {
  }

  public CommissionScheduleType markups(@javax.annotation.Nullable List<CommissionMarkupType> markups) {
    this.markups = markups;
    return this;
  }

  public CommissionScheduleType addMarkupsItem(CommissionMarkupType markupsItem) {
    if (this.markups == null) {
      this.markups = new ArrayList<>();
    }
    this.markups.add(markupsItem);
    return this;
  }

  /**
   * Get markups
   * @return markups
   */
  @javax.annotation.Nullable
  public List<CommissionMarkupType> getMarkups() {
    return markups;
  }

  public void setMarkups(@javax.annotation.Nullable List<CommissionMarkupType> markups) {
    this.markups = markups;
  }


  public CommissionScheduleType pricingStructure(@javax.annotation.Nullable PricingStructureEnum pricingStructure) {
    this.pricingStructure = pricingStructure;
    return this;
  }

  /**
   * Get pricingStructure
   * @return pricingStructure
   */
  @javax.annotation.Nullable
  public PricingStructureEnum getPricingStructure() {
    return pricingStructure;
  }

  public void setPricingStructure(@javax.annotation.Nullable PricingStructureEnum pricingStructure) {
    this.pricingStructure = pricingStructure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommissionScheduleType commissionScheduleType = (CommissionScheduleType) o;
    return Objects.equals(this.markups, commissionScheduleType.markups) &&
        Objects.equals(this.pricingStructure, commissionScheduleType.pricingStructure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(markups, pricingStructure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommissionScheduleType {\n");
    sb.append("    markups: ").append(toIndentedString(markups)).append("\n");
    sb.append("    pricingStructure: ").append(toIndentedString(pricingStructure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("markups");
    openapiFields.add("pricingStructure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommissionScheduleType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommissionScheduleType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommissionScheduleType is not found in the empty JSON string", CommissionScheduleType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommissionScheduleType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommissionScheduleType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("markups") != null && !jsonObj.get("markups").isJsonNull()) {
        JsonArray jsonArraymarkups = jsonObj.getAsJsonArray("markups");
        if (jsonArraymarkups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markups` to be an array in the JSON string but got `%s`", jsonObj.get("markups").toString()));
          }

          // validate the optional field `markups` (array)
          for (int i = 0; i < jsonArraymarkups.size(); i++) {
            CommissionMarkupType.validateJsonElement(jsonArraymarkups.get(i));
          };
        }
      }
      if ((jsonObj.get("pricingStructure") != null && !jsonObj.get("pricingStructure").isJsonNull()) && !jsonObj.get("pricingStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingStructure").toString()));
      }
      // validate the optional field `pricingStructure`
      if (jsonObj.get("pricingStructure") != null && !jsonObj.get("pricingStructure").isJsonNull()) {
        PricingStructureEnum.validateJsonElement(jsonObj.get("pricingStructure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommissionScheduleType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommissionScheduleType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommissionScheduleType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommissionScheduleType.class));

       return (TypeAdapter<T>) new TypeAdapter<CommissionScheduleType>() {
           @Override
           public void write(JsonWriter out, CommissionScheduleType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommissionScheduleType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommissionScheduleType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommissionScheduleType
   * @throws IOException if the JSON string is invalid with respect to CommissionScheduleType
   */
  public static CommissionScheduleType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommissionScheduleType.class);
  }

  /**
   * Convert an instance of CommissionScheduleType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

