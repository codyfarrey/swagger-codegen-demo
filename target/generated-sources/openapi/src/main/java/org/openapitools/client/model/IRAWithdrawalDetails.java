/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRAWithdrawalDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IRAWithdrawalDetails {
  /**
   * Gets or Sets distributionType
   */
  @JsonAdapter(DistributionTypeEnum.Adapter.class)
  public enum DistributionTypeEnum {
    NORMAL("NORMAL"),
    
    EARLY("EARLY"),
    
    EARLY_EXCEPT("EARLY_EXCEPT"),
    
    DEATH("DEATH"),
    
    DISABILITY("DISABILITY"),
    
    EXCESS_CONTRIB("EXCESS_CONTRIB");

    private String value;

    DistributionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DistributionTypeEnum fromValue(String value) {
      for (DistributionTypeEnum b : DistributionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DistributionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DistributionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DistributionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DistributionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DistributionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISTRIBUTION_TYPE = "distributionType";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_TYPE)
  @javax.annotation.Nullable
  private DistributionTypeEnum distributionType;

  public static final String SERIALIZED_NAME_EXCESS_CONTRIB_YR = "excessContribYr";
  @SerializedName(SERIALIZED_NAME_EXCESS_CONTRIB_YR)
  @javax.annotation.Nullable
  private Integer excessContribYr;

  public static final String SERIALIZED_NAME_FED_TAX_RATE = "fedTaxRate";
  @SerializedName(SERIALIZED_NAME_FED_TAX_RATE)
  @javax.annotation.Nullable
  private BigDecimal fedTaxRate;

  public static final String SERIALIZED_NAME_LEGAL_RESIDENCE_STATE = "legalResidenceState";
  @SerializedName(SERIALIZED_NAME_LEGAL_RESIDENCE_STATE)
  @javax.annotation.Nullable
  private String legalResidenceState;

  public static final String SERIALIZED_NAME_STATE_TAX_RATE = "stateTaxRate";
  @SerializedName(SERIALIZED_NAME_STATE_TAX_RATE)
  @javax.annotation.Nullable
  private BigDecimal stateTaxRate;

  public IRAWithdrawalDetails() {
  }

  public IRAWithdrawalDetails distributionType(@javax.annotation.Nullable DistributionTypeEnum distributionType) {
    this.distributionType = distributionType;
    return this;
  }

  /**
   * Get distributionType
   * @return distributionType
   */
  @javax.annotation.Nullable
  public DistributionTypeEnum getDistributionType() {
    return distributionType;
  }

  public void setDistributionType(@javax.annotation.Nullable DistributionTypeEnum distributionType) {
    this.distributionType = distributionType;
  }


  public IRAWithdrawalDetails excessContribYr(@javax.annotation.Nullable Integer excessContribYr) {
    this.excessContribYr = excessContribYr;
    return this;
  }

  /**
   * Get excessContribYr
   * @return excessContribYr
   */
  @javax.annotation.Nullable
  public Integer getExcessContribYr() {
    return excessContribYr;
  }

  public void setExcessContribYr(@javax.annotation.Nullable Integer excessContribYr) {
    this.excessContribYr = excessContribYr;
  }


  public IRAWithdrawalDetails fedTaxRate(@javax.annotation.Nullable BigDecimal fedTaxRate) {
    this.fedTaxRate = fedTaxRate;
    return this;
  }

  /**
   * Get fedTaxRate
   * @return fedTaxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getFedTaxRate() {
    return fedTaxRate;
  }

  public void setFedTaxRate(@javax.annotation.Nullable BigDecimal fedTaxRate) {
    this.fedTaxRate = fedTaxRate;
  }


  public IRAWithdrawalDetails legalResidenceState(@javax.annotation.Nullable String legalResidenceState) {
    this.legalResidenceState = legalResidenceState;
    return this;
  }

  /**
   * Get legalResidenceState
   * @return legalResidenceState
   */
  @javax.annotation.Nullable
  public String getLegalResidenceState() {
    return legalResidenceState;
  }

  public void setLegalResidenceState(@javax.annotation.Nullable String legalResidenceState) {
    this.legalResidenceState = legalResidenceState;
  }


  public IRAWithdrawalDetails stateTaxRate(@javax.annotation.Nullable BigDecimal stateTaxRate) {
    this.stateTaxRate = stateTaxRate;
    return this;
  }

  /**
   * Get stateTaxRate
   * @return stateTaxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getStateTaxRate() {
    return stateTaxRate;
  }

  public void setStateTaxRate(@javax.annotation.Nullable BigDecimal stateTaxRate) {
    this.stateTaxRate = stateTaxRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRAWithdrawalDetails irAWithdrawalDetails = (IRAWithdrawalDetails) o;
    return Objects.equals(this.distributionType, irAWithdrawalDetails.distributionType) &&
        Objects.equals(this.excessContribYr, irAWithdrawalDetails.excessContribYr) &&
        Objects.equals(this.fedTaxRate, irAWithdrawalDetails.fedTaxRate) &&
        Objects.equals(this.legalResidenceState, irAWithdrawalDetails.legalResidenceState) &&
        Objects.equals(this.stateTaxRate, irAWithdrawalDetails.stateTaxRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributionType, excessContribYr, fedTaxRate, legalResidenceState, stateTaxRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRAWithdrawalDetails {\n");
    sb.append("    distributionType: ").append(toIndentedString(distributionType)).append("\n");
    sb.append("    excessContribYr: ").append(toIndentedString(excessContribYr)).append("\n");
    sb.append("    fedTaxRate: ").append(toIndentedString(fedTaxRate)).append("\n");
    sb.append("    legalResidenceState: ").append(toIndentedString(legalResidenceState)).append("\n");
    sb.append("    stateTaxRate: ").append(toIndentedString(stateTaxRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distributionType");
    openapiFields.add("excessContribYr");
    openapiFields.add("fedTaxRate");
    openapiFields.add("legalResidenceState");
    openapiFields.add("stateTaxRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRAWithdrawalDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRAWithdrawalDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRAWithdrawalDetails is not found in the empty JSON string", IRAWithdrawalDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRAWithdrawalDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRAWithdrawalDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("distributionType") != null && !jsonObj.get("distributionType").isJsonNull()) && !jsonObj.get("distributionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributionType").toString()));
      }
      // validate the optional field `distributionType`
      if (jsonObj.get("distributionType") != null && !jsonObj.get("distributionType").isJsonNull()) {
        DistributionTypeEnum.validateJsonElement(jsonObj.get("distributionType"));
      }
      if ((jsonObj.get("legalResidenceState") != null && !jsonObj.get("legalResidenceState").isJsonNull()) && !jsonObj.get("legalResidenceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalResidenceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalResidenceState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRAWithdrawalDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRAWithdrawalDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRAWithdrawalDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRAWithdrawalDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<IRAWithdrawalDetails>() {
           @Override
           public void write(JsonWriter out, IRAWithdrawalDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRAWithdrawalDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRAWithdrawalDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRAWithdrawalDetails
   * @throws IOException if the JSON string is invalid with respect to IRAWithdrawalDetails
   */
  public static IRAWithdrawalDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRAWithdrawalDetails.class);
  }

  /**
   * Convert an instance of IRAWithdrawalDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

