/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddRelationship;
import org.openapitools.client.model.DeleteRelationship;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Individual;
import org.openapitools.client.model.LegalEntity;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Trust;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class UpdateEntity {
  public static final String SERIALIZED_NAME_ADD_RELATIONSHIPS = "addRelationships";
  @SerializedName(SERIALIZED_NAME_ADD_RELATIONSHIPS)
  @javax.annotation.Nullable
  private List<AddRelationship> addRelationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE_RELATIONSHIPS = "deleteRelationships";
  @SerializedName(SERIALIZED_NAME_DELETE_RELATIONSHIPS)
  @javax.annotation.Nullable
  private List<DeleteRelationship> deleteRelationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDIVIDUAL = "individual";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL)
  @javax.annotation.Nullable
  private Individual individual;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  @javax.annotation.Nullable
  private LegalEntity legalEntity;

  public static final String SERIALIZED_NAME_TRUST = "trust";
  @SerializedName(SERIALIZED_NAME_TRUST)
  @javax.annotation.Nullable
  private Trust trust;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private Organization organization;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nullable
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_IB_ENTITY_ID = "ibEntityId";
  @SerializedName(SERIALIZED_NAME_IB_ENTITY_ID)
  @javax.annotation.Nullable
  private Integer ibEntityId;

  public UpdateEntity() {
  }

  public UpdateEntity addRelationships(@javax.annotation.Nullable List<AddRelationship> addRelationships) {
    this.addRelationships = addRelationships;
    return this;
  }

  public UpdateEntity addAddRelationshipsItem(AddRelationship addRelationshipsItem) {
    if (this.addRelationships == null) {
      this.addRelationships = new ArrayList<>();
    }
    this.addRelationships.add(addRelationshipsItem);
    return this;
  }

  /**
   * Get addRelationships
   * @return addRelationships
   */
  @javax.annotation.Nullable
  public List<AddRelationship> getAddRelationships() {
    return addRelationships;
  }

  public void setAddRelationships(@javax.annotation.Nullable List<AddRelationship> addRelationships) {
    this.addRelationships = addRelationships;
  }


  public UpdateEntity deleteRelationships(@javax.annotation.Nullable List<DeleteRelationship> deleteRelationships) {
    this.deleteRelationships = deleteRelationships;
    return this;
  }

  public UpdateEntity addDeleteRelationshipsItem(DeleteRelationship deleteRelationshipsItem) {
    if (this.deleteRelationships == null) {
      this.deleteRelationships = new ArrayList<>();
    }
    this.deleteRelationships.add(deleteRelationshipsItem);
    return this;
  }

  /**
   * Get deleteRelationships
   * @return deleteRelationships
   */
  @javax.annotation.Nullable
  public List<DeleteRelationship> getDeleteRelationships() {
    return deleteRelationships;
  }

  public void setDeleteRelationships(@javax.annotation.Nullable List<DeleteRelationship> deleteRelationships) {
    this.deleteRelationships = deleteRelationships;
  }


  public UpdateEntity individual(@javax.annotation.Nullable Individual individual) {
    this.individual = individual;
    return this;
  }

  /**
   * Get individual
   * @return individual
   */
  @javax.annotation.Nullable
  public Individual getIndividual() {
    return individual;
  }

  public void setIndividual(@javax.annotation.Nullable Individual individual) {
    this.individual = individual;
  }


  public UpdateEntity legalEntity(@javax.annotation.Nullable LegalEntity legalEntity) {
    this.legalEntity = legalEntity;
    return this;
  }

  /**
   * Get legalEntity
   * @return legalEntity
   */
  @javax.annotation.Nullable
  public LegalEntity getLegalEntity() {
    return legalEntity;
  }

  public void setLegalEntity(@javax.annotation.Nullable LegalEntity legalEntity) {
    this.legalEntity = legalEntity;
  }


  public UpdateEntity trust(@javax.annotation.Nullable Trust trust) {
    this.trust = trust;
    return this;
  }

  /**
   * Get trust
   * @return trust
   */
  @javax.annotation.Nullable
  public Trust getTrust() {
    return trust;
  }

  public void setTrust(@javax.annotation.Nullable Trust trust) {
    this.trust = trust;
  }


  public UpdateEntity organization(@javax.annotation.Nullable Organization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public Organization getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable Organization organization) {
    this.organization = organization;
  }


  public UpdateEntity documents(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
    return this;
  }

  public UpdateEntity addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<Document> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
  }


  public UpdateEntity ibEntityId(@javax.annotation.Nullable Integer ibEntityId) {
    this.ibEntityId = ibEntityId;
    return this;
  }

  /**
   * Get ibEntityId
   * @return ibEntityId
   */
  @javax.annotation.Nullable
  public Integer getIbEntityId() {
    return ibEntityId;
  }

  public void setIbEntityId(@javax.annotation.Nullable Integer ibEntityId) {
    this.ibEntityId = ibEntityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEntity updateEntity = (UpdateEntity) o;
    return Objects.equals(this.addRelationships, updateEntity.addRelationships) &&
        Objects.equals(this.deleteRelationships, updateEntity.deleteRelationships) &&
        Objects.equals(this.individual, updateEntity.individual) &&
        Objects.equals(this.legalEntity, updateEntity.legalEntity) &&
        Objects.equals(this.trust, updateEntity.trust) &&
        Objects.equals(this.organization, updateEntity.organization) &&
        Objects.equals(this.documents, updateEntity.documents) &&
        Objects.equals(this.ibEntityId, updateEntity.ibEntityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addRelationships, deleteRelationships, individual, legalEntity, trust, organization, documents, ibEntityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEntity {\n");
    sb.append("    addRelationships: ").append(toIndentedString(addRelationships)).append("\n");
    sb.append("    deleteRelationships: ").append(toIndentedString(deleteRelationships)).append("\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    trust: ").append(toIndentedString(trust)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    ibEntityId: ").append(toIndentedString(ibEntityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addRelationships");
    openapiFields.add("deleteRelationships");
    openapiFields.add("individual");
    openapiFields.add("legalEntity");
    openapiFields.add("trust");
    openapiFields.add("organization");
    openapiFields.add("documents");
    openapiFields.add("ibEntityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEntity is not found in the empty JSON string", UpdateEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addRelationships") != null && !jsonObj.get("addRelationships").isJsonNull()) {
        JsonArray jsonArrayaddRelationships = jsonObj.getAsJsonArray("addRelationships");
        if (jsonArrayaddRelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addRelationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("addRelationships").toString()));
          }

          // validate the optional field `addRelationships` (array)
          for (int i = 0; i < jsonArrayaddRelationships.size(); i++) {
            AddRelationship.validateJsonElement(jsonArrayaddRelationships.get(i));
          };
        }
      }
      if (jsonObj.get("deleteRelationships") != null && !jsonObj.get("deleteRelationships").isJsonNull()) {
        JsonArray jsonArraydeleteRelationships = jsonObj.getAsJsonArray("deleteRelationships");
        if (jsonArraydeleteRelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deleteRelationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deleteRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("deleteRelationships").toString()));
          }

          // validate the optional field `deleteRelationships` (array)
          for (int i = 0; i < jsonArraydeleteRelationships.size(); i++) {
            DeleteRelationship.validateJsonElement(jsonArraydeleteRelationships.get(i));
          };
        }
      }
      // validate the optional field `individual`
      if (jsonObj.get("individual") != null && !jsonObj.get("individual").isJsonNull()) {
        Individual.validateJsonElement(jsonObj.get("individual"));
      }
      // validate the optional field `legalEntity`
      if (jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) {
        LegalEntity.validateJsonElement(jsonObj.get("legalEntity"));
      }
      // validate the optional field `trust`
      if (jsonObj.get("trust") != null && !jsonObj.get("trust").isJsonNull()) {
        Trust.validateJsonElement(jsonObj.get("trust"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("organization"));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            Document.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEntity>() {
           @Override
           public void write(JsonWriter out, UpdateEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEntity
   * @throws IOException if the JSON string is invalid with respect to UpdateEntity
   */
  public static UpdateEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEntity.class);
  }

  /**
   * Convert an instance of UpdateEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

