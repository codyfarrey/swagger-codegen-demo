/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DVPInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class DVPInstruction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_I_D = "externalAccountID";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_I_D)
  @javax.annotation.Nullable
  private String externalAccountID;

  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "accountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  @javax.annotation.Nullable
  private String accountID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DTCID("DTCID"),
    
    NSCC("NSCC"),
    
    CMTA("CMTA"),
    
    GUS("GUS"),
    
    OCCSSF("OCCSSF");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  /**
   * Gets or Sets role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    E("E"),
    
    C("C"),
    
    B("B");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private RoleEnum role;

  public static final String SERIALIZED_NAME_AGENT_I_D = "agentID";
  @SerializedName(SERIALIZED_NAME_AGENT_I_D)
  @javax.annotation.Nullable
  private String agentID;

  public static final String SERIALIZED_NAME_FIRM_I_D = "firmID";
  @SerializedName(SERIALIZED_NAME_FIRM_I_D)
  @javax.annotation.Nullable
  private String firmID;

  public static final String SERIALIZED_NAME_AGENT_NAME = "agentName";
  @SerializedName(SERIALIZED_NAME_AGENT_NAME)
  @javax.annotation.Nullable
  private String agentName;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  @javax.annotation.Nullable
  private String accountName;

  public static final String SERIALIZED_NAME_DAY_DO_I_D = "dayDoID";
  @SerializedName(SERIALIZED_NAME_DAY_DO_I_D)
  @javax.annotation.Nullable
  private String dayDoID;

  /**
   * Gets or Sets txGroupCode
   */
  @JsonAdapter(TxGroupCodeEnum.Adapter.class)
  public enum TxGroupCodeEnum {
    G("G"),
    
    Z("Z"),
    
    R("R"),
    
    N("N");

    private String value;

    TxGroupCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TxGroupCodeEnum fromValue(String value) {
      for (TxGroupCodeEnum b : TxGroupCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TxGroupCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TxGroupCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TxGroupCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TxGroupCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TxGroupCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TX_GROUP_CODE = "txGroupCode";
  @SerializedName(SERIALIZED_NAME_TX_GROUP_CODE)
  @javax.annotation.Nullable
  private TxGroupCodeEnum txGroupCode;

  public static final String SERIALIZED_NAME_BROKER_CODE = "brokerCode";
  @SerializedName(SERIALIZED_NAME_BROKER_CODE)
  @javax.annotation.Nullable
  private String brokerCode;

  /**
   * Gets or Sets assetClass
   */
  @JsonAdapter(AssetClassEnum.Adapter.class)
  public enum AssetClassEnum {
    BILL("BILL"),
    
    BOND("BOND"),
    
    CASH("CASH"),
    
    CFD("CFD"),
    
    COMB("COMB"),
    
    FOP("FOP"),
    
    FUND("FUND"),
    
    FUT("FUT"),
    
    OPT("OPT"),
    
    SSF("SSF"),
    
    STK("STK"),
    
    WAR("WAR"),
    
    MRGN("MRGN");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetClassEnum fromValue(String value) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  @javax.annotation.Nullable
  private AssetClassEnum assetClass;

  /**
   * Gets or Sets exchange
   */
  @JsonAdapter(ExchangeEnum.Adapter.class)
  public enum ExchangeEnum {
    NYSE("NYSE"),
    
    AMEX("AMEX"),
    
    NASDAQ("NASDAQ"),
    
    CBOE("CBOE"),
    
    ISE("ISE"),
    
    BOX("BOX"),
    
    PHLX("PHLX"),
    
    PSE("PSE");

    private String value;

    ExchangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExchangeEnum fromValue(String value) {
      for (ExchangeEnum b : ExchangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExchangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExchangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExchangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExchangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExchangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private ExchangeEnum exchange;

  public static final String SERIALIZED_NAME_PREPAY_TAX = "prepayTax";
  @SerializedName(SERIALIZED_NAME_PREPAY_TAX)
  @javax.annotation.Nullable
  private Boolean prepayTax;

  public static final String SERIALIZED_NAME_PREPAY_COMMISSION = "prepayCommission";
  @SerializedName(SERIALIZED_NAME_PREPAY_COMMISSION)
  @javax.annotation.Nullable
  private Boolean prepayCommission;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  @javax.annotation.Nullable
  private LocalDate expiry;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  @javax.annotation.Nullable
  private Boolean _default;

  public DVPInstruction() {
  }

  public DVPInstruction id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public DVPInstruction externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public DVPInstruction externalAccountID(@javax.annotation.Nullable String externalAccountID) {
    this.externalAccountID = externalAccountID;
    return this;
  }

  /**
   * Get externalAccountID
   * @return externalAccountID
   */
  @javax.annotation.Nullable
  public String getExternalAccountID() {
    return externalAccountID;
  }

  public void setExternalAccountID(@javax.annotation.Nullable String externalAccountID) {
    this.externalAccountID = externalAccountID;
  }


  public DVPInstruction accountID(@javax.annotation.Nullable String accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * Get accountID
   * @return accountID
   */
  @javax.annotation.Nullable
  public String getAccountID() {
    return accountID;
  }

  public void setAccountID(@javax.annotation.Nullable String accountID) {
    this.accountID = accountID;
  }


  public DVPInstruction name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DVPInstruction type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public DVPInstruction role(@javax.annotation.Nullable RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable RoleEnum role) {
    this.role = role;
  }


  public DVPInstruction agentID(@javax.annotation.Nullable String agentID) {
    this.agentID = agentID;
    return this;
  }

  /**
   * Get agentID
   * @return agentID
   */
  @javax.annotation.Nullable
  public String getAgentID() {
    return agentID;
  }

  public void setAgentID(@javax.annotation.Nullable String agentID) {
    this.agentID = agentID;
  }


  public DVPInstruction firmID(@javax.annotation.Nullable String firmID) {
    this.firmID = firmID;
    return this;
  }

  /**
   * Get firmID
   * @return firmID
   */
  @javax.annotation.Nullable
  public String getFirmID() {
    return firmID;
  }

  public void setFirmID(@javax.annotation.Nullable String firmID) {
    this.firmID = firmID;
  }


  public DVPInstruction agentName(@javax.annotation.Nullable String agentName) {
    this.agentName = agentName;
    return this;
  }

  /**
   * Get agentName
   * @return agentName
   */
  @javax.annotation.Nullable
  public String getAgentName() {
    return agentName;
  }

  public void setAgentName(@javax.annotation.Nullable String agentName) {
    this.agentName = agentName;
  }


  public DVPInstruction accountName(@javax.annotation.Nullable String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(@javax.annotation.Nullable String accountName) {
    this.accountName = accountName;
  }


  public DVPInstruction dayDoID(@javax.annotation.Nullable String dayDoID) {
    this.dayDoID = dayDoID;
    return this;
  }

  /**
   * Get dayDoID
   * @return dayDoID
   */
  @javax.annotation.Nullable
  public String getDayDoID() {
    return dayDoID;
  }

  public void setDayDoID(@javax.annotation.Nullable String dayDoID) {
    this.dayDoID = dayDoID;
  }


  public DVPInstruction txGroupCode(@javax.annotation.Nullable TxGroupCodeEnum txGroupCode) {
    this.txGroupCode = txGroupCode;
    return this;
  }

  /**
   * Get txGroupCode
   * @return txGroupCode
   */
  @javax.annotation.Nullable
  public TxGroupCodeEnum getTxGroupCode() {
    return txGroupCode;
  }

  public void setTxGroupCode(@javax.annotation.Nullable TxGroupCodeEnum txGroupCode) {
    this.txGroupCode = txGroupCode;
  }


  public DVPInstruction brokerCode(@javax.annotation.Nullable String brokerCode) {
    this.brokerCode = brokerCode;
    return this;
  }

  /**
   * Get brokerCode
   * @return brokerCode
   */
  @javax.annotation.Nullable
  public String getBrokerCode() {
    return brokerCode;
  }

  public void setBrokerCode(@javax.annotation.Nullable String brokerCode) {
    this.brokerCode = brokerCode;
  }


  public DVPInstruction assetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
    return this;
  }

  /**
   * Get assetClass
   * @return assetClass
   */
  @javax.annotation.Nullable
  public AssetClassEnum getAssetClass() {
    return assetClass;
  }

  public void setAssetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
  }


  public DVPInstruction exchange(@javax.annotation.Nullable ExchangeEnum exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * Get exchange
   * @return exchange
   */
  @javax.annotation.Nullable
  public ExchangeEnum getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable ExchangeEnum exchange) {
    this.exchange = exchange;
  }


  public DVPInstruction prepayTax(@javax.annotation.Nullable Boolean prepayTax) {
    this.prepayTax = prepayTax;
    return this;
  }

  /**
   * Get prepayTax
   * @return prepayTax
   */
  @javax.annotation.Nullable
  public Boolean getPrepayTax() {
    return prepayTax;
  }

  public void setPrepayTax(@javax.annotation.Nullable Boolean prepayTax) {
    this.prepayTax = prepayTax;
  }


  public DVPInstruction prepayCommission(@javax.annotation.Nullable Boolean prepayCommission) {
    this.prepayCommission = prepayCommission;
    return this;
  }

  /**
   * Get prepayCommission
   * @return prepayCommission
   */
  @javax.annotation.Nullable
  public Boolean getPrepayCommission() {
    return prepayCommission;
  }

  public void setPrepayCommission(@javax.annotation.Nullable Boolean prepayCommission) {
    this.prepayCommission = prepayCommission;
  }


  public DVPInstruction expiry(@javax.annotation.Nullable LocalDate expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Get expiry
   * @return expiry
   */
  @javax.annotation.Nullable
  public LocalDate getExpiry() {
    return expiry;
  }

  public void setExpiry(@javax.annotation.Nullable LocalDate expiry) {
    this.expiry = expiry;
  }


  public DVPInstruction _default(@javax.annotation.Nullable Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(@javax.annotation.Nullable Boolean _default) {
    this._default = _default;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DVPInstruction dvPInstruction = (DVPInstruction) o;
    return Objects.equals(this.id, dvPInstruction.id) &&
        Objects.equals(this.externalId, dvPInstruction.externalId) &&
        Objects.equals(this.externalAccountID, dvPInstruction.externalAccountID) &&
        Objects.equals(this.accountID, dvPInstruction.accountID) &&
        Objects.equals(this.name, dvPInstruction.name) &&
        Objects.equals(this.type, dvPInstruction.type) &&
        Objects.equals(this.role, dvPInstruction.role) &&
        Objects.equals(this.agentID, dvPInstruction.agentID) &&
        Objects.equals(this.firmID, dvPInstruction.firmID) &&
        Objects.equals(this.agentName, dvPInstruction.agentName) &&
        Objects.equals(this.accountName, dvPInstruction.accountName) &&
        Objects.equals(this.dayDoID, dvPInstruction.dayDoID) &&
        Objects.equals(this.txGroupCode, dvPInstruction.txGroupCode) &&
        Objects.equals(this.brokerCode, dvPInstruction.brokerCode) &&
        Objects.equals(this.assetClass, dvPInstruction.assetClass) &&
        Objects.equals(this.exchange, dvPInstruction.exchange) &&
        Objects.equals(this.prepayTax, dvPInstruction.prepayTax) &&
        Objects.equals(this.prepayCommission, dvPInstruction.prepayCommission) &&
        Objects.equals(this.expiry, dvPInstruction.expiry) &&
        Objects.equals(this._default, dvPInstruction._default);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, externalAccountID, accountID, name, type, role, agentID, firmID, agentName, accountName, dayDoID, txGroupCode, brokerCode, assetClass, exchange, prepayTax, prepayCommission, expiry, _default);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DVPInstruction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    externalAccountID: ").append(toIndentedString(externalAccountID)).append("\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    agentID: ").append(toIndentedString(agentID)).append("\n");
    sb.append("    firmID: ").append(toIndentedString(firmID)).append("\n");
    sb.append("    agentName: ").append(toIndentedString(agentName)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    dayDoID: ").append(toIndentedString(dayDoID)).append("\n");
    sb.append("    txGroupCode: ").append(toIndentedString(txGroupCode)).append("\n");
    sb.append("    brokerCode: ").append(toIndentedString(brokerCode)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    prepayTax: ").append(toIndentedString(prepayTax)).append("\n");
    sb.append("    prepayCommission: ").append(toIndentedString(prepayCommission)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("externalAccountID");
    openapiFields.add("accountID");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("role");
    openapiFields.add("agentID");
    openapiFields.add("firmID");
    openapiFields.add("agentName");
    openapiFields.add("accountName");
    openapiFields.add("dayDoID");
    openapiFields.add("txGroupCode");
    openapiFields.add("brokerCode");
    openapiFields.add("assetClass");
    openapiFields.add("exchange");
    openapiFields.add("prepayTax");
    openapiFields.add("prepayCommission");
    openapiFields.add("expiry");
    openapiFields.add("default");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DVPInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DVPInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DVPInstruction is not found in the empty JSON string", DVPInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DVPInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DVPInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("externalAccountID") != null && !jsonObj.get("externalAccountID").isJsonNull()) && !jsonObj.get("externalAccountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccountID").toString()));
      }
      if ((jsonObj.get("accountID") != null && !jsonObj.get("accountID").isJsonNull()) && !jsonObj.get("accountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountID").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("agentID") != null && !jsonObj.get("agentID").isJsonNull()) && !jsonObj.get("agentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentID").toString()));
      }
      if ((jsonObj.get("firmID") != null && !jsonObj.get("firmID").isJsonNull()) && !jsonObj.get("firmID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmID").toString()));
      }
      if ((jsonObj.get("agentName") != null && !jsonObj.get("agentName").isJsonNull()) && !jsonObj.get("agentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentName").toString()));
      }
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("dayDoID") != null && !jsonObj.get("dayDoID").isJsonNull()) && !jsonObj.get("dayDoID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayDoID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayDoID").toString()));
      }
      if ((jsonObj.get("txGroupCode") != null && !jsonObj.get("txGroupCode").isJsonNull()) && !jsonObj.get("txGroupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txGroupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txGroupCode").toString()));
      }
      // validate the optional field `txGroupCode`
      if (jsonObj.get("txGroupCode") != null && !jsonObj.get("txGroupCode").isJsonNull()) {
        TxGroupCodeEnum.validateJsonElement(jsonObj.get("txGroupCode"));
      }
      if ((jsonObj.get("brokerCode") != null && !jsonObj.get("brokerCode").isJsonNull()) && !jsonObj.get("brokerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerCode").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      // validate the optional field `assetClass`
      if (jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) {
        AssetClassEnum.validateJsonElement(jsonObj.get("assetClass"));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      // validate the optional field `exchange`
      if (jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) {
        ExchangeEnum.validateJsonElement(jsonObj.get("exchange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DVPInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DVPInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DVPInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DVPInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<DVPInstruction>() {
           @Override
           public void write(JsonWriter out, DVPInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DVPInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DVPInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DVPInstruction
   * @throws IOException if the JSON string is invalid with respect to DVPInstruction
   */
  public static DVPInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DVPInstruction.class);
  }

  /**
   * Convert an instance of DVPInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

