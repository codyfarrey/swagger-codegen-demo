/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EddaInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class EddaInstruction {
  public static final String SERIALIZED_NAME_CLIENT_INSTRUCTION_ID = "clientInstructionId";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal clientInstructionId;

  public static final String SERIALIZED_NAME_BANK_INSTRUCTION_NAME = "bankInstructionName";
  @SerializedName(SERIALIZED_NAME_BANK_INSTRUCTION_NAME)
  @javax.annotation.Nonnull
  private String bankInstructionName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nonnull
  private String currency;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_BANK_BRANCH_CODE = "bankBranchCode";
  @SerializedName(SERIALIZED_NAME_BANK_BRANCH_CODE)
  @javax.annotation.Nonnull
  private String bankBranchCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  @javax.annotation.Nonnull
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_BANK_CLEARING_CODE = "bankClearingCode";
  @SerializedName(SERIALIZED_NAME_BANK_CLEARING_CODE)
  @javax.annotation.Nonnull
  private String bankClearingCode;

  /**
   * Gets or Sets debtorIdentificationDocumentType
   */
  @JsonAdapter(DebtorIdentificationDocumentTypeEnum.Adapter.class)
  public enum DebtorIdentificationDocumentTypeEnum {
    HK_ID("hkId"),
    
    PASSPORT("passport"),
    
    CHINA_ID("chinaId"),
    
    HK_MACAO_ENTRY_PERMIT("hkMacaoEntryPermit");

    private String value;

    DebtorIdentificationDocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DebtorIdentificationDocumentTypeEnum fromValue(String value) {
      for (DebtorIdentificationDocumentTypeEnum b : DebtorIdentificationDocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DebtorIdentificationDocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DebtorIdentificationDocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DebtorIdentificationDocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DebtorIdentificationDocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DebtorIdentificationDocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEBTOR_IDENTIFICATION_DOCUMENT_TYPE = "debtorIdentificationDocumentType";
  @SerializedName(SERIALIZED_NAME_DEBTOR_IDENTIFICATION_DOCUMENT_TYPE)
  @javax.annotation.Nonnull
  private DebtorIdentificationDocumentTypeEnum debtorIdentificationDocumentType;

  public EddaInstruction() {
  }

  public EddaInstruction clientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
    return this;
  }

  /**
   * Get clientInstructionId
   * @return clientInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getClientInstructionId() {
    return clientInstructionId;
  }

  public void setClientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
  }


  public EddaInstruction bankInstructionName(@javax.annotation.Nonnull String bankInstructionName) {
    this.bankInstructionName = bankInstructionName;
    return this;
  }

  /**
   * Get bankInstructionName
   * @return bankInstructionName
   */
  @javax.annotation.Nonnull
  public String getBankInstructionName() {
    return bankInstructionName;
  }

  public void setBankInstructionName(@javax.annotation.Nonnull String bankInstructionName) {
    this.bankInstructionName = bankInstructionName;
  }


  public EddaInstruction currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public EddaInstruction accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public EddaInstruction bankBranchCode(@javax.annotation.Nonnull String bankBranchCode) {
    this.bankBranchCode = bankBranchCode;
    return this;
  }

  /**
   * Get bankBranchCode
   * @return bankBranchCode
   */
  @javax.annotation.Nonnull
  public String getBankBranchCode() {
    return bankBranchCode;
  }

  public void setBankBranchCode(@javax.annotation.Nonnull String bankBranchCode) {
    this.bankBranchCode = bankBranchCode;
  }


  public EddaInstruction bankAccountNumber(@javax.annotation.Nonnull String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

  /**
   * Get bankAccountNumber
   * @return bankAccountNumber
   */
  @javax.annotation.Nonnull
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(@javax.annotation.Nonnull String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public EddaInstruction bankClearingCode(@javax.annotation.Nonnull String bankClearingCode) {
    this.bankClearingCode = bankClearingCode;
    return this;
  }

  /**
   * Get bankClearingCode
   * @return bankClearingCode
   */
  @javax.annotation.Nonnull
  public String getBankClearingCode() {
    return bankClearingCode;
  }

  public void setBankClearingCode(@javax.annotation.Nonnull String bankClearingCode) {
    this.bankClearingCode = bankClearingCode;
  }


  public EddaInstruction debtorIdentificationDocumentType(@javax.annotation.Nonnull DebtorIdentificationDocumentTypeEnum debtorIdentificationDocumentType) {
    this.debtorIdentificationDocumentType = debtorIdentificationDocumentType;
    return this;
  }

  /**
   * Get debtorIdentificationDocumentType
   * @return debtorIdentificationDocumentType
   */
  @javax.annotation.Nonnull
  public DebtorIdentificationDocumentTypeEnum getDebtorIdentificationDocumentType() {
    return debtorIdentificationDocumentType;
  }

  public void setDebtorIdentificationDocumentType(@javax.annotation.Nonnull DebtorIdentificationDocumentTypeEnum debtorIdentificationDocumentType) {
    this.debtorIdentificationDocumentType = debtorIdentificationDocumentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EddaInstruction eddaInstruction = (EddaInstruction) o;
    return Objects.equals(this.clientInstructionId, eddaInstruction.clientInstructionId) &&
        Objects.equals(this.bankInstructionName, eddaInstruction.bankInstructionName) &&
        Objects.equals(this.currency, eddaInstruction.currency) &&
        Objects.equals(this.accountId, eddaInstruction.accountId) &&
        Objects.equals(this.bankBranchCode, eddaInstruction.bankBranchCode) &&
        Objects.equals(this.bankAccountNumber, eddaInstruction.bankAccountNumber) &&
        Objects.equals(this.bankClearingCode, eddaInstruction.bankClearingCode) &&
        Objects.equals(this.debtorIdentificationDocumentType, eddaInstruction.debtorIdentificationDocumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInstructionId, bankInstructionName, currency, accountId, bankBranchCode, bankAccountNumber, bankClearingCode, debtorIdentificationDocumentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EddaInstruction {\n");
    sb.append("    clientInstructionId: ").append(toIndentedString(clientInstructionId)).append("\n");
    sb.append("    bankInstructionName: ").append(toIndentedString(bankInstructionName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    bankBranchCode: ").append(toIndentedString(bankBranchCode)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankClearingCode: ").append(toIndentedString(bankClearingCode)).append("\n");
    sb.append("    debtorIdentificationDocumentType: ").append(toIndentedString(debtorIdentificationDocumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInstructionId");
    openapiFields.add("bankInstructionName");
    openapiFields.add("currency");
    openapiFields.add("accountId");
    openapiFields.add("bankBranchCode");
    openapiFields.add("bankAccountNumber");
    openapiFields.add("bankClearingCode");
    openapiFields.add("debtorIdentificationDocumentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientInstructionId");
    openapiRequiredFields.add("bankInstructionName");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("bankBranchCode");
    openapiRequiredFields.add("bankAccountNumber");
    openapiRequiredFields.add("bankClearingCode");
    openapiRequiredFields.add("debtorIdentificationDocumentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EddaInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EddaInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EddaInstruction is not found in the empty JSON string", EddaInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EddaInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EddaInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EddaInstruction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bankInstructionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankInstructionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankInstructionName").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("bankBranchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBranchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBranchCode").toString()));
      }
      if (!jsonObj.get("bankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumber").toString()));
      }
      if (!jsonObj.get("bankClearingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankClearingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankClearingCode").toString()));
      }
      if (!jsonObj.get("debtorIdentificationDocumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorIdentificationDocumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorIdentificationDocumentType").toString()));
      }
      // validate the required field `debtorIdentificationDocumentType`
      DebtorIdentificationDocumentTypeEnum.validateJsonElement(jsonObj.get("debtorIdentificationDocumentType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EddaInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EddaInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EddaInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EddaInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<EddaInstruction>() {
           @Override
           public void write(JsonWriter out, EddaInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EddaInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EddaInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EddaInstruction
   * @throws IOException if the JSON string is invalid with respect to EddaInstruction
   */
  public static EddaInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EddaInstruction.class);
  }

  /**
   * Convert an instance of EddaInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

