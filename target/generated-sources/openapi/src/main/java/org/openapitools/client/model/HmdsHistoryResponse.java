/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SingleHistoricalBar;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object containing the requested historical data and related metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class HmdsHistoryResponse {
  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private String startTime;

  public static final String SERIALIZED_NAME_START_TIME_VAL = "startTimeVal";
  @SerializedName(SERIALIZED_NAME_START_TIME_VAL)
  @javax.annotation.Nullable
  private Integer startTimeVal;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private String endTime;

  public static final String SERIALIZED_NAME_END_TIME_VAL = "endTimeVal";
  @SerializedName(SERIALIZED_NAME_END_TIME_VAL)
  @javax.annotation.Nullable
  private Integer endTimeVal;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private List<SingleHistoricalBar> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  @javax.annotation.Nullable
  private Integer points;

  public static final String SERIALIZED_NAME_MKT_DATA_DELAY = "mktDataDelay";
  @SerializedName(SERIALIZED_NAME_MKT_DATA_DELAY)
  @javax.annotation.Nullable
  private Integer mktDataDelay;

  public HmdsHistoryResponse() {
  }

  public HmdsHistoryResponse startTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * UTC date and time of the start (chronologically earlier) of the complete period in format YYYYMMDD-hh:mm:ss.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
  }


  public HmdsHistoryResponse startTimeVal(@javax.annotation.Nullable Integer startTimeVal) {
    this.startTimeVal = startTimeVal;
    return this;
  }

  /**
   * Unix timestamp of the start (chronologically earlier) of the complete period.
   * @return startTimeVal
   */
  @javax.annotation.Nullable
  public Integer getStartTimeVal() {
    return startTimeVal;
  }

  public void setStartTimeVal(@javax.annotation.Nullable Integer startTimeVal) {
    this.startTimeVal = startTimeVal;
  }


  public HmdsHistoryResponse endTime(@javax.annotation.Nullable String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * UTC date and time of the end (chronologically later) of the complete period in format YYYYMMDD-hh:mm:ss.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable String endTime) {
    this.endTime = endTime;
  }


  public HmdsHistoryResponse endTimeVal(@javax.annotation.Nullable Integer endTimeVal) {
    this.endTimeVal = endTimeVal;
    return this;
  }

  /**
   * Unix timestamp of the end (chronologically later) of the complete period.
   * @return endTimeVal
   */
  @javax.annotation.Nullable
  public Integer getEndTimeVal() {
    return endTimeVal;
  }

  public void setEndTimeVal(@javax.annotation.Nullable Integer endTimeVal) {
    this.endTimeVal = endTimeVal;
  }


  public HmdsHistoryResponse data(@javax.annotation.Nullable List<SingleHistoricalBar> data) {
    this.data = data;
    return this;
  }

  public HmdsHistoryResponse addDataItem(SingleHistoricalBar dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Array containing OHLC bars for the requested period.
   * @return data
   */
  @javax.annotation.Nullable
  public List<SingleHistoricalBar> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable List<SingleHistoricalBar> data) {
    this.data = data;
  }


  public HmdsHistoryResponse points(@javax.annotation.Nullable Integer points) {
    this.points = points;
    return this;
  }

  /**
   * Count of the number of bars returned in the data array.
   * @return points
   */
  @javax.annotation.Nullable
  public Integer getPoints() {
    return points;
  }

  public void setPoints(@javax.annotation.Nullable Integer points) {
    this.points = points;
  }


  public HmdsHistoryResponse mktDataDelay(@javax.annotation.Nullable Integer mktDataDelay) {
    this.mktDataDelay = mktDataDelay;
    return this;
  }

  /**
   * Number of milliseconds taken to satisfy this historical data request.
   * @return mktDataDelay
   */
  @javax.annotation.Nullable
  public Integer getMktDataDelay() {
    return mktDataDelay;
  }

  public void setMktDataDelay(@javax.annotation.Nullable Integer mktDataDelay) {
    this.mktDataDelay = mktDataDelay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HmdsHistoryResponse hmdsHistoryResponse = (HmdsHistoryResponse) o;
    return Objects.equals(this.startTime, hmdsHistoryResponse.startTime) &&
        Objects.equals(this.startTimeVal, hmdsHistoryResponse.startTimeVal) &&
        Objects.equals(this.endTime, hmdsHistoryResponse.endTime) &&
        Objects.equals(this.endTimeVal, hmdsHistoryResponse.endTimeVal) &&
        Objects.equals(this.data, hmdsHistoryResponse.data) &&
        Objects.equals(this.points, hmdsHistoryResponse.points) &&
        Objects.equals(this.mktDataDelay, hmdsHistoryResponse.mktDataDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, startTimeVal, endTime, endTimeVal, data, points, mktDataDelay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HmdsHistoryResponse {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startTimeVal: ").append(toIndentedString(startTimeVal)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endTimeVal: ").append(toIndentedString(endTimeVal)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    mktDataDelay: ").append(toIndentedString(mktDataDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startTime");
    openapiFields.add("startTimeVal");
    openapiFields.add("endTime");
    openapiFields.add("endTimeVal");
    openapiFields.add("data");
    openapiFields.add("points");
    openapiFields.add("mktDataDelay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HmdsHistoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HmdsHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HmdsHistoryResponse is not found in the empty JSON string", HmdsHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HmdsHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HmdsHistoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            SingleHistoricalBar.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HmdsHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HmdsHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HmdsHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HmdsHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HmdsHistoryResponse>() {
           @Override
           public void write(JsonWriter out, HmdsHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HmdsHistoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HmdsHistoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HmdsHistoryResponse
   * @throws IOException if the JSON string is invalid with respect to HmdsHistoryResponse
   */
  public static HmdsHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HmdsHistoryResponse.class);
  }

  /**
   * Convert an instance of HmdsHistoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

