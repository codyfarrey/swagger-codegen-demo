/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TradingScheduleInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TradingScheduleInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TRADE_VENUE_ID = "tradeVenueId";
  @SerializedName(SERIALIZED_NAME_TRADE_VENUE_ID)
  @javax.annotation.Nullable
  private String tradeVenueId;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  @javax.annotation.Nullable
  private List<String> schedules = new ArrayList<>();

  public TradingScheduleInner() {
  }

  public TradingScheduleInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Exchange parameter id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TradingScheduleInner tradeVenueId(@javax.annotation.Nullable String tradeVenueId) {
    this.tradeVenueId = tradeVenueId;
    return this;
  }

  /**
   * Reference on a trade venue of given exchange parameter
   * @return tradeVenueId
   */
  @javax.annotation.Nullable
  public String getTradeVenueId() {
    return tradeVenueId;
  }

  public void setTradeVenueId(@javax.annotation.Nullable String tradeVenueId) {
    this.tradeVenueId = tradeVenueId;
  }


  public TradingScheduleInner exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * short exchange name
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public TradingScheduleInner description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * exchange description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TradingScheduleInner timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * References the time zone corresponding to the listed dates and times.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public TradingScheduleInner schedules(@javax.annotation.Nullable List<String> schedules) {
    this.schedules = schedules;
    return this;
  }

  public TradingScheduleInner addSchedulesItem(String schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * Always contains at least one ‘tradingTime’ and zero or more ‘sessionTime’ tags
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<String> getSchedules() {
    return schedules;
  }

  public void setSchedules(@javax.annotation.Nullable List<String> schedules) {
    this.schedules = schedules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradingScheduleInner tradingScheduleInner = (TradingScheduleInner) o;
    return Objects.equals(this.id, tradingScheduleInner.id) &&
        Objects.equals(this.tradeVenueId, tradingScheduleInner.tradeVenueId) &&
        Objects.equals(this.exchange, tradingScheduleInner.exchange) &&
        Objects.equals(this.description, tradingScheduleInner.description) &&
        Objects.equals(this.timezone, tradingScheduleInner.timezone) &&
        Objects.equals(this.schedules, tradingScheduleInner.schedules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tradeVenueId, exchange, description, timezone, schedules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradingScheduleInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tradeVenueId: ").append(toIndentedString(tradeVenueId)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("tradeVenueId");
    openapiFields.add("exchange");
    openapiFields.add("description");
    openapiFields.add("timezone");
    openapiFields.add("schedules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradingScheduleInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradingScheduleInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradingScheduleInner is not found in the empty JSON string", TradingScheduleInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradingScheduleInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradingScheduleInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tradeVenueId") != null && !jsonObj.get("tradeVenueId").isJsonNull()) && !jsonObj.get("tradeVenueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeVenueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeVenueId").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull() && !jsonObj.get("schedules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradingScheduleInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradingScheduleInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradingScheduleInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradingScheduleInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TradingScheduleInner>() {
           @Override
           public void write(JsonWriter out, TradingScheduleInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradingScheduleInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradingScheduleInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradingScheduleInner
   * @throws IOException if the JSON string is invalid with respect to TradingScheduleInner
   */
  public static TradingScheduleInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradingScheduleInner.class);
  }

  /**
   * Convert an instance of TradingScheduleInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

