/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object containing details of a single execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TradesResponseInner {
  public static final String SERIALIZED_NAME_EXECUTION_ID = "execution_id";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  @javax.annotation.Nullable
  private String executionId;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  /**
   * Indicates whether the order is supported by IB&#39;s Tax Optimization tool.
   */
  @JsonAdapter(SupportsTaxOptEnum.Adapter.class)
  public enum SupportsTaxOptEnum {
    _0("0"),
    
    _1("1");

    private String value;

    SupportsTaxOptEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportsTaxOptEnum fromValue(String value) {
      for (SupportsTaxOptEnum b : SupportsTaxOptEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportsTaxOptEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportsTaxOptEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportsTaxOptEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportsTaxOptEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportsTaxOptEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTS_TAX_OPT = "supports_tax_opt";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_TAX_OPT)
  @javax.annotation.Nullable
  private SupportsTaxOptEnum supportsTaxOpt;

  /**
   * Side of the execution.
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    B("B"),
    
    S("S");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  @javax.annotation.Nullable
  private SideEnum side;

  public static final String SERIALIZED_NAME_ORDER_DESCRIPTION = "order_description";
  @SerializedName(SERIALIZED_NAME_ORDER_DESCRIPTION)
  @javax.annotation.Nullable
  private String orderDescription;

  public static final String SERIALIZED_NAME_TRADE_TIME = "trade_time";
  @SerializedName(SERIALIZED_NAME_TRADE_TIME)
  @javax.annotation.Nullable
  private String tradeTime;

  public static final String SERIALIZED_NAME_TRADE_TIME_R = "trade_time_r";
  @SerializedName(SERIALIZED_NAME_TRADE_TIME_R)
  @javax.annotation.Nullable
  private Integer tradeTimeR;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private BigDecimal size;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private String price;

  public static final String SERIALIZED_NAME_ORDER_REF = "order_ref";
  @SerializedName(SERIALIZED_NAME_ORDER_REF)
  @javax.annotation.Nullable
  private String orderRef;

  public static final String SERIALIZED_NAME_SUBMITTER = "submitter";
  @SerializedName(SERIALIZED_NAME_SUBMITTER)
  @javax.annotation.Nullable
  private String submitter;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  @javax.annotation.Nullable
  private String commission;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "net_amount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal netAmount;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  @javax.annotation.Nullable
  private String accountCode;

  public static final String SERIALIZED_NAME_ACCOUNT_ALLOCATION_NAME = "account_allocation_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ALLOCATION_NAME)
  @javax.annotation.Nullable
  private String accountAllocationName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_CONTRACT_DESCRIPTION1 = "contract_description_1";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESCRIPTION1)
  @javax.annotation.Nullable
  private String contractDescription1;

  /**
   * IB asset class identifier.
   */
  @JsonAdapter(SecTypeEnum.Adapter.class)
  public enum SecTypeEnum {
    STK("STK"),
    
    OPT("OPT"),
    
    FUT("FUT"),
    
    FOP("FOP"),
    
    CASH("CASH"),
    
    CRYPTO("CRYPTO"),
    
    BOND("BOND"),
    
    WAR("WAR"),
    
    FUND("FUND");

    private String value;

    SecTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecTypeEnum fromValue(String value) {
      for (SecTypeEnum b : SecTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEC_TYPE = "sec_type";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private SecTypeEnum secType;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listing_exchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public static final String SERIALIZED_NAME_CONID_EX = "conidEx";
  @SerializedName(SERIALIZED_NAME_CONID_EX)
  @javax.annotation.Nullable
  private String conidEx;

  public static final String SERIALIZED_NAME_CLEARING_ID = "clearing_id";
  @SerializedName(SERIALIZED_NAME_CLEARING_ID)
  @javax.annotation.Nullable
  private String clearingId;

  public static final String SERIALIZED_NAME_CLEARING_NAME = "clearing_name";
  @SerializedName(SERIALIZED_NAME_CLEARING_NAME)
  @javax.annotation.Nullable
  private String clearingName;

  /**
   * Indicates whether the trade is the result of a liquidiation by IB.
   */
  @JsonAdapter(LiquidationTradeEnum.Adapter.class)
  public enum LiquidationTradeEnum {
    _0("0"),
    
    _1("1");

    private String value;

    LiquidationTradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LiquidationTradeEnum fromValue(String value) {
      for (LiquidationTradeEnum b : LiquidationTradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LiquidationTradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LiquidationTradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LiquidationTradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LiquidationTradeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LiquidationTradeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIQUIDATION_TRADE = "liquidation_trade";
  @SerializedName(SERIALIZED_NAME_LIQUIDATION_TRADE)
  @javax.annotation.Nullable
  private LiquidationTradeEnum liquidationTrade;

  /**
   * Indicates whether the order ticket is an Event Trading order.
   */
  @JsonAdapter(IsEventTradingEnum.Adapter.class)
  public enum IsEventTradingEnum {
    _0("0"),
    
    _1("1");

    private String value;

    IsEventTradingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsEventTradingEnum fromValue(String value) {
      for (IsEventTradingEnum b : IsEventTradingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsEventTradingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsEventTradingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsEventTradingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsEventTradingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IsEventTradingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IS_EVENT_TRADING = "is_event_trading";
  @SerializedName(SERIALIZED_NAME_IS_EVENT_TRADING)
  @javax.annotation.Nullable
  private IsEventTradingEnum isEventTrading;

  public TradesResponseInner() {
  }

  public TradesResponseInner executionId(@javax.annotation.Nullable String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * IB-assigned execution identifier.
   * @return executionId
   */
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(@javax.annotation.Nullable String executionId) {
    this.executionId = executionId;
  }


  public TradesResponseInner symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Symbol of the instrument involved in the execution.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public TradesResponseInner supportsTaxOpt(@javax.annotation.Nullable SupportsTaxOptEnum supportsTaxOpt) {
    this.supportsTaxOpt = supportsTaxOpt;
    return this;
  }

  /**
   * Indicates whether the order is supported by IB&#39;s Tax Optimization tool.
   * @return supportsTaxOpt
   */
  @javax.annotation.Nullable
  public SupportsTaxOptEnum getSupportsTaxOpt() {
    return supportsTaxOpt;
  }

  public void setSupportsTaxOpt(@javax.annotation.Nullable SupportsTaxOptEnum supportsTaxOpt) {
    this.supportsTaxOpt = supportsTaxOpt;
  }


  public TradesResponseInner side(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Side of the execution.
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
  }


  public TradesResponseInner orderDescription(@javax.annotation.Nullable String orderDescription) {
    this.orderDescription = orderDescription;
    return this;
  }

  /**
   * Human-readable description of the outcome of the execution.
   * @return orderDescription
   */
  @javax.annotation.Nullable
  public String getOrderDescription() {
    return orderDescription;
  }

  public void setOrderDescription(@javax.annotation.Nullable String orderDescription) {
    this.orderDescription = orderDescription;
  }


  public TradesResponseInner tradeTime(@javax.annotation.Nullable String tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

  /**
   * UTC date and time of the execution in format YYYYMMDD-hh:mm:ss.
   * @return tradeTime
   */
  @javax.annotation.Nullable
  public String getTradeTime() {
    return tradeTime;
  }

  public void setTradeTime(@javax.annotation.Nullable String tradeTime) {
    this.tradeTime = tradeTime;
  }


  public TradesResponseInner tradeTimeR(@javax.annotation.Nullable Integer tradeTimeR) {
    this.tradeTimeR = tradeTimeR;
    return this;
  }

  /**
   * Unix timestamp of the execution time in milliseconds.
   * @return tradeTimeR
   */
  @javax.annotation.Nullable
  public Integer getTradeTimeR() {
    return tradeTimeR;
  }

  public void setTradeTimeR(@javax.annotation.Nullable Integer tradeTimeR) {
    this.tradeTimeR = tradeTimeR;
  }


  public TradesResponseInner size(@javax.annotation.Nullable BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the execution in units of the instrument.
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable BigDecimal size) {
    this.size = size;
  }


  public TradesResponseInner price(@javax.annotation.Nullable String price) {
    this.price = price;
    return this;
  }

  /**
   * The price at which the execution occurred.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable String price) {
    this.price = price;
  }


  public TradesResponseInner orderRef(@javax.annotation.Nullable String orderRef) {
    this.orderRef = orderRef;
    return this;
  }

  /**
   * The client-provided customer order identifier. Specified via cOID during order submission in the Web API.
   * @return orderRef
   */
  @javax.annotation.Nullable
  public String getOrderRef() {
    return orderRef;
  }

  public void setOrderRef(@javax.annotation.Nullable String orderRef) {
    this.orderRef = orderRef;
  }


  public TradesResponseInner submitter(@javax.annotation.Nullable String submitter) {
    this.submitter = submitter;
    return this;
  }

  /**
   * The IB username that originated the order ticket against which the execution occurred.
   * @return submitter
   */
  @javax.annotation.Nullable
  public String getSubmitter() {
    return submitter;
  }

  public void setSubmitter(@javax.annotation.Nullable String submitter) {
    this.submitter = submitter;
  }


  public TradesResponseInner exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * The exchange or other venue on which the execution occurred.
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public TradesResponseInner commission(@javax.annotation.Nullable String commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Commissions incurred by the execution. May also include
   * @return commission
   */
  @javax.annotation.Nullable
  public String getCommission() {
    return commission;
  }

  public void setCommission(@javax.annotation.Nullable String commission) {
    this.commission = commission;
  }


  public TradesResponseInner netAmount(@javax.annotation.Nullable BigDecimal netAmount) {
    this.netAmount = netAmount;
    return this;
  }

  /**
   * net_amount
   * @return netAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getNetAmount() {
    return netAmount;
  }

  public void setNetAmount(@javax.annotation.Nullable BigDecimal netAmount) {
    this.netAmount = netAmount;
  }


  public TradesResponseInner account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * The IB account ID of the account that received the execution.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public TradesResponseInner accountCode(@javax.annotation.Nullable String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The IB account ID of the account that received the execution.
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(@javax.annotation.Nullable String accountCode) {
    this.accountCode = accountCode;
  }


  public TradesResponseInner accountAllocationName(@javax.annotation.Nullable String accountAllocationName) {
    this.accountAllocationName = accountAllocationName;
    return this;
  }

  /**
   * The IB account ID of the account that received the execution.
   * @return accountAllocationName
   */
  @javax.annotation.Nullable
  public String getAccountAllocationName() {
    return accountAllocationName;
  }

  public void setAccountAllocationName(@javax.annotation.Nullable String accountAllocationName) {
    this.accountAllocationName = accountAllocationName;
  }


  public TradesResponseInner companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of business associated with instrument, or otherwise description of instrument.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public TradesResponseInner contractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
    return this;
  }

  /**
   * Human-readable description of the order&#39;s instrument.
   * @return contractDescription1
   */
  @javax.annotation.Nullable
  public String getContractDescription1() {
    return contractDescription1;
  }

  public void setContractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
  }


  public TradesResponseInner secType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
    return this;
  }

  /**
   * IB asset class identifier.
   * @return secType
   */
  @javax.annotation.Nullable
  public SecTypeEnum getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
  }


  public TradesResponseInner listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * The primary exchange on which the instrument is listed.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public TradesResponseInner conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Contract ID of the order&#39;s instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }


  public TradesResponseInner conidEx(@javax.annotation.Nullable String conidEx) {
    this.conidEx = conidEx;
    return this;
  }

  /**
   * Contract ID and routing destination in format 123456@EXCHANGE.
   * @return conidEx
   */
  @javax.annotation.Nullable
  public String getConidEx() {
    return conidEx;
  }

  public void setConidEx(@javax.annotation.Nullable String conidEx) {
    this.conidEx = conidEx;
  }


  public TradesResponseInner clearingId(@javax.annotation.Nullable String clearingId) {
    this.clearingId = clearingId;
    return this;
  }

  /**
   * Identifier of the firm clearing the trade. Value is \&quot;IB\&quot; if account is cleared by Interactive Brokers.
   * @return clearingId
   */
  @javax.annotation.Nullable
  public String getClearingId() {
    return clearingId;
  }

  public void setClearingId(@javax.annotation.Nullable String clearingId) {
    this.clearingId = clearingId;
  }


  public TradesResponseInner clearingName(@javax.annotation.Nullable String clearingName) {
    this.clearingName = clearingName;
    return this;
  }

  /**
   * Name of the firm clearing the trade. Value is \&quot;IB\&quot; if account is cleared by Interactive Brokers.
   * @return clearingName
   */
  @javax.annotation.Nullable
  public String getClearingName() {
    return clearingName;
  }

  public void setClearingName(@javax.annotation.Nullable String clearingName) {
    this.clearingName = clearingName;
  }


  public TradesResponseInner liquidationTrade(@javax.annotation.Nullable LiquidationTradeEnum liquidationTrade) {
    this.liquidationTrade = liquidationTrade;
    return this;
  }

  /**
   * Indicates whether the trade is the result of a liquidiation by IB.
   * @return liquidationTrade
   */
  @javax.annotation.Nullable
  public LiquidationTradeEnum getLiquidationTrade() {
    return liquidationTrade;
  }

  public void setLiquidationTrade(@javax.annotation.Nullable LiquidationTradeEnum liquidationTrade) {
    this.liquidationTrade = liquidationTrade;
  }


  public TradesResponseInner isEventTrading(@javax.annotation.Nullable IsEventTradingEnum isEventTrading) {
    this.isEventTrading = isEventTrading;
    return this;
  }

  /**
   * Indicates whether the order ticket is an Event Trading order.
   * @return isEventTrading
   */
  @javax.annotation.Nullable
  public IsEventTradingEnum getIsEventTrading() {
    return isEventTrading;
  }

  public void setIsEventTrading(@javax.annotation.Nullable IsEventTradingEnum isEventTrading) {
    this.isEventTrading = isEventTrading;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradesResponseInner tradesResponseInner = (TradesResponseInner) o;
    return Objects.equals(this.executionId, tradesResponseInner.executionId) &&
        Objects.equals(this.symbol, tradesResponseInner.symbol) &&
        Objects.equals(this.supportsTaxOpt, tradesResponseInner.supportsTaxOpt) &&
        Objects.equals(this.side, tradesResponseInner.side) &&
        Objects.equals(this.orderDescription, tradesResponseInner.orderDescription) &&
        Objects.equals(this.tradeTime, tradesResponseInner.tradeTime) &&
        Objects.equals(this.tradeTimeR, tradesResponseInner.tradeTimeR) &&
        Objects.equals(this.size, tradesResponseInner.size) &&
        Objects.equals(this.price, tradesResponseInner.price) &&
        Objects.equals(this.orderRef, tradesResponseInner.orderRef) &&
        Objects.equals(this.submitter, tradesResponseInner.submitter) &&
        Objects.equals(this.exchange, tradesResponseInner.exchange) &&
        Objects.equals(this.commission, tradesResponseInner.commission) &&
        Objects.equals(this.netAmount, tradesResponseInner.netAmount) &&
        Objects.equals(this.account, tradesResponseInner.account) &&
        Objects.equals(this.accountCode, tradesResponseInner.accountCode) &&
        Objects.equals(this.accountAllocationName, tradesResponseInner.accountAllocationName) &&
        Objects.equals(this.companyName, tradesResponseInner.companyName) &&
        Objects.equals(this.contractDescription1, tradesResponseInner.contractDescription1) &&
        Objects.equals(this.secType, tradesResponseInner.secType) &&
        Objects.equals(this.listingExchange, tradesResponseInner.listingExchange) &&
        Objects.equals(this.conid, tradesResponseInner.conid) &&
        Objects.equals(this.conidEx, tradesResponseInner.conidEx) &&
        Objects.equals(this.clearingId, tradesResponseInner.clearingId) &&
        Objects.equals(this.clearingName, tradesResponseInner.clearingName) &&
        Objects.equals(this.liquidationTrade, tradesResponseInner.liquidationTrade) &&
        Objects.equals(this.isEventTrading, tradesResponseInner.isEventTrading);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionId, symbol, supportsTaxOpt, side, orderDescription, tradeTime, tradeTimeR, size, price, orderRef, submitter, exchange, commission, netAmount, account, accountCode, accountAllocationName, companyName, contractDescription1, secType, listingExchange, conid, conidEx, clearingId, clearingName, liquidationTrade, isEventTrading);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradesResponseInner {\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    supportsTaxOpt: ").append(toIndentedString(supportsTaxOpt)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    orderDescription: ").append(toIndentedString(orderDescription)).append("\n");
    sb.append("    tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
    sb.append("    tradeTimeR: ").append(toIndentedString(tradeTimeR)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    orderRef: ").append(toIndentedString(orderRef)).append("\n");
    sb.append("    submitter: ").append(toIndentedString(submitter)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    accountAllocationName: ").append(toIndentedString(accountAllocationName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    contractDescription1: ").append(toIndentedString(contractDescription1)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    conidEx: ").append(toIndentedString(conidEx)).append("\n");
    sb.append("    clearingId: ").append(toIndentedString(clearingId)).append("\n");
    sb.append("    clearingName: ").append(toIndentedString(clearingName)).append("\n");
    sb.append("    liquidationTrade: ").append(toIndentedString(liquidationTrade)).append("\n");
    sb.append("    isEventTrading: ").append(toIndentedString(isEventTrading)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("execution_id");
    openapiFields.add("symbol");
    openapiFields.add("supports_tax_opt");
    openapiFields.add("side");
    openapiFields.add("order_description");
    openapiFields.add("trade_time");
    openapiFields.add("trade_time_r");
    openapiFields.add("size");
    openapiFields.add("price");
    openapiFields.add("order_ref");
    openapiFields.add("submitter");
    openapiFields.add("exchange");
    openapiFields.add("commission");
    openapiFields.add("net_amount");
    openapiFields.add("account");
    openapiFields.add("accountCode");
    openapiFields.add("account_allocation_name");
    openapiFields.add("company_name");
    openapiFields.add("contract_description_1");
    openapiFields.add("sec_type");
    openapiFields.add("listing_exchange");
    openapiFields.add("conid");
    openapiFields.add("conidEx");
    openapiFields.add("clearing_id");
    openapiFields.add("clearing_name");
    openapiFields.add("liquidation_trade");
    openapiFields.add("is_event_trading");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradesResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradesResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradesResponseInner is not found in the empty JSON string", TradesResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradesResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradesResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("execution_id") != null && !jsonObj.get("execution_id").isJsonNull()) && !jsonObj.get("execution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution_id").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("supports_tax_opt") != null && !jsonObj.get("supports_tax_opt").isJsonNull()) && !jsonObj.get("supports_tax_opt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supports_tax_opt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supports_tax_opt").toString()));
      }
      // validate the optional field `supports_tax_opt`
      if (jsonObj.get("supports_tax_opt") != null && !jsonObj.get("supports_tax_opt").isJsonNull()) {
        SupportsTaxOptEnum.validateJsonElement(jsonObj.get("supports_tax_opt"));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `side`
      if (jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("side"));
      }
      if ((jsonObj.get("order_description") != null && !jsonObj.get("order_description").isJsonNull()) && !jsonObj.get("order_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_description").toString()));
      }
      if ((jsonObj.get("trade_time") != null && !jsonObj.get("trade_time").isJsonNull()) && !jsonObj.get("trade_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trade_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trade_time").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("order_ref") != null && !jsonObj.get("order_ref").isJsonNull()) && !jsonObj.get("order_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_ref").toString()));
      }
      if ((jsonObj.get("submitter") != null && !jsonObj.get("submitter").isJsonNull()) && !jsonObj.get("submitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitter").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull()) && !jsonObj.get("commission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commission").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      if ((jsonObj.get("account_allocation_name") != null && !jsonObj.get("account_allocation_name").isJsonNull()) && !jsonObj.get("account_allocation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_allocation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_allocation_name").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("contract_description_1") != null && !jsonObj.get("contract_description_1").isJsonNull()) && !jsonObj.get("contract_description_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_description_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_description_1").toString()));
      }
      if ((jsonObj.get("sec_type") != null && !jsonObj.get("sec_type").isJsonNull()) && !jsonObj.get("sec_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sec_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sec_type").toString()));
      }
      // validate the optional field `sec_type`
      if (jsonObj.get("sec_type") != null && !jsonObj.get("sec_type").isJsonNull()) {
        SecTypeEnum.validateJsonElement(jsonObj.get("sec_type"));
      }
      if ((jsonObj.get("listing_exchange") != null && !jsonObj.get("listing_exchange").isJsonNull()) && !jsonObj.get("listing_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_exchange").toString()));
      }
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
      if ((jsonObj.get("conidEx") != null && !jsonObj.get("conidEx").isJsonNull()) && !jsonObj.get("conidEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidEx").toString()));
      }
      if ((jsonObj.get("clearing_id") != null && !jsonObj.get("clearing_id").isJsonNull()) && !jsonObj.get("clearing_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clearing_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clearing_id").toString()));
      }
      if ((jsonObj.get("clearing_name") != null && !jsonObj.get("clearing_name").isJsonNull()) && !jsonObj.get("clearing_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clearing_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clearing_name").toString()));
      }
      if ((jsonObj.get("liquidation_trade") != null && !jsonObj.get("liquidation_trade").isJsonNull()) && !jsonObj.get("liquidation_trade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidation_trade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidation_trade").toString()));
      }
      // validate the optional field `liquidation_trade`
      if (jsonObj.get("liquidation_trade") != null && !jsonObj.get("liquidation_trade").isJsonNull()) {
        LiquidationTradeEnum.validateJsonElement(jsonObj.get("liquidation_trade"));
      }
      if ((jsonObj.get("is_event_trading") != null && !jsonObj.get("is_event_trading").isJsonNull()) && !jsonObj.get("is_event_trading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_event_trading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_event_trading").toString()));
      }
      // validate the optional field `is_event_trading`
      if (jsonObj.get("is_event_trading") != null && !jsonObj.get("is_event_trading").isJsonNull()) {
        IsEventTradingEnum.validateJsonElement(jsonObj.get("is_event_trading"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradesResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradesResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradesResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradesResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TradesResponseInner>() {
           @Override
           public void write(JsonWriter out, TradesResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradesResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradesResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradesResponseInner
   * @throws IOException if the JSON string is invalid with respect to TradesResponseInner
   */
  public static TradesResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradesResponseInner.class);
  }

  /**
   * Convert an instance of TradesResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

