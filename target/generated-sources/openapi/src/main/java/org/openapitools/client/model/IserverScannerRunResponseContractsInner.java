/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IserverScannerRunResponseContractsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IserverScannerRunResponseContractsInner {
  public static final String SERIALIZED_NAME_SERVER_ID = "server_id";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  @javax.annotation.Nullable
  private String serverId;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "column_name";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  @javax.annotation.Nullable
  private String columnName;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_CONIDEX = "conidex";
  @SerializedName(SERIALIZED_NAME_CONIDEX)
  @javax.annotation.Nullable
  private String conidex;

  public static final String SERIALIZED_NAME_CON_ID = "con_id";
  @SerializedName(SERIALIZED_NAME_CON_ID)
  @javax.annotation.Nullable
  private Integer conId;

  public static final String SERIALIZED_NAME_AVAILABLE_CHART_PERIODS = "available_chart_periods";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CHART_PERIODS)
  @javax.annotation.Nullable
  private String availableChartPeriods;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_CONTRACT_DESCRIPTION1 = "contract_description_1";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESCRIPTION1)
  @javax.annotation.Nullable
  private String contractDescription1;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listing_exchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_SEC_TYPE = "sec_type";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private String secType;

  public IserverScannerRunResponseContractsInner() {
  }

  public IserverScannerRunResponseContractsInner serverId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Contract’s index in relation to the market scanner type’s sorting priority.
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
  }


  public IserverScannerRunResponseContractsInner columnName(@javax.annotation.Nullable String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * Always returned for the first contract.
   * @return columnName
   */
  @javax.annotation.Nullable
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(@javax.annotation.Nullable String columnName) {
    this.columnName = columnName;
  }


  public IserverScannerRunResponseContractsInner symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Returns the contract’s ticker symbol.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public IserverScannerRunResponseContractsInner conidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
    return this;
  }

  /**
   * Returns the contract ID of the contract.
   * @return conidex
   */
  @javax.annotation.Nullable
  public String getConidex() {
    return conidex;
  }

  public void setConidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
  }


  public IserverScannerRunResponseContractsInner conId(@javax.annotation.Nullable Integer conId) {
    this.conId = conId;
    return this;
  }

  /**
   * Returns the contract ID of the contract.
   * @return conId
   */
  @javax.annotation.Nullable
  public Integer getConId() {
    return conId;
  }

  public void setConId(@javax.annotation.Nullable Integer conId) {
    this.conId = conId;
  }


  public IserverScannerRunResponseContractsInner availableChartPeriods(@javax.annotation.Nullable String availableChartPeriods) {
    this.availableChartPeriods = availableChartPeriods;
    return this;
  }

  /**
   * Internal Use Only
   * @return availableChartPeriods
   */
  @javax.annotation.Nullable
  public String getAvailableChartPeriods() {
    return availableChartPeriods;
  }

  public void setAvailableChartPeriods(@javax.annotation.Nullable String availableChartPeriods) {
    this.availableChartPeriods = availableChartPeriods;
  }


  public IserverScannerRunResponseContractsInner companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Returns the company long name.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public IserverScannerRunResponseContractsInner contractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
    return this;
  }

  /**
   * For derivatives like Futures, the local symbol of the contract will be returned.
   * @return contractDescription1
   */
  @javax.annotation.Nullable
  public String getContractDescription1() {
    return contractDescription1;
  }

  public void setContractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
  }


  public IserverScannerRunResponseContractsInner listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Returns the primary listing exchange of the contract.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public IserverScannerRunResponseContractsInner secType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
    return this;
  }

  /**
   * Returns the security type of the contract.
   * @return secType
   */
  @javax.annotation.Nullable
  public String getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IserverScannerRunResponseContractsInner iserverScannerRunResponseContractsInner = (IserverScannerRunResponseContractsInner) o;
    return Objects.equals(this.serverId, iserverScannerRunResponseContractsInner.serverId) &&
        Objects.equals(this.columnName, iserverScannerRunResponseContractsInner.columnName) &&
        Objects.equals(this.symbol, iserverScannerRunResponseContractsInner.symbol) &&
        Objects.equals(this.conidex, iserverScannerRunResponseContractsInner.conidex) &&
        Objects.equals(this.conId, iserverScannerRunResponseContractsInner.conId) &&
        Objects.equals(this.availableChartPeriods, iserverScannerRunResponseContractsInner.availableChartPeriods) &&
        Objects.equals(this.companyName, iserverScannerRunResponseContractsInner.companyName) &&
        Objects.equals(this.contractDescription1, iserverScannerRunResponseContractsInner.contractDescription1) &&
        Objects.equals(this.listingExchange, iserverScannerRunResponseContractsInner.listingExchange) &&
        Objects.equals(this.secType, iserverScannerRunResponseContractsInner.secType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverId, columnName, symbol, conidex, conId, availableChartPeriods, companyName, contractDescription1, listingExchange, secType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IserverScannerRunResponseContractsInner {\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    conidex: ").append(toIndentedString(conidex)).append("\n");
    sb.append("    conId: ").append(toIndentedString(conId)).append("\n");
    sb.append("    availableChartPeriods: ").append(toIndentedString(availableChartPeriods)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    contractDescription1: ").append(toIndentedString(contractDescription1)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("server_id");
    openapiFields.add("column_name");
    openapiFields.add("symbol");
    openapiFields.add("conidex");
    openapiFields.add("con_id");
    openapiFields.add("available_chart_periods");
    openapiFields.add("company_name");
    openapiFields.add("contract_description_1");
    openapiFields.add("listing_exchange");
    openapiFields.add("sec_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IserverScannerRunResponseContractsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IserverScannerRunResponseContractsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IserverScannerRunResponseContractsInner is not found in the empty JSON string", IserverScannerRunResponseContractsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IserverScannerRunResponseContractsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IserverScannerRunResponseContractsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("server_id") != null && !jsonObj.get("server_id").isJsonNull()) && !jsonObj.get("server_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_id").toString()));
      }
      if ((jsonObj.get("column_name") != null && !jsonObj.get("column_name").isJsonNull()) && !jsonObj.get("column_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column_name").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("conidex") != null && !jsonObj.get("conidex").isJsonNull()) && !jsonObj.get("conidex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidex").toString()));
      }
      if ((jsonObj.get("available_chart_periods") != null && !jsonObj.get("available_chart_periods").isJsonNull()) && !jsonObj.get("available_chart_periods").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_chart_periods` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_chart_periods").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("contract_description_1") != null && !jsonObj.get("contract_description_1").isJsonNull()) && !jsonObj.get("contract_description_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_description_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_description_1").toString()));
      }
      if ((jsonObj.get("listing_exchange") != null && !jsonObj.get("listing_exchange").isJsonNull()) && !jsonObj.get("listing_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_exchange").toString()));
      }
      if ((jsonObj.get("sec_type") != null && !jsonObj.get("sec_type").isJsonNull()) && !jsonObj.get("sec_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sec_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sec_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IserverScannerRunResponseContractsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IserverScannerRunResponseContractsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IserverScannerRunResponseContractsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IserverScannerRunResponseContractsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<IserverScannerRunResponseContractsInner>() {
           @Override
           public void write(JsonWriter out, IserverScannerRunResponseContractsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IserverScannerRunResponseContractsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IserverScannerRunResponseContractsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IserverScannerRunResponseContractsInner
   * @throws IOException if the JSON string is invalid with respect to IserverScannerRunResponseContractsInner
   */
  public static IserverScannerRunResponseContractsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IserverScannerRunResponseContractsInner.class);
  }

  /**
   * Convert an instance of IserverScannerRunResponseContractsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

