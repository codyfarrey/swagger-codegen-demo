/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ACHInstruction;
import org.openapitools.client.model.AccountConfigurationType;
import org.openapitools.client.model.AccountRep;
import org.openapitools.client.model.AdvisorWrapFeesType;
import org.openapitools.client.model.CommissionConfig;
import org.openapitools.client.model.CommissionScheduleType;
import org.openapitools.client.model.CustodianType;
import org.openapitools.client.model.DVPInstruction;
import org.openapitools.client.model.DepositNotification;
import org.openapitools.client.model.ExchangeAccess;
import org.openapitools.client.model.ExtPositionsTransferType;
import org.openapitools.client.model.IRABeneficiariesType;
import org.openapitools.client.model.IRADecedent;
import org.openapitools.client.model.InterestMarkupType;
import org.openapitools.client.model.RecurringTransaction;
import org.openapitools.client.model.TradingLimits;
import org.openapitools.client.model.TradingPermission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_CONFIGURATION = "accountConfiguration";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CONFIGURATION)
  @javax.annotation.Nullable
  private AccountConfigurationType accountConfiguration;

  /**
   * Gets or Sets investmentObjectives
   */
  @JsonAdapter(InvestmentObjectivesEnum.Adapter.class)
  public enum InvestmentObjectivesEnum {
    TRADING("Trading"),
    
    GROWTH("Growth"),
    
    SPECULATION("Speculation"),
    
    HEDGING("Hedging"),
    
    PRESERVATION("Preservation"),
    
    INCOME("Income");

    private String value;

    InvestmentObjectivesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvestmentObjectivesEnum fromValue(String value) {
      for (InvestmentObjectivesEnum b : InvestmentObjectivesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvestmentObjectivesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvestmentObjectivesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvestmentObjectivesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvestmentObjectivesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvestmentObjectivesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVESTMENT_OBJECTIVES = "investmentObjectives";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_OBJECTIVES)
  @javax.annotation.Nullable
  private List<InvestmentObjectivesEnum> investmentObjectives = new ArrayList<>();

  /**
   * Gets or Sets brokerageServiceCodes
   */
  @JsonAdapter(BrokerageServiceCodesEnum.Adapter.class)
  public enum BrokerageServiceCodesEnum {
    IB_CLEARING("IBClearing"),
    
    IB_EXECUTION("IBExecution"),
    
    IB_PRIME("IBPrime");

    private String value;

    BrokerageServiceCodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrokerageServiceCodesEnum fromValue(String value) {
      for (BrokerageServiceCodesEnum b : BrokerageServiceCodesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrokerageServiceCodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrokerageServiceCodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrokerageServiceCodesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrokerageServiceCodesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrokerageServiceCodesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BROKERAGE_SERVICE_CODES = "brokerageServiceCodes";
  @SerializedName(SERIALIZED_NAME_BROKERAGE_SERVICE_CODES)
  @javax.annotation.Nullable
  private List<BrokerageServiceCodesEnum> brokerageServiceCodes = new ArrayList<>();

  /**
   * Gets or Sets capabilities
   */
  @JsonAdapter(CapabilitiesEnum.Adapter.class)
  public enum CapabilitiesEnum {
    BOND("BOND"),
    
    FOP("FOP"),
    
    FUND("FUND"),
    
    FUT("FUT"),
    
    MRGN("MRGN"),
    
    MULT("MULT"),
    
    OPT("OPT"),
    
    SSF("SSF"),
    
    CFD("CFD"),
    
    STK("STK"),
    
    CLP("CLP"),
    
    LEVFX("LEVFX"),
    
    CMDTY("CMDTY");

    private String value;

    CapabilitiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CapabilitiesEnum fromValue(String value) {
      for (CapabilitiesEnum b : CapabilitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CapabilitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapabilitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapabilitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CapabilitiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CapabilitiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  @javax.annotation.Nullable
  private List<CapabilitiesEnum> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRADING_PERMISSIONS = "tradingPermissions";
  @SerializedName(SERIALIZED_NAME_TRADING_PERMISSIONS)
  @javax.annotation.Nullable
  private List<TradingPermission> tradingPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMISSION_CONFIGS = "commissionConfigs";
  @SerializedName(SERIALIZED_NAME_COMMISSION_CONFIGS)
  @javax.annotation.Nullable
  private List<CommissionConfig> commissionConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALL_EXCHANGE_ACCESS = "allExchangeAccess";
  @SerializedName(SERIALIZED_NAME_ALL_EXCHANGE_ACCESS)
  @javax.annotation.Nullable
  private List<ExchangeAccess> allExchangeAccess = new ArrayList<>();

  public static final String SERIALIZED_NAME_DVP_INSTRUCTIONS = "dvpInstructions";
  @SerializedName(SERIALIZED_NAME_DVP_INSTRUCTIONS)
  @javax.annotation.Nullable
  private List<DVPInstruction> dvpInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRADING_LIMITS = "tradingLimits";
  @SerializedName(SERIALIZED_NAME_TRADING_LIMITS)
  @javax.annotation.Nullable
  private TradingLimits tradingLimits;

  public static final String SERIALIZED_NAME_ADVISOR_WRAP_FEES = "advisorWrapFees";
  @SerializedName(SERIALIZED_NAME_ADVISOR_WRAP_FEES)
  @javax.annotation.Nullable
  private AdvisorWrapFeesType advisorWrapFees;

  public static final String SERIALIZED_NAME_FEES_TEMPLATE_NAME = "feesTemplateName";
  @SerializedName(SERIALIZED_NAME_FEES_TEMPLATE_NAME)
  @javax.annotation.Nullable
  private String feesTemplateName;

  public static final String SERIALIZED_NAME_CLIENT_COMMISSION_SCHEDULE = "clientCommissionSchedule";
  @SerializedName(SERIALIZED_NAME_CLIENT_COMMISSION_SCHEDULE)
  @javax.annotation.Nullable
  private CommissionScheduleType clientCommissionSchedule;

  public static final String SERIALIZED_NAME_CLIENT_INTEREST_MARKUP_SCHEDULES = "clientInterestMarkupSchedules";
  @SerializedName(SERIALIZED_NAME_CLIENT_INTEREST_MARKUP_SCHEDULES)
  @javax.annotation.Nullable
  private List<InterestMarkupType> clientInterestMarkupSchedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECENDENT = "decendent";
  @SerializedName(SERIALIZED_NAME_DECENDENT)
  @javax.annotation.Nullable
  private IRADecedent decendent;

  public static final String SERIALIZED_NAME_IRA_BENEFICIARIES = "iraBeneficiaries";
  @SerializedName(SERIALIZED_NAME_IRA_BENEFICIARIES)
  @javax.annotation.Nullable
  private IRABeneficiariesType iraBeneficiaries;

  public static final String SERIALIZED_NAME_EXT_POSITIONS_TRANSFERS = "extPositionsTransfers";
  @SerializedName(SERIALIZED_NAME_EXT_POSITIONS_TRANSFERS)
  @javax.annotation.Nullable
  private List<ExtPositionsTransferType> extPositionsTransfers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPOSIT_NOTIFICATION = "depositNotification";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_NOTIFICATION)
  @javax.annotation.Nullable
  private DepositNotification depositNotification;

  public static final String SERIALIZED_NAME_ACH_INSTRUCTIONS = "achInstructions";
  @SerializedName(SERIALIZED_NAME_ACH_INSTRUCTIONS)
  @javax.annotation.Nullable
  private List<ACHInstruction> achInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURRING_TRANSACTIONS = "recurringTransactions";
  @SerializedName(SERIALIZED_NAME_RECURRING_TRANSACTIONS)
  @javax.annotation.Nullable
  private List<RecurringTransaction> recurringTransactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTODIAN = "custodian";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN)
  @javax.annotation.Nullable
  private CustodianType custodian;

  public static final String SERIALIZED_NAME_SUCCESSOR_CUSTODIAN = "successorCustodian";
  @SerializedName(SERIALIZED_NAME_SUCCESSOR_CUSTODIAN)
  @javax.annotation.Nullable
  private CustodianType successorCustodian;

  public static final String SERIALIZED_NAME_ACCOUNT_REP = "accountRep";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_REP)
  @javax.annotation.Nullable
  private AccountRep accountRep;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_PROPERTY_PROFILE = "propertyProfile";
  @SerializedName(SERIALIZED_NAME_PROPERTY_PROFILE)
  @javax.annotation.Nullable
  private String propertyProfile;

  /**
   * Gets or Sets baseCurrency
   */
  @JsonAdapter(BaseCurrencyEnum.Adapter.class)
  public enum BaseCurrencyEnum {
    USD("USD"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    CAD("CAD"),
    
    JPY("JPY"),
    
    HKD("HKD"),
    
    AUD("AUD"),
    
    CHF("CHF"),
    
    MXN("MXN"),
    
    SEK("SEK"),
    
    NZD("NZD"),
    
    HUF("HUF"),
    
    CZK("CZK"),
    
    CNH("CNH"),
    
    DKK("DKK"),
    
    RUB("RUB"),
    
    ILS("ILS"),
    
    NOK("NOK"),
    
    SGD("SGD"),
    
    PLN("PLN"),
    
    ZAR("ZAR"),
    
    AED("AED"),
    
    KRW("KRW"),
    
    SAR("SAR"),
    
    TRY("TRY");

    private String value;

    BaseCurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaseCurrencyEnum fromValue(String value) {
      for (BaseCurrencyEnum b : BaseCurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaseCurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaseCurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaseCurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaseCurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaseCurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  @javax.annotation.Nullable
  private BaseCurrencyEnum baseCurrency;

  public static final String SERIALIZED_NAME_EMPLOYEE_PLAN = "employeePlan";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PLAN)
  @javax.annotation.Nullable
  private String employeePlan;

  public static final String SERIALIZED_NAME_MULTI_CURRENCY = "multiCurrency";
  @SerializedName(SERIALIZED_NAME_MULTI_CURRENCY)
  @javax.annotation.Nullable
  private Boolean multiCurrency;

  public static final String SERIALIZED_NAME_MIGRATION = "migration";
  @SerializedName(SERIALIZED_NAME_MIGRATION)
  @javax.annotation.Nullable
  private Boolean migration;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_ID = "sourceAccountId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String sourceAccountId;

  public static final String SERIALIZED_NAME_MARGIN = "margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  @javax.annotation.Nullable
  private String margin;

  public static final String SERIALIZED_NAME_IRA = "ira";
  @SerializedName(SERIALIZED_NAME_IRA)
  @javax.annotation.Nullable
  private Boolean ira;

  /**
   * Gets or Sets iraType
   */
  @JsonAdapter(IraTypeEnum.Adapter.class)
  public enum IraTypeEnum {
    RI("RI"),
    
    RO("RO"),
    
    RT("RT"),
    
    SP("SP"),
    
    ED("ED"),
    
    TH("TH"),
    
    RH("RH"),
    
    SH("SH"),
    
    RRSP("RRSP"),
    
    SRRSP("SRRSP"),
    
    TFSA("TFSA"),
    
    SIMPLE("SIMPLE"),
    
    ISA("ISA");

    private String value;

    IraTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IraTypeEnum fromValue(String value) {
      for (IraTypeEnum b : IraTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IraTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IraTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IraTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IraTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IraTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IRA_TYPE = "iraType";
  @SerializedName(SERIALIZED_NAME_IRA_TYPE)
  @javax.annotation.Nullable
  private IraTypeEnum iraType;

  public static final String SERIALIZED_NAME_IRA_OFFICIAL_TITLE = "iraOfficialTitle";
  @SerializedName(SERIALIZED_NAME_IRA_OFFICIAL_TITLE)
  @javax.annotation.Nullable
  private String iraOfficialTitle;

  public static final String SERIALIZED_NAME_CLIENT_ACTIVE_TRADING = "clientActiveTrading";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACTIVE_TRADING)
  @javax.annotation.Nullable
  private Boolean clientActiveTrading;

  public static final String SERIALIZED_NAME_DUPLICATE = "duplicate";
  @SerializedName(SERIALIZED_NAME_DUPLICATE)
  @javax.annotation.Nullable
  private Boolean duplicate;

  public static final String SERIALIZED_NAME_NUMBER_OF_DUPLICATES = "numberOfDuplicates";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DUPLICATES)
  @javax.annotation.Nullable
  private Integer numberOfDuplicates;

  public static final String SERIALIZED_NAME_STOCK_YIELD_PROGRAM = "stockYieldProgram";
  @SerializedName(SERIALIZED_NAME_STOCK_YIELD_PROGRAM)
  @javax.annotation.Nullable
  private Boolean stockYieldProgram;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  @javax.annotation.Nullable
  private String alias;

  /**
   * Gets or Sets accountType
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    INVESTMENT("Investment"),
    
    TRADING("Trading"),
    
    SMSF("SMSF");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  @javax.annotation.Nullable
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_DRIP = "drip";
  @SerializedName(SERIALIZED_NAME_DRIP)
  @javax.annotation.Nullable
  private Boolean drip;

  public static final String SERIALIZED_NAME_LIMITED_OPTIONS = "limitedOptions";
  @SerializedName(SERIALIZED_NAME_LIMITED_OPTIONS)
  @javax.annotation.Nullable
  private Boolean limitedOptions;

  public Account() {
  }

  public Account accountConfiguration(@javax.annotation.Nullable AccountConfigurationType accountConfiguration) {
    this.accountConfiguration = accountConfiguration;
    return this;
  }

  /**
   * Get accountConfiguration
   * @return accountConfiguration
   */
  @javax.annotation.Nullable
  public AccountConfigurationType getAccountConfiguration() {
    return accountConfiguration;
  }

  public void setAccountConfiguration(@javax.annotation.Nullable AccountConfigurationType accountConfiguration) {
    this.accountConfiguration = accountConfiguration;
  }


  public Account investmentObjectives(@javax.annotation.Nullable List<InvestmentObjectivesEnum> investmentObjectives) {
    this.investmentObjectives = investmentObjectives;
    return this;
  }

  public Account addInvestmentObjectivesItem(InvestmentObjectivesEnum investmentObjectivesItem) {
    if (this.investmentObjectives == null) {
      this.investmentObjectives = new ArrayList<>();
    }
    this.investmentObjectives.add(investmentObjectivesItem);
    return this;
  }

  /**
   * Get investmentObjectives
   * @return investmentObjectives
   */
  @javax.annotation.Nullable
  public List<InvestmentObjectivesEnum> getInvestmentObjectives() {
    return investmentObjectives;
  }

  public void setInvestmentObjectives(@javax.annotation.Nullable List<InvestmentObjectivesEnum> investmentObjectives) {
    this.investmentObjectives = investmentObjectives;
  }


  public Account brokerageServiceCodes(@javax.annotation.Nullable List<BrokerageServiceCodesEnum> brokerageServiceCodes) {
    this.brokerageServiceCodes = brokerageServiceCodes;
    return this;
  }

  public Account addBrokerageServiceCodesItem(BrokerageServiceCodesEnum brokerageServiceCodesItem) {
    if (this.brokerageServiceCodes == null) {
      this.brokerageServiceCodes = new ArrayList<>();
    }
    this.brokerageServiceCodes.add(brokerageServiceCodesItem);
    return this;
  }

  /**
   * Get brokerageServiceCodes
   * @return brokerageServiceCodes
   */
  @javax.annotation.Nullable
  public List<BrokerageServiceCodesEnum> getBrokerageServiceCodes() {
    return brokerageServiceCodes;
  }

  public void setBrokerageServiceCodes(@javax.annotation.Nullable List<BrokerageServiceCodesEnum> brokerageServiceCodes) {
    this.brokerageServiceCodes = brokerageServiceCodes;
  }


  public Account capabilities(@javax.annotation.Nullable List<CapabilitiesEnum> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public Account addCapabilitiesItem(CapabilitiesEnum capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<CapabilitiesEnum> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(@javax.annotation.Nullable List<CapabilitiesEnum> capabilities) {
    this.capabilities = capabilities;
  }


  public Account tradingPermissions(@javax.annotation.Nullable List<TradingPermission> tradingPermissions) {
    this.tradingPermissions = tradingPermissions;
    return this;
  }

  public Account addTradingPermissionsItem(TradingPermission tradingPermissionsItem) {
    if (this.tradingPermissions == null) {
      this.tradingPermissions = new ArrayList<>();
    }
    this.tradingPermissions.add(tradingPermissionsItem);
    return this;
  }

  /**
   * Get tradingPermissions
   * @return tradingPermissions
   */
  @javax.annotation.Nullable
  public List<TradingPermission> getTradingPermissions() {
    return tradingPermissions;
  }

  public void setTradingPermissions(@javax.annotation.Nullable List<TradingPermission> tradingPermissions) {
    this.tradingPermissions = tradingPermissions;
  }


  public Account commissionConfigs(@javax.annotation.Nullable List<CommissionConfig> commissionConfigs) {
    this.commissionConfigs = commissionConfigs;
    return this;
  }

  public Account addCommissionConfigsItem(CommissionConfig commissionConfigsItem) {
    if (this.commissionConfigs == null) {
      this.commissionConfigs = new ArrayList<>();
    }
    this.commissionConfigs.add(commissionConfigsItem);
    return this;
  }

  /**
   * Get commissionConfigs
   * @return commissionConfigs
   */
  @javax.annotation.Nullable
  public List<CommissionConfig> getCommissionConfigs() {
    return commissionConfigs;
  }

  public void setCommissionConfigs(@javax.annotation.Nullable List<CommissionConfig> commissionConfigs) {
    this.commissionConfigs = commissionConfigs;
  }


  public Account allExchangeAccess(@javax.annotation.Nullable List<ExchangeAccess> allExchangeAccess) {
    this.allExchangeAccess = allExchangeAccess;
    return this;
  }

  public Account addAllExchangeAccessItem(ExchangeAccess allExchangeAccessItem) {
    if (this.allExchangeAccess == null) {
      this.allExchangeAccess = new ArrayList<>();
    }
    this.allExchangeAccess.add(allExchangeAccessItem);
    return this;
  }

  /**
   * Get allExchangeAccess
   * @return allExchangeAccess
   */
  @javax.annotation.Nullable
  public List<ExchangeAccess> getAllExchangeAccess() {
    return allExchangeAccess;
  }

  public void setAllExchangeAccess(@javax.annotation.Nullable List<ExchangeAccess> allExchangeAccess) {
    this.allExchangeAccess = allExchangeAccess;
  }


  public Account dvpInstructions(@javax.annotation.Nullable List<DVPInstruction> dvpInstructions) {
    this.dvpInstructions = dvpInstructions;
    return this;
  }

  public Account addDvpInstructionsItem(DVPInstruction dvpInstructionsItem) {
    if (this.dvpInstructions == null) {
      this.dvpInstructions = new ArrayList<>();
    }
    this.dvpInstructions.add(dvpInstructionsItem);
    return this;
  }

  /**
   * Get dvpInstructions
   * @return dvpInstructions
   */
  @javax.annotation.Nullable
  public List<DVPInstruction> getDvpInstructions() {
    return dvpInstructions;
  }

  public void setDvpInstructions(@javax.annotation.Nullable List<DVPInstruction> dvpInstructions) {
    this.dvpInstructions = dvpInstructions;
  }


  public Account tradingLimits(@javax.annotation.Nullable TradingLimits tradingLimits) {
    this.tradingLimits = tradingLimits;
    return this;
  }

  /**
   * Get tradingLimits
   * @return tradingLimits
   */
  @javax.annotation.Nullable
  public TradingLimits getTradingLimits() {
    return tradingLimits;
  }

  public void setTradingLimits(@javax.annotation.Nullable TradingLimits tradingLimits) {
    this.tradingLimits = tradingLimits;
  }


  public Account advisorWrapFees(@javax.annotation.Nullable AdvisorWrapFeesType advisorWrapFees) {
    this.advisorWrapFees = advisorWrapFees;
    return this;
  }

  /**
   * Get advisorWrapFees
   * @return advisorWrapFees
   */
  @javax.annotation.Nullable
  public AdvisorWrapFeesType getAdvisorWrapFees() {
    return advisorWrapFees;
  }

  public void setAdvisorWrapFees(@javax.annotation.Nullable AdvisorWrapFeesType advisorWrapFees) {
    this.advisorWrapFees = advisorWrapFees;
  }


  public Account feesTemplateName(@javax.annotation.Nullable String feesTemplateName) {
    this.feesTemplateName = feesTemplateName;
    return this;
  }

  /**
   * Get feesTemplateName
   * @return feesTemplateName
   */
  @javax.annotation.Nullable
  public String getFeesTemplateName() {
    return feesTemplateName;
  }

  public void setFeesTemplateName(@javax.annotation.Nullable String feesTemplateName) {
    this.feesTemplateName = feesTemplateName;
  }


  public Account clientCommissionSchedule(@javax.annotation.Nullable CommissionScheduleType clientCommissionSchedule) {
    this.clientCommissionSchedule = clientCommissionSchedule;
    return this;
  }

  /**
   * Get clientCommissionSchedule
   * @return clientCommissionSchedule
   */
  @javax.annotation.Nullable
  public CommissionScheduleType getClientCommissionSchedule() {
    return clientCommissionSchedule;
  }

  public void setClientCommissionSchedule(@javax.annotation.Nullable CommissionScheduleType clientCommissionSchedule) {
    this.clientCommissionSchedule = clientCommissionSchedule;
  }


  public Account clientInterestMarkupSchedules(@javax.annotation.Nullable List<InterestMarkupType> clientInterestMarkupSchedules) {
    this.clientInterestMarkupSchedules = clientInterestMarkupSchedules;
    return this;
  }

  public Account addClientInterestMarkupSchedulesItem(InterestMarkupType clientInterestMarkupSchedulesItem) {
    if (this.clientInterestMarkupSchedules == null) {
      this.clientInterestMarkupSchedules = new ArrayList<>();
    }
    this.clientInterestMarkupSchedules.add(clientInterestMarkupSchedulesItem);
    return this;
  }

  /**
   * Get clientInterestMarkupSchedules
   * @return clientInterestMarkupSchedules
   */
  @javax.annotation.Nullable
  public List<InterestMarkupType> getClientInterestMarkupSchedules() {
    return clientInterestMarkupSchedules;
  }

  public void setClientInterestMarkupSchedules(@javax.annotation.Nullable List<InterestMarkupType> clientInterestMarkupSchedules) {
    this.clientInterestMarkupSchedules = clientInterestMarkupSchedules;
  }


  public Account decendent(@javax.annotation.Nullable IRADecedent decendent) {
    this.decendent = decendent;
    return this;
  }

  /**
   * Get decendent
   * @return decendent
   */
  @javax.annotation.Nullable
  public IRADecedent getDecendent() {
    return decendent;
  }

  public void setDecendent(@javax.annotation.Nullable IRADecedent decendent) {
    this.decendent = decendent;
  }


  public Account iraBeneficiaries(@javax.annotation.Nullable IRABeneficiariesType iraBeneficiaries) {
    this.iraBeneficiaries = iraBeneficiaries;
    return this;
  }

  /**
   * Get iraBeneficiaries
   * @return iraBeneficiaries
   */
  @javax.annotation.Nullable
  public IRABeneficiariesType getIraBeneficiaries() {
    return iraBeneficiaries;
  }

  public void setIraBeneficiaries(@javax.annotation.Nullable IRABeneficiariesType iraBeneficiaries) {
    this.iraBeneficiaries = iraBeneficiaries;
  }


  public Account extPositionsTransfers(@javax.annotation.Nullable List<ExtPositionsTransferType> extPositionsTransfers) {
    this.extPositionsTransfers = extPositionsTransfers;
    return this;
  }

  public Account addExtPositionsTransfersItem(ExtPositionsTransferType extPositionsTransfersItem) {
    if (this.extPositionsTransfers == null) {
      this.extPositionsTransfers = new ArrayList<>();
    }
    this.extPositionsTransfers.add(extPositionsTransfersItem);
    return this;
  }

  /**
   * Get extPositionsTransfers
   * @return extPositionsTransfers
   */
  @javax.annotation.Nullable
  public List<ExtPositionsTransferType> getExtPositionsTransfers() {
    return extPositionsTransfers;
  }

  public void setExtPositionsTransfers(@javax.annotation.Nullable List<ExtPositionsTransferType> extPositionsTransfers) {
    this.extPositionsTransfers = extPositionsTransfers;
  }


  public Account depositNotification(@javax.annotation.Nullable DepositNotification depositNotification) {
    this.depositNotification = depositNotification;
    return this;
  }

  /**
   * Get depositNotification
   * @return depositNotification
   */
  @javax.annotation.Nullable
  public DepositNotification getDepositNotification() {
    return depositNotification;
  }

  public void setDepositNotification(@javax.annotation.Nullable DepositNotification depositNotification) {
    this.depositNotification = depositNotification;
  }


  public Account achInstructions(@javax.annotation.Nullable List<ACHInstruction> achInstructions) {
    this.achInstructions = achInstructions;
    return this;
  }

  public Account addAchInstructionsItem(ACHInstruction achInstructionsItem) {
    if (this.achInstructions == null) {
      this.achInstructions = new ArrayList<>();
    }
    this.achInstructions.add(achInstructionsItem);
    return this;
  }

  /**
   * Get achInstructions
   * @return achInstructions
   */
  @javax.annotation.Nullable
  public List<ACHInstruction> getAchInstructions() {
    return achInstructions;
  }

  public void setAchInstructions(@javax.annotation.Nullable List<ACHInstruction> achInstructions) {
    this.achInstructions = achInstructions;
  }


  public Account recurringTransactions(@javax.annotation.Nullable List<RecurringTransaction> recurringTransactions) {
    this.recurringTransactions = recurringTransactions;
    return this;
  }

  public Account addRecurringTransactionsItem(RecurringTransaction recurringTransactionsItem) {
    if (this.recurringTransactions == null) {
      this.recurringTransactions = new ArrayList<>();
    }
    this.recurringTransactions.add(recurringTransactionsItem);
    return this;
  }

  /**
   * Get recurringTransactions
   * @return recurringTransactions
   */
  @javax.annotation.Nullable
  public List<RecurringTransaction> getRecurringTransactions() {
    return recurringTransactions;
  }

  public void setRecurringTransactions(@javax.annotation.Nullable List<RecurringTransaction> recurringTransactions) {
    this.recurringTransactions = recurringTransactions;
  }


  public Account custodian(@javax.annotation.Nullable CustodianType custodian) {
    this.custodian = custodian;
    return this;
  }

  /**
   * Get custodian
   * @return custodian
   */
  @javax.annotation.Nullable
  public CustodianType getCustodian() {
    return custodian;
  }

  public void setCustodian(@javax.annotation.Nullable CustodianType custodian) {
    this.custodian = custodian;
  }


  public Account successorCustodian(@javax.annotation.Nullable CustodianType successorCustodian) {
    this.successorCustodian = successorCustodian;
    return this;
  }

  /**
   * Get successorCustodian
   * @return successorCustodian
   */
  @javax.annotation.Nullable
  public CustodianType getSuccessorCustodian() {
    return successorCustodian;
  }

  public void setSuccessorCustodian(@javax.annotation.Nullable CustodianType successorCustodian) {
    this.successorCustodian = successorCustodian;
  }


  public Account accountRep(@javax.annotation.Nullable AccountRep accountRep) {
    this.accountRep = accountRep;
    return this;
  }

  /**
   * Get accountRep
   * @return accountRep
   */
  @javax.annotation.Nullable
  public AccountRep getAccountRep() {
    return accountRep;
  }

  public void setAccountRep(@javax.annotation.Nullable AccountRep accountRep) {
    this.accountRep = accountRep;
  }


  public Account id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Account externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public Account propertyProfile(@javax.annotation.Nullable String propertyProfile) {
    this.propertyProfile = propertyProfile;
    return this;
  }

  /**
   * Get propertyProfile
   * @return propertyProfile
   */
  @javax.annotation.Nullable
  public String getPropertyProfile() {
    return propertyProfile;
  }

  public void setPropertyProfile(@javax.annotation.Nullable String propertyProfile) {
    this.propertyProfile = propertyProfile;
  }


  public Account baseCurrency(@javax.annotation.Nullable BaseCurrencyEnum baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Get baseCurrency
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public BaseCurrencyEnum getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(@javax.annotation.Nullable BaseCurrencyEnum baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public Account employeePlan(@javax.annotation.Nullable String employeePlan) {
    this.employeePlan = employeePlan;
    return this;
  }

  /**
   * Get employeePlan
   * @return employeePlan
   */
  @javax.annotation.Nullable
  public String getEmployeePlan() {
    return employeePlan;
  }

  public void setEmployeePlan(@javax.annotation.Nullable String employeePlan) {
    this.employeePlan = employeePlan;
  }


  public Account multiCurrency(@javax.annotation.Nullable Boolean multiCurrency) {
    this.multiCurrency = multiCurrency;
    return this;
  }

  /**
   * Get multiCurrency
   * @return multiCurrency
   */
  @javax.annotation.Nullable
  public Boolean getMultiCurrency() {
    return multiCurrency;
  }

  public void setMultiCurrency(@javax.annotation.Nullable Boolean multiCurrency) {
    this.multiCurrency = multiCurrency;
  }


  public Account migration(@javax.annotation.Nullable Boolean migration) {
    this.migration = migration;
    return this;
  }

  /**
   * Get migration
   * @return migration
   */
  @javax.annotation.Nullable
  public Boolean getMigration() {
    return migration;
  }

  public void setMigration(@javax.annotation.Nullable Boolean migration) {
    this.migration = migration;
  }


  public Account sourceAccountId(@javax.annotation.Nullable String sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
    return this;
  }

  /**
   * Get sourceAccountId
   * @return sourceAccountId
   */
  @javax.annotation.Nullable
  public String getSourceAccountId() {
    return sourceAccountId;
  }

  public void setSourceAccountId(@javax.annotation.Nullable String sourceAccountId) {
    this.sourceAccountId = sourceAccountId;
  }


  public Account margin(@javax.annotation.Nullable String margin) {
    this.margin = margin;
    return this;
  }

  /**
   * Get margin
   * @return margin
   */
  @javax.annotation.Nullable
  public String getMargin() {
    return margin;
  }

  public void setMargin(@javax.annotation.Nullable String margin) {
    this.margin = margin;
  }


  public Account ira(@javax.annotation.Nullable Boolean ira) {
    this.ira = ira;
    return this;
  }

  /**
   * Get ira
   * @return ira
   */
  @javax.annotation.Nullable
  public Boolean getIra() {
    return ira;
  }

  public void setIra(@javax.annotation.Nullable Boolean ira) {
    this.ira = ira;
  }


  public Account iraType(@javax.annotation.Nullable IraTypeEnum iraType) {
    this.iraType = iraType;
    return this;
  }

  /**
   * Get iraType
   * @return iraType
   */
  @javax.annotation.Nullable
  public IraTypeEnum getIraType() {
    return iraType;
  }

  public void setIraType(@javax.annotation.Nullable IraTypeEnum iraType) {
    this.iraType = iraType;
  }


  public Account iraOfficialTitle(@javax.annotation.Nullable String iraOfficialTitle) {
    this.iraOfficialTitle = iraOfficialTitle;
    return this;
  }

  /**
   * Get iraOfficialTitle
   * @return iraOfficialTitle
   */
  @javax.annotation.Nullable
  public String getIraOfficialTitle() {
    return iraOfficialTitle;
  }

  public void setIraOfficialTitle(@javax.annotation.Nullable String iraOfficialTitle) {
    this.iraOfficialTitle = iraOfficialTitle;
  }


  public Account clientActiveTrading(@javax.annotation.Nullable Boolean clientActiveTrading) {
    this.clientActiveTrading = clientActiveTrading;
    return this;
  }

  /**
   * Get clientActiveTrading
   * @return clientActiveTrading
   */
  @javax.annotation.Nullable
  public Boolean getClientActiveTrading() {
    return clientActiveTrading;
  }

  public void setClientActiveTrading(@javax.annotation.Nullable Boolean clientActiveTrading) {
    this.clientActiveTrading = clientActiveTrading;
  }


  public Account duplicate(@javax.annotation.Nullable Boolean duplicate) {
    this.duplicate = duplicate;
    return this;
  }

  /**
   * Get duplicate
   * @return duplicate
   */
  @javax.annotation.Nullable
  public Boolean getDuplicate() {
    return duplicate;
  }

  public void setDuplicate(@javax.annotation.Nullable Boolean duplicate) {
    this.duplicate = duplicate;
  }


  public Account numberOfDuplicates(@javax.annotation.Nullable Integer numberOfDuplicates) {
    this.numberOfDuplicates = numberOfDuplicates;
    return this;
  }

  /**
   * Get numberOfDuplicates
   * @return numberOfDuplicates
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDuplicates() {
    return numberOfDuplicates;
  }

  public void setNumberOfDuplicates(@javax.annotation.Nullable Integer numberOfDuplicates) {
    this.numberOfDuplicates = numberOfDuplicates;
  }


  public Account stockYieldProgram(@javax.annotation.Nullable Boolean stockYieldProgram) {
    this.stockYieldProgram = stockYieldProgram;
    return this;
  }

  /**
   * Get stockYieldProgram
   * @return stockYieldProgram
   */
  @javax.annotation.Nullable
  public Boolean getStockYieldProgram() {
    return stockYieldProgram;
  }

  public void setStockYieldProgram(@javax.annotation.Nullable Boolean stockYieldProgram) {
    this.stockYieldProgram = stockYieldProgram;
  }


  public Account alias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(@javax.annotation.Nullable String alias) {
    this.alias = alias;
  }


  public Account accountType(@javax.annotation.Nullable AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(@javax.annotation.Nullable AccountTypeEnum accountType) {
    this.accountType = accountType;
  }


  public Account drip(@javax.annotation.Nullable Boolean drip) {
    this.drip = drip;
    return this;
  }

  /**
   * Get drip
   * @return drip
   */
  @javax.annotation.Nullable
  public Boolean getDrip() {
    return drip;
  }

  public void setDrip(@javax.annotation.Nullable Boolean drip) {
    this.drip = drip;
  }


  public Account limitedOptions(@javax.annotation.Nullable Boolean limitedOptions) {
    this.limitedOptions = limitedOptions;
    return this;
  }

  /**
   * Get limitedOptions
   * @return limitedOptions
   */
  @javax.annotation.Nullable
  public Boolean getLimitedOptions() {
    return limitedOptions;
  }

  public void setLimitedOptions(@javax.annotation.Nullable Boolean limitedOptions) {
    this.limitedOptions = limitedOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountConfiguration, account.accountConfiguration) &&
        Objects.equals(this.investmentObjectives, account.investmentObjectives) &&
        Objects.equals(this.brokerageServiceCodes, account.brokerageServiceCodes) &&
        Objects.equals(this.capabilities, account.capabilities) &&
        Objects.equals(this.tradingPermissions, account.tradingPermissions) &&
        Objects.equals(this.commissionConfigs, account.commissionConfigs) &&
        Objects.equals(this.allExchangeAccess, account.allExchangeAccess) &&
        Objects.equals(this.dvpInstructions, account.dvpInstructions) &&
        Objects.equals(this.tradingLimits, account.tradingLimits) &&
        Objects.equals(this.advisorWrapFees, account.advisorWrapFees) &&
        Objects.equals(this.feesTemplateName, account.feesTemplateName) &&
        Objects.equals(this.clientCommissionSchedule, account.clientCommissionSchedule) &&
        Objects.equals(this.clientInterestMarkupSchedules, account.clientInterestMarkupSchedules) &&
        Objects.equals(this.decendent, account.decendent) &&
        Objects.equals(this.iraBeneficiaries, account.iraBeneficiaries) &&
        Objects.equals(this.extPositionsTransfers, account.extPositionsTransfers) &&
        Objects.equals(this.depositNotification, account.depositNotification) &&
        Objects.equals(this.achInstructions, account.achInstructions) &&
        Objects.equals(this.recurringTransactions, account.recurringTransactions) &&
        Objects.equals(this.custodian, account.custodian) &&
        Objects.equals(this.successorCustodian, account.successorCustodian) &&
        Objects.equals(this.accountRep, account.accountRep) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.externalId, account.externalId) &&
        Objects.equals(this.propertyProfile, account.propertyProfile) &&
        Objects.equals(this.baseCurrency, account.baseCurrency) &&
        Objects.equals(this.employeePlan, account.employeePlan) &&
        Objects.equals(this.multiCurrency, account.multiCurrency) &&
        Objects.equals(this.migration, account.migration) &&
        Objects.equals(this.sourceAccountId, account.sourceAccountId) &&
        Objects.equals(this.margin, account.margin) &&
        Objects.equals(this.ira, account.ira) &&
        Objects.equals(this.iraType, account.iraType) &&
        Objects.equals(this.iraOfficialTitle, account.iraOfficialTitle) &&
        Objects.equals(this.clientActiveTrading, account.clientActiveTrading) &&
        Objects.equals(this.duplicate, account.duplicate) &&
        Objects.equals(this.numberOfDuplicates, account.numberOfDuplicates) &&
        Objects.equals(this.stockYieldProgram, account.stockYieldProgram) &&
        Objects.equals(this.alias, account.alias) &&
        Objects.equals(this.accountType, account.accountType) &&
        Objects.equals(this.drip, account.drip) &&
        Objects.equals(this.limitedOptions, account.limitedOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountConfiguration, investmentObjectives, brokerageServiceCodes, capabilities, tradingPermissions, commissionConfigs, allExchangeAccess, dvpInstructions, tradingLimits, advisorWrapFees, feesTemplateName, clientCommissionSchedule, clientInterestMarkupSchedules, decendent, iraBeneficiaries, extPositionsTransfers, depositNotification, achInstructions, recurringTransactions, custodian, successorCustodian, accountRep, id, externalId, propertyProfile, baseCurrency, employeePlan, multiCurrency, migration, sourceAccountId, margin, ira, iraType, iraOfficialTitle, clientActiveTrading, duplicate, numberOfDuplicates, stockYieldProgram, alias, accountType, drip, limitedOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountConfiguration: ").append(toIndentedString(accountConfiguration)).append("\n");
    sb.append("    investmentObjectives: ").append(toIndentedString(investmentObjectives)).append("\n");
    sb.append("    brokerageServiceCodes: ").append(toIndentedString(brokerageServiceCodes)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    tradingPermissions: ").append(toIndentedString(tradingPermissions)).append("\n");
    sb.append("    commissionConfigs: ").append(toIndentedString(commissionConfigs)).append("\n");
    sb.append("    allExchangeAccess: ").append(toIndentedString(allExchangeAccess)).append("\n");
    sb.append("    dvpInstructions: ").append(toIndentedString(dvpInstructions)).append("\n");
    sb.append("    tradingLimits: ").append(toIndentedString(tradingLimits)).append("\n");
    sb.append("    advisorWrapFees: ").append(toIndentedString(advisorWrapFees)).append("\n");
    sb.append("    feesTemplateName: ").append(toIndentedString(feesTemplateName)).append("\n");
    sb.append("    clientCommissionSchedule: ").append(toIndentedString(clientCommissionSchedule)).append("\n");
    sb.append("    clientInterestMarkupSchedules: ").append(toIndentedString(clientInterestMarkupSchedules)).append("\n");
    sb.append("    decendent: ").append(toIndentedString(decendent)).append("\n");
    sb.append("    iraBeneficiaries: ").append(toIndentedString(iraBeneficiaries)).append("\n");
    sb.append("    extPositionsTransfers: ").append(toIndentedString(extPositionsTransfers)).append("\n");
    sb.append("    depositNotification: ").append(toIndentedString(depositNotification)).append("\n");
    sb.append("    achInstructions: ").append(toIndentedString(achInstructions)).append("\n");
    sb.append("    recurringTransactions: ").append(toIndentedString(recurringTransactions)).append("\n");
    sb.append("    custodian: ").append(toIndentedString(custodian)).append("\n");
    sb.append("    successorCustodian: ").append(toIndentedString(successorCustodian)).append("\n");
    sb.append("    accountRep: ").append(toIndentedString(accountRep)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    propertyProfile: ").append(toIndentedString(propertyProfile)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    employeePlan: ").append(toIndentedString(employeePlan)).append("\n");
    sb.append("    multiCurrency: ").append(toIndentedString(multiCurrency)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("    sourceAccountId: ").append(toIndentedString(sourceAccountId)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    ira: ").append(toIndentedString(ira)).append("\n");
    sb.append("    iraType: ").append(toIndentedString(iraType)).append("\n");
    sb.append("    iraOfficialTitle: ").append(toIndentedString(iraOfficialTitle)).append("\n");
    sb.append("    clientActiveTrading: ").append(toIndentedString(clientActiveTrading)).append("\n");
    sb.append("    duplicate: ").append(toIndentedString(duplicate)).append("\n");
    sb.append("    numberOfDuplicates: ").append(toIndentedString(numberOfDuplicates)).append("\n");
    sb.append("    stockYieldProgram: ").append(toIndentedString(stockYieldProgram)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    drip: ").append(toIndentedString(drip)).append("\n");
    sb.append("    limitedOptions: ").append(toIndentedString(limitedOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountConfiguration");
    openapiFields.add("investmentObjectives");
    openapiFields.add("brokerageServiceCodes");
    openapiFields.add("capabilities");
    openapiFields.add("tradingPermissions");
    openapiFields.add("commissionConfigs");
    openapiFields.add("allExchangeAccess");
    openapiFields.add("dvpInstructions");
    openapiFields.add("tradingLimits");
    openapiFields.add("advisorWrapFees");
    openapiFields.add("feesTemplateName");
    openapiFields.add("clientCommissionSchedule");
    openapiFields.add("clientInterestMarkupSchedules");
    openapiFields.add("decendent");
    openapiFields.add("iraBeneficiaries");
    openapiFields.add("extPositionsTransfers");
    openapiFields.add("depositNotification");
    openapiFields.add("achInstructions");
    openapiFields.add("recurringTransactions");
    openapiFields.add("custodian");
    openapiFields.add("successorCustodian");
    openapiFields.add("accountRep");
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("propertyProfile");
    openapiFields.add("baseCurrency");
    openapiFields.add("employeePlan");
    openapiFields.add("multiCurrency");
    openapiFields.add("migration");
    openapiFields.add("sourceAccountId");
    openapiFields.add("margin");
    openapiFields.add("ira");
    openapiFields.add("iraType");
    openapiFields.add("iraOfficialTitle");
    openapiFields.add("clientActiveTrading");
    openapiFields.add("duplicate");
    openapiFields.add("numberOfDuplicates");
    openapiFields.add("stockYieldProgram");
    openapiFields.add("alias");
    openapiFields.add("accountType");
    openapiFields.add("drip");
    openapiFields.add("limitedOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountConfiguration`
      if (jsonObj.get("accountConfiguration") != null && !jsonObj.get("accountConfiguration").isJsonNull()) {
        AccountConfigurationType.validateJsonElement(jsonObj.get("accountConfiguration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("investmentObjectives") != null && !jsonObj.get("investmentObjectives").isJsonNull() && !jsonObj.get("investmentObjectives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `investmentObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("investmentObjectives").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brokerageServiceCodes") != null && !jsonObj.get("brokerageServiceCodes").isJsonNull() && !jsonObj.get("brokerageServiceCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerageServiceCodes` to be an array in the JSON string but got `%s`", jsonObj.get("brokerageServiceCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if (jsonObj.get("tradingPermissions") != null && !jsonObj.get("tradingPermissions").isJsonNull()) {
        JsonArray jsonArraytradingPermissions = jsonObj.getAsJsonArray("tradingPermissions");
        if (jsonArraytradingPermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tradingPermissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tradingPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("tradingPermissions").toString()));
          }

          // validate the optional field `tradingPermissions` (array)
          for (int i = 0; i < jsonArraytradingPermissions.size(); i++) {
            TradingPermission.validateJsonElement(jsonArraytradingPermissions.get(i));
          };
        }
      }
      if (jsonObj.get("commissionConfigs") != null && !jsonObj.get("commissionConfigs").isJsonNull()) {
        JsonArray jsonArraycommissionConfigs = jsonObj.getAsJsonArray("commissionConfigs");
        if (jsonArraycommissionConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commissionConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commissionConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("commissionConfigs").toString()));
          }

          // validate the optional field `commissionConfigs` (array)
          for (int i = 0; i < jsonArraycommissionConfigs.size(); i++) {
            CommissionConfig.validateJsonElement(jsonArraycommissionConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("allExchangeAccess") != null && !jsonObj.get("allExchangeAccess").isJsonNull()) {
        JsonArray jsonArrayallExchangeAccess = jsonObj.getAsJsonArray("allExchangeAccess");
        if (jsonArrayallExchangeAccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allExchangeAccess").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allExchangeAccess` to be an array in the JSON string but got `%s`", jsonObj.get("allExchangeAccess").toString()));
          }

          // validate the optional field `allExchangeAccess` (array)
          for (int i = 0; i < jsonArrayallExchangeAccess.size(); i++) {
            ExchangeAccess.validateJsonElement(jsonArrayallExchangeAccess.get(i));
          };
        }
      }
      if (jsonObj.get("dvpInstructions") != null && !jsonObj.get("dvpInstructions").isJsonNull()) {
        JsonArray jsonArraydvpInstructions = jsonObj.getAsJsonArray("dvpInstructions");
        if (jsonArraydvpInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dvpInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dvpInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("dvpInstructions").toString()));
          }

          // validate the optional field `dvpInstructions` (array)
          for (int i = 0; i < jsonArraydvpInstructions.size(); i++) {
            DVPInstruction.validateJsonElement(jsonArraydvpInstructions.get(i));
          };
        }
      }
      // validate the optional field `tradingLimits`
      if (jsonObj.get("tradingLimits") != null && !jsonObj.get("tradingLimits").isJsonNull()) {
        TradingLimits.validateJsonElement(jsonObj.get("tradingLimits"));
      }
      // validate the optional field `advisorWrapFees`
      if (jsonObj.get("advisorWrapFees") != null && !jsonObj.get("advisorWrapFees").isJsonNull()) {
        AdvisorWrapFeesType.validateJsonElement(jsonObj.get("advisorWrapFees"));
      }
      if ((jsonObj.get("feesTemplateName") != null && !jsonObj.get("feesTemplateName").isJsonNull()) && !jsonObj.get("feesTemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feesTemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feesTemplateName").toString()));
      }
      // validate the optional field `clientCommissionSchedule`
      if (jsonObj.get("clientCommissionSchedule") != null && !jsonObj.get("clientCommissionSchedule").isJsonNull()) {
        CommissionScheduleType.validateJsonElement(jsonObj.get("clientCommissionSchedule"));
      }
      if (jsonObj.get("clientInterestMarkupSchedules") != null && !jsonObj.get("clientInterestMarkupSchedules").isJsonNull()) {
        JsonArray jsonArrayclientInterestMarkupSchedules = jsonObj.getAsJsonArray("clientInterestMarkupSchedules");
        if (jsonArrayclientInterestMarkupSchedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientInterestMarkupSchedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientInterestMarkupSchedules` to be an array in the JSON string but got `%s`", jsonObj.get("clientInterestMarkupSchedules").toString()));
          }

          // validate the optional field `clientInterestMarkupSchedules` (array)
          for (int i = 0; i < jsonArrayclientInterestMarkupSchedules.size(); i++) {
            InterestMarkupType.validateJsonElement(jsonArrayclientInterestMarkupSchedules.get(i));
          };
        }
      }
      // validate the optional field `decendent`
      if (jsonObj.get("decendent") != null && !jsonObj.get("decendent").isJsonNull()) {
        IRADecedent.validateJsonElement(jsonObj.get("decendent"));
      }
      // validate the optional field `iraBeneficiaries`
      if (jsonObj.get("iraBeneficiaries") != null && !jsonObj.get("iraBeneficiaries").isJsonNull()) {
        IRABeneficiariesType.validateJsonElement(jsonObj.get("iraBeneficiaries"));
      }
      if (jsonObj.get("extPositionsTransfers") != null && !jsonObj.get("extPositionsTransfers").isJsonNull()) {
        JsonArray jsonArrayextPositionsTransfers = jsonObj.getAsJsonArray("extPositionsTransfers");
        if (jsonArrayextPositionsTransfers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extPositionsTransfers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extPositionsTransfers` to be an array in the JSON string but got `%s`", jsonObj.get("extPositionsTransfers").toString()));
          }

          // validate the optional field `extPositionsTransfers` (array)
          for (int i = 0; i < jsonArrayextPositionsTransfers.size(); i++) {
            ExtPositionsTransferType.validateJsonElement(jsonArrayextPositionsTransfers.get(i));
          };
        }
      }
      // validate the optional field `depositNotification`
      if (jsonObj.get("depositNotification") != null && !jsonObj.get("depositNotification").isJsonNull()) {
        DepositNotification.validateJsonElement(jsonObj.get("depositNotification"));
      }
      if (jsonObj.get("achInstructions") != null && !jsonObj.get("achInstructions").isJsonNull()) {
        JsonArray jsonArrayachInstructions = jsonObj.getAsJsonArray("achInstructions");
        if (jsonArrayachInstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("achInstructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `achInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("achInstructions").toString()));
          }

          // validate the optional field `achInstructions` (array)
          for (int i = 0; i < jsonArrayachInstructions.size(); i++) {
            ACHInstruction.validateJsonElement(jsonArrayachInstructions.get(i));
          };
        }
      }
      if (jsonObj.get("recurringTransactions") != null && !jsonObj.get("recurringTransactions").isJsonNull()) {
        JsonArray jsonArrayrecurringTransactions = jsonObj.getAsJsonArray("recurringTransactions");
        if (jsonArrayrecurringTransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recurringTransactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recurringTransactions` to be an array in the JSON string but got `%s`", jsonObj.get("recurringTransactions").toString()));
          }

          // validate the optional field `recurringTransactions` (array)
          for (int i = 0; i < jsonArrayrecurringTransactions.size(); i++) {
            RecurringTransaction.validateJsonElement(jsonArrayrecurringTransactions.get(i));
          };
        }
      }
      // validate the optional field `custodian`
      if (jsonObj.get("custodian") != null && !jsonObj.get("custodian").isJsonNull()) {
        CustodianType.validateJsonElement(jsonObj.get("custodian"));
      }
      // validate the optional field `successorCustodian`
      if (jsonObj.get("successorCustodian") != null && !jsonObj.get("successorCustodian").isJsonNull()) {
        CustodianType.validateJsonElement(jsonObj.get("successorCustodian"));
      }
      // validate the optional field `accountRep`
      if (jsonObj.get("accountRep") != null && !jsonObj.get("accountRep").isJsonNull()) {
        AccountRep.validateJsonElement(jsonObj.get("accountRep"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("propertyProfile") != null && !jsonObj.get("propertyProfile").isJsonNull()) && !jsonObj.get("propertyProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyProfile").toString()));
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      // validate the optional field `baseCurrency`
      if (jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) {
        BaseCurrencyEnum.validateJsonElement(jsonObj.get("baseCurrency"));
      }
      if ((jsonObj.get("employeePlan") != null && !jsonObj.get("employeePlan").isJsonNull()) && !jsonObj.get("employeePlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeePlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeePlan").toString()));
      }
      if ((jsonObj.get("sourceAccountId") != null && !jsonObj.get("sourceAccountId").isJsonNull()) && !jsonObj.get("sourceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAccountId").toString()));
      }
      if ((jsonObj.get("margin") != null && !jsonObj.get("margin").isJsonNull()) && !jsonObj.get("margin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin").toString()));
      }
      if ((jsonObj.get("iraType") != null && !jsonObj.get("iraType").isJsonNull()) && !jsonObj.get("iraType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iraType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iraType").toString()));
      }
      // validate the optional field `iraType`
      if (jsonObj.get("iraType") != null && !jsonObj.get("iraType").isJsonNull()) {
        IraTypeEnum.validateJsonElement(jsonObj.get("iraType"));
      }
      if ((jsonObj.get("iraOfficialTitle") != null && !jsonObj.get("iraOfficialTitle").isJsonNull()) && !jsonObj.get("iraOfficialTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iraOfficialTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iraOfficialTitle").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field `accountType`
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) {
        AccountTypeEnum.validateJsonElement(jsonObj.get("accountType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

