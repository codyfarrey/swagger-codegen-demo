/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DayQuantityLimit;
import org.openapitools.client.model.EFPQuantityLimits;
import org.openapitools.client.model.OrderQuantityLimit;
import org.openapitools.client.model.OrderValueLimits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TradingLimits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TradingLimits {
  public static final String SERIALIZED_NAME_ORDER_VALUE_LIMITS = "orderValueLimits";
  @SerializedName(SERIALIZED_NAME_ORDER_VALUE_LIMITS)
  @javax.annotation.Nullable
  private OrderValueLimits orderValueLimits;

  public static final String SERIALIZED_NAME_EFP_QUANTITY_LIMITS = "efpQuantityLimits";
  @SerializedName(SERIALIZED_NAME_EFP_QUANTITY_LIMITS)
  @javax.annotation.Nullable
  private EFPQuantityLimits efpQuantityLimits;

  public static final String SERIALIZED_NAME_ORDER_QUANTITY_LIMITS = "orderQuantityLimits";
  @SerializedName(SERIALIZED_NAME_ORDER_QUANTITY_LIMITS)
  @javax.annotation.Nullable
  private List<OrderQuantityLimit> orderQuantityLimits = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAY_QUANTITY_LIMITS = "dayQuantityLimits";
  @SerializedName(SERIALIZED_NAME_DAY_QUANTITY_LIMITS)
  @javax.annotation.Nullable
  private List<DayQuantityLimit> dayQuantityLimits = new ArrayList<>();

  public TradingLimits() {
  }

  public TradingLimits orderValueLimits(@javax.annotation.Nullable OrderValueLimits orderValueLimits) {
    this.orderValueLimits = orderValueLimits;
    return this;
  }

  /**
   * Get orderValueLimits
   * @return orderValueLimits
   */
  @javax.annotation.Nullable
  public OrderValueLimits getOrderValueLimits() {
    return orderValueLimits;
  }

  public void setOrderValueLimits(@javax.annotation.Nullable OrderValueLimits orderValueLimits) {
    this.orderValueLimits = orderValueLimits;
  }


  public TradingLimits efpQuantityLimits(@javax.annotation.Nullable EFPQuantityLimits efpQuantityLimits) {
    this.efpQuantityLimits = efpQuantityLimits;
    return this;
  }

  /**
   * Get efpQuantityLimits
   * @return efpQuantityLimits
   */
  @javax.annotation.Nullable
  public EFPQuantityLimits getEfpQuantityLimits() {
    return efpQuantityLimits;
  }

  public void setEfpQuantityLimits(@javax.annotation.Nullable EFPQuantityLimits efpQuantityLimits) {
    this.efpQuantityLimits = efpQuantityLimits;
  }


  public TradingLimits orderQuantityLimits(@javax.annotation.Nullable List<OrderQuantityLimit> orderQuantityLimits) {
    this.orderQuantityLimits = orderQuantityLimits;
    return this;
  }

  public TradingLimits addOrderQuantityLimitsItem(OrderQuantityLimit orderQuantityLimitsItem) {
    if (this.orderQuantityLimits == null) {
      this.orderQuantityLimits = new ArrayList<>();
    }
    this.orderQuantityLimits.add(orderQuantityLimitsItem);
    return this;
  }

  /**
   * Get orderQuantityLimits
   * @return orderQuantityLimits
   */
  @javax.annotation.Nullable
  public List<OrderQuantityLimit> getOrderQuantityLimits() {
    return orderQuantityLimits;
  }

  public void setOrderQuantityLimits(@javax.annotation.Nullable List<OrderQuantityLimit> orderQuantityLimits) {
    this.orderQuantityLimits = orderQuantityLimits;
  }


  public TradingLimits dayQuantityLimits(@javax.annotation.Nullable List<DayQuantityLimit> dayQuantityLimits) {
    this.dayQuantityLimits = dayQuantityLimits;
    return this;
  }

  public TradingLimits addDayQuantityLimitsItem(DayQuantityLimit dayQuantityLimitsItem) {
    if (this.dayQuantityLimits == null) {
      this.dayQuantityLimits = new ArrayList<>();
    }
    this.dayQuantityLimits.add(dayQuantityLimitsItem);
    return this;
  }

  /**
   * Get dayQuantityLimits
   * @return dayQuantityLimits
   */
  @javax.annotation.Nullable
  public List<DayQuantityLimit> getDayQuantityLimits() {
    return dayQuantityLimits;
  }

  public void setDayQuantityLimits(@javax.annotation.Nullable List<DayQuantityLimit> dayQuantityLimits) {
    this.dayQuantityLimits = dayQuantityLimits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradingLimits tradingLimits = (TradingLimits) o;
    return Objects.equals(this.orderValueLimits, tradingLimits.orderValueLimits) &&
        Objects.equals(this.efpQuantityLimits, tradingLimits.efpQuantityLimits) &&
        Objects.equals(this.orderQuantityLimits, tradingLimits.orderQuantityLimits) &&
        Objects.equals(this.dayQuantityLimits, tradingLimits.dayQuantityLimits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderValueLimits, efpQuantityLimits, orderQuantityLimits, dayQuantityLimits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradingLimits {\n");
    sb.append("    orderValueLimits: ").append(toIndentedString(orderValueLimits)).append("\n");
    sb.append("    efpQuantityLimits: ").append(toIndentedString(efpQuantityLimits)).append("\n");
    sb.append("    orderQuantityLimits: ").append(toIndentedString(orderQuantityLimits)).append("\n");
    sb.append("    dayQuantityLimits: ").append(toIndentedString(dayQuantityLimits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderValueLimits");
    openapiFields.add("efpQuantityLimits");
    openapiFields.add("orderQuantityLimits");
    openapiFields.add("dayQuantityLimits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradingLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradingLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradingLimits is not found in the empty JSON string", TradingLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradingLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradingLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `orderValueLimits`
      if (jsonObj.get("orderValueLimits") != null && !jsonObj.get("orderValueLimits").isJsonNull()) {
        OrderValueLimits.validateJsonElement(jsonObj.get("orderValueLimits"));
      }
      // validate the optional field `efpQuantityLimits`
      if (jsonObj.get("efpQuantityLimits") != null && !jsonObj.get("efpQuantityLimits").isJsonNull()) {
        EFPQuantityLimits.validateJsonElement(jsonObj.get("efpQuantityLimits"));
      }
      if (jsonObj.get("orderQuantityLimits") != null && !jsonObj.get("orderQuantityLimits").isJsonNull()) {
        JsonArray jsonArrayorderQuantityLimits = jsonObj.getAsJsonArray("orderQuantityLimits");
        if (jsonArrayorderQuantityLimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderQuantityLimits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderQuantityLimits` to be an array in the JSON string but got `%s`", jsonObj.get("orderQuantityLimits").toString()));
          }

          // validate the optional field `orderQuantityLimits` (array)
          for (int i = 0; i < jsonArrayorderQuantityLimits.size(); i++) {
            OrderQuantityLimit.validateJsonElement(jsonArrayorderQuantityLimits.get(i));
          };
        }
      }
      if (jsonObj.get("dayQuantityLimits") != null && !jsonObj.get("dayQuantityLimits").isJsonNull()) {
        JsonArray jsonArraydayQuantityLimits = jsonObj.getAsJsonArray("dayQuantityLimits");
        if (jsonArraydayQuantityLimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dayQuantityLimits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dayQuantityLimits` to be an array in the JSON string but got `%s`", jsonObj.get("dayQuantityLimits").toString()));
          }

          // validate the optional field `dayQuantityLimits` (array)
          for (int i = 0; i < jsonArraydayQuantityLimits.size(); i++) {
            DayQuantityLimit.validateJsonElement(jsonArraydayQuantityLimits.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradingLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradingLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradingLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradingLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<TradingLimits>() {
           @Override
           public void write(JsonWriter out, TradingLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradingLimits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradingLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradingLimits
   * @throws IOException if the JSON string is invalid with respect to TradingLimits
   */
  public static TradingLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradingLimits.class);
  }

  /**
   * Convert an instance of TradingLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

