/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Presets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Presets {
  public static final String SERIALIZED_NAME_GROUP_AUTO_CLOSE_POSITIONS = "group_auto_close_positions";
  @SerializedName(SERIALIZED_NAME_GROUP_AUTO_CLOSE_POSITIONS)
  @javax.annotation.Nullable
  private Boolean groupAutoClosePositions;

  /**
   * Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * &#x60;A&#x60; - Available Equity   * &#x60;E&#x60; - Equal   * &#x60;N&#x60; - Net Liquidation Value  User-specified allocation methods:   * &#x60;C&#x60; - Cash Quantity   * &#x60;P&#x60; - Percentage   * &#x60;R&#x60; - Ratios   * &#x60;S&#x60; - Shares 
   */
  @JsonAdapter(DefaultMethodForAllEnum.Adapter.class)
  public enum DefaultMethodForAllEnum {
    AVAILABLE_EQUITY("AvailableEquity"),
    
    E("E"),
    
    N("N"),
    
    C("C"),
    
    P("P"),
    
    R("R"),
    
    S("S");

    private String value;

    DefaultMethodForAllEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultMethodForAllEnum fromValue(String value) {
      for (DefaultMethodForAllEnum b : DefaultMethodForAllEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultMethodForAllEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultMethodForAllEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultMethodForAllEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultMethodForAllEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultMethodForAllEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_METHOD_FOR_ALL = "default_method_for_all";
  @SerializedName(SERIALIZED_NAME_DEFAULT_METHOD_FOR_ALL)
  @javax.annotation.Nullable
  private DefaultMethodForAllEnum defaultMethodForAll;

  public static final String SERIALIZED_NAME_PROFILES_AUTO_CLOSE_POSITIONS = "profiles_auto_close_positions";
  @SerializedName(SERIALIZED_NAME_PROFILES_AUTO_CLOSE_POSITIONS)
  @javax.annotation.Nullable
  private Boolean profilesAutoClosePositions;

  public static final String SERIALIZED_NAME_STRICT_CREDIT_CHECK = "strict_credit_check";
  @SerializedName(SERIALIZED_NAME_STRICT_CREDIT_CHECK)
  @javax.annotation.Nullable
  private Boolean strictCreditCheck;

  public static final String SERIALIZED_NAME_GROUP_PROPORTIONAL_ALLOCATION = "group_proportional_allocation";
  @SerializedName(SERIALIZED_NAME_GROUP_PROPORTIONAL_ALLOCATION)
  @javax.annotation.Nullable
  private Boolean groupProportionalAllocation;

  public Presets() {
  }

  public Presets groupAutoClosePositions(@javax.annotation.Nullable Boolean groupAutoClosePositions) {
    this.groupAutoClosePositions = groupAutoClosePositions;
    return this;
  }

  /**
   * Determines if allocation groups should prioritize closing positions over equal distribution.
   * @return groupAutoClosePositions
   */
  @javax.annotation.Nullable
  public Boolean getGroupAutoClosePositions() {
    return groupAutoClosePositions;
  }

  public void setGroupAutoClosePositions(@javax.annotation.Nullable Boolean groupAutoClosePositions) {
    this.groupAutoClosePositions = groupAutoClosePositions;
  }


  public Presets defaultMethodForAll(@javax.annotation.Nullable DefaultMethodForAllEnum defaultMethodForAll) {
    this.defaultMethodForAll = defaultMethodForAll;
    return this;
  }

  /**
   * Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * &#x60;A&#x60; - Available Equity   * &#x60;E&#x60; - Equal   * &#x60;N&#x60; - Net Liquidation Value  User-specified allocation methods:   * &#x60;C&#x60; - Cash Quantity   * &#x60;P&#x60; - Percentage   * &#x60;R&#x60; - Ratios   * &#x60;S&#x60; - Shares 
   * @return defaultMethodForAll
   */
  @javax.annotation.Nullable
  public DefaultMethodForAllEnum getDefaultMethodForAll() {
    return defaultMethodForAll;
  }

  public void setDefaultMethodForAll(@javax.annotation.Nullable DefaultMethodForAllEnum defaultMethodForAll) {
    this.defaultMethodForAll = defaultMethodForAll;
  }


  public Presets profilesAutoClosePositions(@javax.annotation.Nullable Boolean profilesAutoClosePositions) {
    this.profilesAutoClosePositions = profilesAutoClosePositions;
    return this;
  }

  /**
   * Determines if allocation profiles should prioritize closing positions over equal distribution.
   * @return profilesAutoClosePositions
   */
  @javax.annotation.Nullable
  public Boolean getProfilesAutoClosePositions() {
    return profilesAutoClosePositions;
  }

  public void setProfilesAutoClosePositions(@javax.annotation.Nullable Boolean profilesAutoClosePositions) {
    this.profilesAutoClosePositions = profilesAutoClosePositions;
  }


  public Presets strictCreditCheck(@javax.annotation.Nullable Boolean strictCreditCheck) {
    this.strictCreditCheck = strictCreditCheck;
    return this;
  }

  /**
   * Determines if the system should always check user credit before beginning the order process every time, or only at the time of order placement and execution.
   * @return strictCreditCheck
   */
  @javax.annotation.Nullable
  public Boolean getStrictCreditCheck() {
    return strictCreditCheck;
  }

  public void setStrictCreditCheck(@javax.annotation.Nullable Boolean strictCreditCheck) {
    this.strictCreditCheck = strictCreditCheck;
  }


  public Presets groupProportionalAllocation(@javax.annotation.Nullable Boolean groupProportionalAllocation) {
    this.groupProportionalAllocation = groupProportionalAllocation;
    return this;
  }

  /**
   * Determines if the system should keep allocation groups proportional for scaling.
   * @return groupProportionalAllocation
   */
  @javax.annotation.Nullable
  public Boolean getGroupProportionalAllocation() {
    return groupProportionalAllocation;
  }

  public void setGroupProportionalAllocation(@javax.annotation.Nullable Boolean groupProportionalAllocation) {
    this.groupProportionalAllocation = groupProportionalAllocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Presets presets = (Presets) o;
    return Objects.equals(this.groupAutoClosePositions, presets.groupAutoClosePositions) &&
        Objects.equals(this.defaultMethodForAll, presets.defaultMethodForAll) &&
        Objects.equals(this.profilesAutoClosePositions, presets.profilesAutoClosePositions) &&
        Objects.equals(this.strictCreditCheck, presets.strictCreditCheck) &&
        Objects.equals(this.groupProportionalAllocation, presets.groupProportionalAllocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupAutoClosePositions, defaultMethodForAll, profilesAutoClosePositions, strictCreditCheck, groupProportionalAllocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Presets {\n");
    sb.append("    groupAutoClosePositions: ").append(toIndentedString(groupAutoClosePositions)).append("\n");
    sb.append("    defaultMethodForAll: ").append(toIndentedString(defaultMethodForAll)).append("\n");
    sb.append("    profilesAutoClosePositions: ").append(toIndentedString(profilesAutoClosePositions)).append("\n");
    sb.append("    strictCreditCheck: ").append(toIndentedString(strictCreditCheck)).append("\n");
    sb.append("    groupProportionalAllocation: ").append(toIndentedString(groupProportionalAllocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_auto_close_positions");
    openapiFields.add("default_method_for_all");
    openapiFields.add("profiles_auto_close_positions");
    openapiFields.add("strict_credit_check");
    openapiFields.add("group_proportional_allocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Presets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Presets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Presets is not found in the empty JSON string", Presets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Presets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Presets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_method_for_all") != null && !jsonObj.get("default_method_for_all").isJsonNull()) && !jsonObj.get("default_method_for_all").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_method_for_all` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_method_for_all").toString()));
      }
      // validate the optional field `default_method_for_all`
      if (jsonObj.get("default_method_for_all") != null && !jsonObj.get("default_method_for_all").isJsonNull()) {
        DefaultMethodForAllEnum.validateJsonElement(jsonObj.get("default_method_for_all"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Presets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Presets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Presets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Presets.class));

       return (TypeAdapter<T>) new TypeAdapter<Presets>() {
           @Override
           public void write(JsonWriter out, Presets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Presets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Presets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Presets
   * @throws IOException if the JSON string is invalid with respect to Presets
   */
  public static Presets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Presets.class);
  }

  /**
   * Convert an instance of Presets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

