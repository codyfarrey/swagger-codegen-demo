/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SuccessfulTickleResponseHmds;
import org.openapitools.client.model.SuccessfulTickleResponseIserver;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuccessfulTickleResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SuccessfulTickleResponse {
  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  @javax.annotation.Nullable
  private String session;

  public static final String SERIALIZED_NAME_SSO_EXPIRES = "ssoExpires";
  @SerializedName(SERIALIZED_NAME_SSO_EXPIRES)
  @javax.annotation.Nullable
  private Integer ssoExpires;

  public static final String SERIALIZED_NAME_COLLISSION = "collission";
  @SerializedName(SERIALIZED_NAME_COLLISSION)
  @javax.annotation.Nullable
  private Boolean collission;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private Integer userId;

  public static final String SERIALIZED_NAME_HMDS = "hmds";
  @SerializedName(SERIALIZED_NAME_HMDS)
  @javax.annotation.Nullable
  private SuccessfulTickleResponseHmds hmds;

  public static final String SERIALIZED_NAME_ISERVER = "iserver";
  @SerializedName(SERIALIZED_NAME_ISERVER)
  @javax.annotation.Nullable
  private SuccessfulTickleResponseIserver iserver;

  public SuccessfulTickleResponse() {
  }

  public SuccessfulTickleResponse session(@javax.annotation.Nullable String session) {
    this.session = session;
    return this;
  }

  /**
   * Returns the session token of the contract.
   * @return session
   */
  @javax.annotation.Nullable
  public String getSession() {
    return session;
  }

  public void setSession(@javax.annotation.Nullable String session) {
    this.session = session;
  }


  public SuccessfulTickleResponse ssoExpires(@javax.annotation.Nullable Integer ssoExpires) {
    this.ssoExpires = ssoExpires;
    return this;
  }

  /**
   * Returns the number of milliseconds until the current sso session expires.
   * @return ssoExpires
   */
  @javax.annotation.Nullable
  public Integer getSsoExpires() {
    return ssoExpires;
  }

  public void setSsoExpires(@javax.annotation.Nullable Integer ssoExpires) {
    this.ssoExpires = ssoExpires;
  }


  public SuccessfulTickleResponse collission(@javax.annotation.Nullable Boolean collission) {
    this.collission = collission;
    return this;
  }

  /**
   * (Internal Use Only)
   * @return collission
   */
  @javax.annotation.Nullable
  public Boolean getCollission() {
    return collission;
  }

  public void setCollission(@javax.annotation.Nullable Boolean collission) {
    this.collission = collission;
  }


  public SuccessfulTickleResponse userId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * (Internal Use Only)
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable Integer userId) {
    this.userId = userId;
  }


  public SuccessfulTickleResponse hmds(@javax.annotation.Nullable SuccessfulTickleResponseHmds hmds) {
    this.hmds = hmds;
    return this;
  }

  /**
   * Get hmds
   * @return hmds
   */
  @javax.annotation.Nullable
  public SuccessfulTickleResponseHmds getHmds() {
    return hmds;
  }

  public void setHmds(@javax.annotation.Nullable SuccessfulTickleResponseHmds hmds) {
    this.hmds = hmds;
  }


  public SuccessfulTickleResponse iserver(@javax.annotation.Nullable SuccessfulTickleResponseIserver iserver) {
    this.iserver = iserver;
    return this;
  }

  /**
   * Get iserver
   * @return iserver
   */
  @javax.annotation.Nullable
  public SuccessfulTickleResponseIserver getIserver() {
    return iserver;
  }

  public void setIserver(@javax.annotation.Nullable SuccessfulTickleResponseIserver iserver) {
    this.iserver = iserver;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessfulTickleResponse successfulTickleResponse = (SuccessfulTickleResponse) o;
    return Objects.equals(this.session, successfulTickleResponse.session) &&
        Objects.equals(this.ssoExpires, successfulTickleResponse.ssoExpires) &&
        Objects.equals(this.collission, successfulTickleResponse.collission) &&
        Objects.equals(this.userId, successfulTickleResponse.userId) &&
        Objects.equals(this.hmds, successfulTickleResponse.hmds) &&
        Objects.equals(this.iserver, successfulTickleResponse.iserver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(session, ssoExpires, collission, userId, hmds, iserver);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessfulTickleResponse {\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    ssoExpires: ").append(toIndentedString(ssoExpires)).append("\n");
    sb.append("    collission: ").append(toIndentedString(collission)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    hmds: ").append(toIndentedString(hmds)).append("\n");
    sb.append("    iserver: ").append(toIndentedString(iserver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("session");
    openapiFields.add("ssoExpires");
    openapiFields.add("collission");
    openapiFields.add("userId");
    openapiFields.add("hmds");
    openapiFields.add("iserver");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuccessfulTickleResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuccessfulTickleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessfulTickleResponse is not found in the empty JSON string", SuccessfulTickleResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuccessfulTickleResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuccessfulTickleResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) && !jsonObj.get("session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session").toString()));
      }
      // validate the optional field `hmds`
      if (jsonObj.get("hmds") != null && !jsonObj.get("hmds").isJsonNull()) {
        SuccessfulTickleResponseHmds.validateJsonElement(jsonObj.get("hmds"));
      }
      // validate the optional field `iserver`
      if (jsonObj.get("iserver") != null && !jsonObj.get("iserver").isJsonNull()) {
        SuccessfulTickleResponseIserver.validateJsonElement(jsonObj.get("iserver"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessfulTickleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessfulTickleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessfulTickleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessfulTickleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessfulTickleResponse>() {
           @Override
           public void write(JsonWriter out, SuccessfulTickleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessfulTickleResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuccessfulTickleResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuccessfulTickleResponse
   * @throws IOException if the JSON string is invalid with respect to SuccessfulTickleResponse
   */
  public static SuccessfulTickleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessfulTickleResponse.class);
  }

  /**
   * Convert an instance of SuccessfulTickleResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

