/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IserverAccountAccountIdOrderOrderIdDelete200Response;
import org.openapitools.client.model.IserverAccountAccountIdOrderOrderIdPost200Response;
import org.openapitools.client.model.IserverAccountOrderStatusOrderIdGet200Response;
import org.openapitools.client.model.IserverNotificationPostRequest;
import org.openapitools.client.model.IserverQuestionsSuppressPost200Response;
import org.openapitools.client.model.IserverQuestionsSuppressPostRequest;
import org.openapitools.client.model.IserverQuestionsSuppressResetPost200Response;
import org.openapitools.client.model.IserverReplyReplyIdPost200Response;
import org.openapitools.client.model.IserverReplyReplyIdPostRequest;
import org.openapitools.client.model.LiveOrdersResponse;
import org.openapitools.client.model.OrderPreview;
import org.openapitools.client.model.SingleOrderSubmissionRequest;
import org.openapitools.client.model.TradesResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iserverAccountAccountIdOrderOrderIdDelete
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrderOrderIdDeleteCall(String accountId, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/order/{orderId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(String accountId, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrderOrderIdDelete(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling iserverAccountAccountIdOrderOrderIdDelete(Async)");
        }

        return iserverAccountAccountIdOrderOrderIdDeleteCall(accountId, orderId, _callback);

    }

    /**
     * Cancel An Existing, Unfilled Order.
     * Cancel an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @return IserverAccountAccountIdOrderOrderIdDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverAccountAccountIdOrderOrderIdDelete200Response iserverAccountAccountIdOrderOrderIdDelete(String accountId, String orderId) throws ApiException {
        ApiResponse<IserverAccountAccountIdOrderOrderIdDelete200Response> localVarResp = iserverAccountAccountIdOrderOrderIdDeleteWithHttpInfo(accountId, orderId);
        return localVarResp.getData();
    }

    /**
     * Cancel An Existing, Unfilled Order.
     * Cancel an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @return ApiResponse&lt;IserverAccountAccountIdOrderOrderIdDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverAccountAccountIdOrderOrderIdDelete200Response> iserverAccountAccountIdOrderOrderIdDeleteWithHttpInfo(String accountId, String orderId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(accountId, orderId, null);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel An Existing, Unfilled Order. (asynchronously)
     * Cancel an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrderOrderIdDeleteAsync(String accountId, String orderId, final ApiCallback<IserverAccountAccountIdOrderOrderIdDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdOrderOrderIdDeleteValidateBeforeCall(accountId, orderId, _callback);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdOrderOrderIdPost
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrderOrderIdPostCall(String accountId, String orderId, SingleOrderSubmissionRequest singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleOrderSubmissionRequest;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/order/{orderId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(String accountId, String orderId, SingleOrderSubmissionRequest singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrderOrderIdPost(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling iserverAccountAccountIdOrderOrderIdPost(Async)");
        }

        // verify the required parameter 'singleOrderSubmissionRequest' is set
        if (singleOrderSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'singleOrderSubmissionRequest' when calling iserverAccountAccountIdOrderOrderIdPost(Async)");
        }

        return iserverAccountAccountIdOrderOrderIdPostCall(accountId, orderId, singleOrderSubmissionRequest, _callback);

    }

    /**
     * Modify An Existing, Unfilled Order.
     * Modify an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return IserverAccountAccountIdOrderOrderIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverAccountAccountIdOrderOrderIdPost200Response iserverAccountAccountIdOrderOrderIdPost(String accountId, String orderId, SingleOrderSubmissionRequest singleOrderSubmissionRequest) throws ApiException {
        ApiResponse<IserverAccountAccountIdOrderOrderIdPost200Response> localVarResp = iserverAccountAccountIdOrderOrderIdPostWithHttpInfo(accountId, orderId, singleOrderSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Modify An Existing, Unfilled Order.
     * Modify an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return ApiResponse&lt;IserverAccountAccountIdOrderOrderIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverAccountAccountIdOrderOrderIdPost200Response> iserverAccountAccountIdOrderOrderIdPostWithHttpInfo(String accountId, String orderId, SingleOrderSubmissionRequest singleOrderSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(accountId, orderId, singleOrderSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify An Existing, Unfilled Order. (asynchronously)
     * Modify an existing, unfilled order.
     * @param accountId The account to which the order will clear. (required)
     * @param orderId The IB-assigned order ID of the desired order ticket. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submission </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrderOrderIdPostAsync(String accountId, String orderId, SingleOrderSubmissionRequest singleOrderSubmissionRequest, final ApiCallback<IserverAccountAccountIdOrderOrderIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdOrderOrderIdPostValidateBeforeCall(accountId, orderId, singleOrderSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdOrdersPost
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order submission response (success, error, reply is required or order reject) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrdersPostCall(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleOrderSubmissionRequest;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/orders"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdOrdersPostValidateBeforeCall(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrdersPost(Async)");
        }

        // verify the required parameter 'singleOrderSubmissionRequest' is set
        if (singleOrderSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'singleOrderSubmissionRequest' when calling iserverAccountAccountIdOrdersPost(Async)");
        }

        return iserverAccountAccountIdOrdersPostCall(accountId, singleOrderSubmissionRequest, _callback);

    }

    /**
     * Submit A New Order(s) Ticket, Bracket, Or OCA Group.
     * Submit a new order(s) ticket, bracket, or OCA group.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return IserverAccountAccountIdOrderOrderIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order submission response (success, error, reply is required or order reject) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverAccountAccountIdOrderOrderIdPost200Response iserverAccountAccountIdOrdersPost(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest) throws ApiException {
        ApiResponse<IserverAccountAccountIdOrderOrderIdPost200Response> localVarResp = iserverAccountAccountIdOrdersPostWithHttpInfo(accountId, singleOrderSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Submit A New Order(s) Ticket, Bracket, Or OCA Group.
     * Submit a new order(s) ticket, bracket, or OCA group.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return ApiResponse&lt;IserverAccountAccountIdOrderOrderIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order submission response (success, error, reply is required or order reject) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverAccountAccountIdOrderOrderIdPost200Response> iserverAccountAccountIdOrdersPostWithHttpInfo(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdOrdersPostValidateBeforeCall(accountId, singleOrderSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit A New Order(s) Ticket, Bracket, Or OCA Group. (asynchronously)
     * Submit a new order(s) ticket, bracket, or OCA group.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order submission response (success, error, reply is required or order reject) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrdersPostAsync(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback<IserverAccountAccountIdOrderOrderIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdOrdersPostValidateBeforeCall(accountId, singleOrderSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<IserverAccountAccountIdOrderOrderIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdOrdersWhatifPost
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Preview </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrdersWhatifPostCall(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleOrderSubmissionRequest;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/orders/whatif"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdOrdersWhatifPost(Async)");
        }

        // verify the required parameter 'singleOrderSubmissionRequest' is set
        if (singleOrderSubmissionRequest == null) {
            throw new ApiException("Missing the required parameter 'singleOrderSubmissionRequest' when calling iserverAccountAccountIdOrdersWhatifPost(Async)");
        }

        return iserverAccountAccountIdOrdersWhatifPostCall(accountId, singleOrderSubmissionRequest, _callback);

    }

    /**
     * Preview The Projected Effects Of An Order Ticket Or Bracket Of Orders, Including Cost And Changes To Margin And Account Equity.
     * Preview the projected effects of an order ticket or bracket of orders, including cost and changes to margin and account equity.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return OrderPreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Preview </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public OrderPreview iserverAccountAccountIdOrdersWhatifPost(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest) throws ApiException {
        ApiResponse<OrderPreview> localVarResp = iserverAccountAccountIdOrdersWhatifPostWithHttpInfo(accountId, singleOrderSubmissionRequest);
        return localVarResp.getData();
    }

    /**
     * Preview The Projected Effects Of An Order Ticket Or Bracket Of Orders, Including Cost And Changes To Margin And Account Equity.
     * Preview the projected effects of an order ticket or bracket of orders, including cost and changes to margin and account equity.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @return ApiResponse&lt;OrderPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Preview </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderPreview> iserverAccountAccountIdOrdersWhatifPostWithHttpInfo(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(accountId, singleOrderSubmissionRequest, null);
        Type localVarReturnType = new TypeToken<OrderPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview The Projected Effects Of An Order Ticket Or Bracket Of Orders, Including Cost And Changes To Margin And Account Equity. (asynchronously)
     * Preview the projected effects of an order ticket or bracket of orders, including cost and changes to margin and account equity.
     * @param accountId The account to which the order will clear. (required)
     * @param singleOrderSubmissionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order Preview </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdOrdersWhatifPostAsync(String accountId, List<SingleOrderSubmissionRequest> singleOrderSubmissionRequest, final ApiCallback<OrderPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdOrdersWhatifPostValidateBeforeCall(accountId, singleOrderSubmissionRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountOrderStatusOrderIdGet
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> order status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountOrderStatusOrderIdGetCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/order/status/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountOrderStatusOrderIdGetValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling iserverAccountOrderStatusOrderIdGet(Async)");
        }

        return iserverAccountOrderStatusOrderIdGetCall(orderId, _callback);

    }

    /**
     * Retrieve The Status Of A Single Order.
     * Retrieve the status of a single order.
     * @param orderId  (required)
     * @return IserverAccountOrderStatusOrderIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> order status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverAccountOrderStatusOrderIdGet200Response iserverAccountOrderStatusOrderIdGet(String orderId) throws ApiException {
        ApiResponse<IserverAccountOrderStatusOrderIdGet200Response> localVarResp = iserverAccountOrderStatusOrderIdGetWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Retrieve The Status Of A Single Order.
     * Retrieve the status of a single order.
     * @param orderId  (required)
     * @return ApiResponse&lt;IserverAccountOrderStatusOrderIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> order status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverAccountOrderStatusOrderIdGet200Response> iserverAccountOrderStatusOrderIdGetWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountOrderStatusOrderIdGetValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<IserverAccountOrderStatusOrderIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve The Status Of A Single Order. (asynchronously)
     * Retrieve the status of a single order.
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> order status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountOrderStatusOrderIdGetAsync(String orderId, final ApiCallback<IserverAccountOrderStatusOrderIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountOrderStatusOrderIdGetValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<IserverAccountOrderStatusOrderIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountOrdersGet
     * @param filters Filter results using a comma-separated list of Order Status values. Also accepts a value to sort results by time. (optional)
     * @param force Instructs IB to clear cache of orders and obtain updated view from brokerage backend. Response will be an empty array. (optional)
     * @param accountId Retrieve orders for a specific account in the structure. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Orders for a specific account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountOrdersGetCall(String filters, Boolean force, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountOrdersGetValidateBeforeCall(String filters, Boolean force, String accountId, final ApiCallback _callback) throws ApiException {
        return iserverAccountOrdersGetCall(filters, force, accountId, _callback);

    }

    /**
     * Retrieves Open Orders And Filled Or Cancelled Orders Submitted During The Current Brokerage Session.
     * Retrieves open orders and filled or cancelled orders submitted during the current brokerage session.
     * @param filters Filter results using a comma-separated list of Order Status values. Also accepts a value to sort results by time. (optional)
     * @param force Instructs IB to clear cache of orders and obtain updated view from brokerage backend. Response will be an empty array. (optional)
     * @param accountId Retrieve orders for a specific account in the structure. (optional)
     * @return LiveOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Orders for a specific account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public LiveOrdersResponse iserverAccountOrdersGet(String filters, Boolean force, String accountId) throws ApiException {
        ApiResponse<LiveOrdersResponse> localVarResp = iserverAccountOrdersGetWithHttpInfo(filters, force, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves Open Orders And Filled Or Cancelled Orders Submitted During The Current Brokerage Session.
     * Retrieves open orders and filled or cancelled orders submitted during the current brokerage session.
     * @param filters Filter results using a comma-separated list of Order Status values. Also accepts a value to sort results by time. (optional)
     * @param force Instructs IB to clear cache of orders and obtain updated view from brokerage backend. Response will be an empty array. (optional)
     * @param accountId Retrieve orders for a specific account in the structure. (optional)
     * @return ApiResponse&lt;LiveOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Orders for a specific account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveOrdersResponse> iserverAccountOrdersGetWithHttpInfo(String filters, Boolean force, String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountOrdersGetValidateBeforeCall(filters, force, accountId, null);
        Type localVarReturnType = new TypeToken<LiveOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Open Orders And Filled Or Cancelled Orders Submitted During The Current Brokerage Session. (asynchronously)
     * Retrieves open orders and filled or cancelled orders submitted during the current brokerage session.
     * @param filters Filter results using a comma-separated list of Order Status values. Also accepts a value to sort results by time. (optional)
     * @param force Instructs IB to clear cache of orders and obtain updated view from brokerage backend. Response will be an empty array. (optional)
     * @param accountId Retrieve orders for a specific account in the structure. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Orders for a specific account </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountOrdersGetAsync(String filters, Boolean force, String accountId, final ApiCallback<LiveOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountOrdersGetValidateBeforeCall(filters, force, accountId, _callback);
        Type localVarReturnType = new TypeToken<LiveOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountTradesGet
     * @param days The number of prior days prior to include in response, up to a maximum of 7. If omitted, only the current day&#39;s executions will be returned. (optional)
     * @param accountId Filter trades by account ID or allocation group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trades </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountTradesGetCall(String days, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/trades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountTradesGetValidateBeforeCall(String days, String accountId, final ApiCallback _callback) throws ApiException {
        return iserverAccountTradesGetCall(days, accountId, _callback);

    }

    /**
     * Retrieve A List Of Trades.
     * Retrieve a list of trades, up to a maximum of 7 days prior.
     * @param days The number of prior days prior to include in response, up to a maximum of 7. If omitted, only the current day&#39;s executions will be returned. (optional)
     * @param accountId Filter trades by account ID or allocation group. (optional)
     * @return List&lt;TradesResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trades </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public List<TradesResponseInner> iserverAccountTradesGet(String days, String accountId) throws ApiException {
        ApiResponse<List<TradesResponseInner>> localVarResp = iserverAccountTradesGetWithHttpInfo(days, accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve A List Of Trades.
     * Retrieve a list of trades, up to a maximum of 7 days prior.
     * @param days The number of prior days prior to include in response, up to a maximum of 7. If omitted, only the current day&#39;s executions will be returned. (optional)
     * @param accountId Filter trades by account ID or allocation group. (optional)
     * @return ApiResponse&lt;List&lt;TradesResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trades </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TradesResponseInner>> iserverAccountTradesGetWithHttpInfo(String days, String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountTradesGetValidateBeforeCall(days, accountId, null);
        Type localVarReturnType = new TypeToken<List<TradesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve A List Of Trades. (asynchronously)
     * Retrieve a list of trades, up to a maximum of 7 days prior.
     * @param days The number of prior days prior to include in response, up to a maximum of 7. If omitted, only the current day&#39;s executions will be returned. (optional)
     * @param accountId Filter trades by account ID or allocation group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trades </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountTradesGetAsync(String days, String accountId, final ApiCallback<List<TradesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountTradesGetValidateBeforeCall(days, accountId, _callback);
        Type localVarReturnType = new TypeToken<List<TradesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverNotificationPost
     * @param iserverNotificationPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submitted prompt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverNotificationPostCall(IserverNotificationPostRequest iserverNotificationPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverNotificationPostRequest;

        // create path and map variables
        String localVarPath = "/iserver/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverNotificationPostValidateBeforeCall(IserverNotificationPostRequest iserverNotificationPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iserverNotificationPostRequest' is set
        if (iserverNotificationPostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverNotificationPostRequest' when calling iserverNotificationPost(Async)");
        }

        return iserverNotificationPostCall(iserverNotificationPostRequest, _callback);

    }

    /**
     * Respond To A Server Prompt.
     * Respond to a server prompt received via ntf webscoket message.
     * @param iserverNotificationPostRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submitted prompt </td><td>  -  </td></tr>
     </table>
     */
    public String iserverNotificationPost(IserverNotificationPostRequest iserverNotificationPostRequest) throws ApiException {
        ApiResponse<String> localVarResp = iserverNotificationPostWithHttpInfo(iserverNotificationPostRequest);
        return localVarResp.getData();
    }

    /**
     * Respond To A Server Prompt.
     * Respond to a server prompt received via ntf webscoket message.
     * @param iserverNotificationPostRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submitted prompt </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> iserverNotificationPostWithHttpInfo(IserverNotificationPostRequest iserverNotificationPostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverNotificationPostValidateBeforeCall(iserverNotificationPostRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Respond To A Server Prompt. (asynchronously)
     * Respond to a server prompt received via ntf webscoket message.
     * @param iserverNotificationPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of submitted prompt </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverNotificationPostAsync(IserverNotificationPostRequest iserverNotificationPostRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverNotificationPostValidateBeforeCall(iserverNotificationPostRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverQuestionsSuppressPost
     * @param iserverQuestionsSuppressPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverQuestionsSuppressPostCall(IserverQuestionsSuppressPostRequest iserverQuestionsSuppressPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverQuestionsSuppressPostRequest;

        // create path and map variables
        String localVarPath = "/iserver/questions/suppress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverQuestionsSuppressPostValidateBeforeCall(IserverQuestionsSuppressPostRequest iserverQuestionsSuppressPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iserverQuestionsSuppressPostRequest' is set
        if (iserverQuestionsSuppressPostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverQuestionsSuppressPostRequest' when calling iserverQuestionsSuppressPost(Async)");
        }

        return iserverQuestionsSuppressPostCall(iserverQuestionsSuppressPostRequest, _callback);

    }

    /**
     * Suppress The Specified Order Reply Messages.
     * Suppress the specified order reply messages for the duration of the brokerage session.
     * @param iserverQuestionsSuppressPostRequest  (required)
     * @return IserverQuestionsSuppressPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverQuestionsSuppressPost200Response iserverQuestionsSuppressPost(IserverQuestionsSuppressPostRequest iserverQuestionsSuppressPostRequest) throws ApiException {
        ApiResponse<IserverQuestionsSuppressPost200Response> localVarResp = iserverQuestionsSuppressPostWithHttpInfo(iserverQuestionsSuppressPostRequest);
        return localVarResp.getData();
    }

    /**
     * Suppress The Specified Order Reply Messages.
     * Suppress the specified order reply messages for the duration of the brokerage session.
     * @param iserverQuestionsSuppressPostRequest  (required)
     * @return ApiResponse&lt;IserverQuestionsSuppressPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverQuestionsSuppressPost200Response> iserverQuestionsSuppressPostWithHttpInfo(IserverQuestionsSuppressPostRequest iserverQuestionsSuppressPostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverQuestionsSuppressPostValidateBeforeCall(iserverQuestionsSuppressPostRequest, null);
        Type localVarReturnType = new TypeToken<IserverQuestionsSuppressPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suppress The Specified Order Reply Messages. (asynchronously)
     * Suppress the specified order reply messages for the duration of the brokerage session.
     * @param iserverQuestionsSuppressPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverQuestionsSuppressPostAsync(IserverQuestionsSuppressPostRequest iserverQuestionsSuppressPostRequest, final ApiCallback<IserverQuestionsSuppressPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverQuestionsSuppressPostValidateBeforeCall(iserverQuestionsSuppressPostRequest, _callback);
        Type localVarReturnType = new TypeToken<IserverQuestionsSuppressPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverQuestionsSuppressResetPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverQuestionsSuppressResetPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/questions/suppress/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverQuestionsSuppressResetPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverQuestionsSuppressResetPostCall(_callback);

    }

    /**
     * Removes Suppression Of All Order Reply Messages.
     * Removes suppression of all order reply messages that were previously suppressed in the current brokerage session.
     * @return IserverQuestionsSuppressResetPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverQuestionsSuppressResetPost200Response iserverQuestionsSuppressResetPost() throws ApiException {
        ApiResponse<IserverQuestionsSuppressResetPost200Response> localVarResp = iserverQuestionsSuppressResetPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Removes Suppression Of All Order Reply Messages.
     * Removes suppression of all order reply messages that were previously suppressed in the current brokerage session.
     * @return ApiResponse&lt;IserverQuestionsSuppressResetPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverQuestionsSuppressResetPost200Response> iserverQuestionsSuppressResetPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverQuestionsSuppressResetPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IserverQuestionsSuppressResetPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes Suppression Of All Order Reply Messages. (asynchronously)
     * Removes suppression of all order reply messages that were previously suppressed in the current brokerage session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request&#39;s status </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverQuestionsSuppressResetPostAsync(final ApiCallback<IserverQuestionsSuppressResetPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverQuestionsSuppressResetPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IserverQuestionsSuppressResetPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverReplyReplyIdPost
     * @param replyId The UUID of the reply message to be confirmed, obtained from an order submission response. (required)
     * @param iserverReplyReplyIdPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of reply </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverReplyReplyIdPostCall(String replyId, IserverReplyReplyIdPostRequest iserverReplyReplyIdPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverReplyReplyIdPostRequest;

        // create path and map variables
        String localVarPath = "/iserver/reply/{replyId}"
            .replace("{" + "replyId" + "}", localVarApiClient.escapeString(replyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverReplyReplyIdPostValidateBeforeCall(String replyId, IserverReplyReplyIdPostRequest iserverReplyReplyIdPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replyId' is set
        if (replyId == null) {
            throw new ApiException("Missing the required parameter 'replyId' when calling iserverReplyReplyIdPost(Async)");
        }

        // verify the required parameter 'iserverReplyReplyIdPostRequest' is set
        if (iserverReplyReplyIdPostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverReplyReplyIdPostRequest' when calling iserverReplyReplyIdPost(Async)");
        }

        return iserverReplyReplyIdPostCall(replyId, iserverReplyReplyIdPostRequest, _callback);

    }

    /**
     * Confirm An Order Reply Message.
     * Confirm an order reply message and continue with submission of order ticket.
     * @param replyId The UUID of the reply message to be confirmed, obtained from an order submission response. (required)
     * @param iserverReplyReplyIdPostRequest  (required)
     * @return IserverReplyReplyIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of reply </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverReplyReplyIdPost200Response iserverReplyReplyIdPost(String replyId, IserverReplyReplyIdPostRequest iserverReplyReplyIdPostRequest) throws ApiException {
        ApiResponse<IserverReplyReplyIdPost200Response> localVarResp = iserverReplyReplyIdPostWithHttpInfo(replyId, iserverReplyReplyIdPostRequest);
        return localVarResp.getData();
    }

    /**
     * Confirm An Order Reply Message.
     * Confirm an order reply message and continue with submission of order ticket.
     * @param replyId The UUID of the reply message to be confirmed, obtained from an order submission response. (required)
     * @param iserverReplyReplyIdPostRequest  (required)
     * @return ApiResponse&lt;IserverReplyReplyIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of reply </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverReplyReplyIdPost200Response> iserverReplyReplyIdPostWithHttpInfo(String replyId, IserverReplyReplyIdPostRequest iserverReplyReplyIdPostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverReplyReplyIdPostValidateBeforeCall(replyId, iserverReplyReplyIdPostRequest, null);
        Type localVarReturnType = new TypeToken<IserverReplyReplyIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm An Order Reply Message. (asynchronously)
     * Confirm an order reply message and continue with submission of order ticket.
     * @param replyId The UUID of the reply message to be confirmed, obtained from an order submission response. (required)
     * @param iserverReplyReplyIdPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of reply </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverReplyReplyIdPostAsync(String replyId, IserverReplyReplyIdPostRequest iserverReplyReplyIdPostRequest, final ApiCallback<IserverReplyReplyIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverReplyReplyIdPostValidateBeforeCall(replyId, iserverReplyReplyIdPostRequest, _callback);
        Type localVarReturnType = new TypeToken<IserverReplyReplyIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
