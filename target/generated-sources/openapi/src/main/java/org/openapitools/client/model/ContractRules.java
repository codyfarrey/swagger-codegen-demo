/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContractRulesIncrementRulesInner;
import org.openapitools.client.model.ContractRulesOrderDefaults;
import org.openapitools.client.model.ContractRulesTifDefaults;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * detailed contract information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class ContractRules {
  public static final String SERIALIZED_NAME_ALGO_ELIGIBLE = "algoEligible";
  @SerializedName(SERIALIZED_NAME_ALGO_ELIGIBLE)
  @javax.annotation.Nullable
  private Boolean algoEligible;

  public static final String SERIALIZED_NAME_OVERNIGHT_ELIGIBLE = "overnightEligible";
  @SerializedName(SERIALIZED_NAME_OVERNIGHT_ELIGIBLE)
  @javax.annotation.Nullable
  private Boolean overnightEligible;

  public static final String SERIALIZED_NAME_COST_REPORT = "costReport";
  @SerializedName(SERIALIZED_NAME_COST_REPORT)
  @javax.annotation.Nullable
  private Boolean costReport;

  public static final String SERIALIZED_NAME_CAN_TRADE_ACCT_IDS = "canTradeAcctIds";
  @SerializedName(SERIALIZED_NAME_CAN_TRADE_ACCT_IDS)
  @javax.annotation.Nullable
  private List<String> canTradeAcctIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  /**
   * Gets or Sets orderTypes
   */
  @JsonAdapter(OrderTypesEnum.Adapter.class)
  public enum OrderTypesEnum {
    LIMIT("limit"),
    
    MIDPRICE("midprice"),
    
    MARKET("market"),
    
    STOP("stop"),
    
    STOP_LIMIT("stop_limit"),
    
    MIT("mit"),
    
    LIT("lit"),
    
    TRAILING_STOP("trailing_stop"),
    
    TRAILING_STOP_LIMIT("trailing_stop_limit"),
    
    RELATIVE("relative"),
    
    MARKETONCLOSE("marketonclose"),
    
    LIMITONCLOSE("limitonclose");

    private String value;

    OrderTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderTypesEnum fromValue(String value) {
      for (OrderTypesEnum b : OrderTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_TYPES = "orderTypes";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPES)
  @javax.annotation.Nullable
  private List<OrderTypesEnum> orderTypes = new ArrayList<>();

  /**
   * Gets or Sets ibAlgoTypes
   */
  @JsonAdapter(IbAlgoTypesEnum.Adapter.class)
  public enum IbAlgoTypesEnum {
    LIMIT("limit"),
    
    STOP_LIMIT("stop_limit"),
    
    LIT("lit"),
    
    TRAILING_STOP_LIMIT("trailing_stop_limit"),
    
    RELATIVE("relative"),
    
    MARKETONCLOSE("marketonclose"),
    
    LIMITONCLOSE("limitonclose");

    private String value;

    IbAlgoTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IbAlgoTypesEnum fromValue(String value) {
      for (IbAlgoTypesEnum b : IbAlgoTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IbAlgoTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IbAlgoTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IbAlgoTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IbAlgoTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IbAlgoTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IB_ALGO_TYPES = "ibAlgoTypes";
  @SerializedName(SERIALIZED_NAME_IB_ALGO_TYPES)
  @javax.annotation.Nullable
  private List<IbAlgoTypesEnum> ibAlgoTypes = new ArrayList<>();

  /**
   * Gets or Sets fraqTypes
   */
  @JsonAdapter(FraqTypesEnum.Adapter.class)
  public enum FraqTypesEnum {
    LIMIT("limit"),
    
    MARKET("market"),
    
    STOP("stop"),
    
    STOP_LIMIT("stop_limit"),
    
    MIT("mit"),
    
    LIT("lit"),
    
    TRAILING_STOP("trailing_stop"),
    
    TRAILING_STOP_LIMIT("trailing_stop_limit");

    private String value;

    FraqTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FraqTypesEnum fromValue(String value) {
      for (FraqTypesEnum b : FraqTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FraqTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FraqTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FraqTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FraqTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FraqTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRAQ_TYPES = "fraqTypes";
  @SerializedName(SERIALIZED_NAME_FRAQ_TYPES)
  @javax.annotation.Nullable
  private List<FraqTypesEnum> fraqTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_ORDER_PREVIEW = "forceOrderPreview";
  @SerializedName(SERIALIZED_NAME_FORCE_ORDER_PREVIEW)
  @javax.annotation.Nullable
  private Boolean forceOrderPreview;

  /**
   * Gets or Sets cqtTypes
   */
  @JsonAdapter(CqtTypesEnum.Adapter.class)
  public enum CqtTypesEnum {
    LIMIT("limit"),
    
    MARKET("market"),
    
    STOP("stop"),
    
    STOP_LIMIT("stop_limit"),
    
    MIT("mit"),
    
    LIT("lit"),
    
    TRAILING_STOP("trailing_stop"),
    
    TRAILING_STOP_LIMIT("trailing_stop_limit");

    private String value;

    CqtTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CqtTypesEnum fromValue(String value) {
      for (CqtTypesEnum b : CqtTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CqtTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CqtTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CqtTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CqtTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CqtTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CQT_TYPES = "cqtTypes";
  @SerializedName(SERIALIZED_NAME_CQT_TYPES)
  @javax.annotation.Nullable
  private List<CqtTypesEnum> cqtTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_DEFAULTS = "orderDefaults";
  @SerializedName(SERIALIZED_NAME_ORDER_DEFAULTS)
  @javax.annotation.Nullable
  private ContractRulesOrderDefaults orderDefaults;

  /**
   * Gets or Sets orderTypesOutside
   */
  @JsonAdapter(OrderTypesOutsideEnum.Adapter.class)
  public enum OrderTypesOutsideEnum {
    LIMIT("limit"),
    
    STOP_LIMIT("stop_limit"),
    
    LIT("lit"),
    
    TRAILING_STOP_LIMIT("trailing_stop_limit"),
    
    RELATIVE("relative");

    private String value;

    OrderTypesOutsideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderTypesOutsideEnum fromValue(String value) {
      for (OrderTypesOutsideEnum b : OrderTypesOutsideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderTypesOutsideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderTypesOutsideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderTypesOutsideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderTypesOutsideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderTypesOutsideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_TYPES_OUTSIDE = "orderTypesOutside";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPES_OUTSIDE)
  @javax.annotation.Nullable
  private List<OrderTypesOutsideEnum> orderTypesOutside = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_SIZE = "defaultSize";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SIZE)
  @javax.annotation.Nullable
  private Integer defaultSize;

  public static final String SERIALIZED_NAME_CASH_SIZE = "cashSize";
  @SerializedName(SERIALIZED_NAME_CASH_SIZE)
  @javax.annotation.Nullable
  private Integer cashSize;

  public static final String SERIALIZED_NAME_SIZE_INCREMENT = "sizeIncrement";
  @SerializedName(SERIALIZED_NAME_SIZE_INCREMENT)
  @javax.annotation.Nullable
  private Integer sizeIncrement;

  public static final String SERIALIZED_NAME_TIF_TYPES = "tifTypes";
  @SerializedName(SERIALIZED_NAME_TIF_TYPES)
  @javax.annotation.Nullable
  private List<String> tifTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIF_DEFAULTS = "tifDefaults";
  @SerializedName(SERIALIZED_NAME_TIF_DEFAULTS)
  @javax.annotation.Nullable
  private ContractRulesTifDefaults tifDefaults;

  public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";
  @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
  @javax.annotation.Nullable
  private Integer limitPrice;

  public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";
  @SerializedName(SERIALIZED_NAME_STOP_PRICE)
  @javax.annotation.Nullable
  private Integer stopPrice;

  public static final String SERIALIZED_NAME_ORDER_ORIGINATION = "orderOrigination";
  @SerializedName(SERIALIZED_NAME_ORDER_ORIGINATION)
  @javax.annotation.Nullable
  private String orderOrigination;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  @javax.annotation.Nullable
  private Boolean preview;

  public static final String SERIALIZED_NAME_DISPLAY_SIZE = "displaySize";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SIZE)
  @javax.annotation.Nullable
  private Integer displaySize;

  public static final String SERIALIZED_NAME_FRAQ_INT = "fraqInt";
  @SerializedName(SERIALIZED_NAME_FRAQ_INT)
  @javax.annotation.Nullable
  private Integer fraqInt;

  public static final String SERIALIZED_NAME_CASH_CCY = "cashCcy";
  @SerializedName(SERIALIZED_NAME_CASH_CCY)
  @javax.annotation.Nullable
  private String cashCcy;

  public static final String SERIALIZED_NAME_CASH_QTY_INCR = "cashQtyIncr";
  @SerializedName(SERIALIZED_NAME_CASH_QTY_INCR)
  @javax.annotation.Nullable
  private Integer cashQtyIncr;

  public static final String SERIALIZED_NAME_PRICE_MAGNIFIER = "priceMagnifier";
  @SerializedName(SERIALIZED_NAME_PRICE_MAGNIFIER)
  @javax.annotation.Nullable
  private Integer priceMagnifier;

  public static final String SERIALIZED_NAME_NEGATIVE_CAPABLE = "negativeCapable";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_CAPABLE)
  @javax.annotation.Nullable
  private Boolean negativeCapable;

  public static final String SERIALIZED_NAME_INCREMENT_TYPE = "incrementType";
  @SerializedName(SERIALIZED_NAME_INCREMENT_TYPE)
  @javax.annotation.Nullable
  private Integer incrementType;

  public static final String SERIALIZED_NAME_INCREMENT_RULES = "incrementRules";
  @SerializedName(SERIALIZED_NAME_INCREMENT_RULES)
  @javax.annotation.Nullable
  private List<ContractRulesIncrementRulesInner> incrementRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_SECONDARY = "hasSecondary";
  @SerializedName(SERIALIZED_NAME_HAS_SECONDARY)
  @javax.annotation.Nullable
  private Boolean hasSecondary;

  public static final String SERIALIZED_NAME_MOD_TYPES = "modTypes";
  @SerializedName(SERIALIZED_NAME_MOD_TYPES)
  @javax.annotation.Nullable
  private List<String> modTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCREMENT = "increment";
  @SerializedName(SERIALIZED_NAME_INCREMENT)
  @javax.annotation.Nullable
  private Integer increment;

  public static final String SERIALIZED_NAME_INCREMENT_DIGITS = "incrementDigits";
  @SerializedName(SERIALIZED_NAME_INCREMENT_DIGITS)
  @javax.annotation.Nullable
  private Integer incrementDigits;

  public ContractRules() {
  }

  public ContractRules algoEligible(@javax.annotation.Nullable Boolean algoEligible) {
    this.algoEligible = algoEligible;
    return this;
  }

  /**
   * Indicates if the contract can trade algos or not.
   * @return algoEligible
   */
  @javax.annotation.Nullable
  public Boolean getAlgoEligible() {
    return algoEligible;
  }

  public void setAlgoEligible(@javax.annotation.Nullable Boolean algoEligible) {
    this.algoEligible = algoEligible;
  }


  public ContractRules overnightEligible(@javax.annotation.Nullable Boolean overnightEligible) {
    this.overnightEligible = overnightEligible;
    return this;
  }

  /**
   * Indicates if outsideRTH trading is permitted for the instrument
   * @return overnightEligible
   */
  @javax.annotation.Nullable
  public Boolean getOvernightEligible() {
    return overnightEligible;
  }

  public void setOvernightEligible(@javax.annotation.Nullable Boolean overnightEligible) {
    this.overnightEligible = overnightEligible;
  }


  public ContractRules costReport(@javax.annotation.Nullable Boolean costReport) {
    this.costReport = costReport;
    return this;
  }

  /**
   * Indicates whether or not a cost report has been requested (Client Portal only).
   * @return costReport
   */
  @javax.annotation.Nullable
  public Boolean getCostReport() {
    return costReport;
  }

  public void setCostReport(@javax.annotation.Nullable Boolean costReport) {
    this.costReport = costReport;
  }


  public ContractRules canTradeAcctIds(@javax.annotation.Nullable List<String> canTradeAcctIds) {
    this.canTradeAcctIds = canTradeAcctIds;
    return this;
  }

  public ContractRules addCanTradeAcctIdsItem(String canTradeAcctIdsItem) {
    if (this.canTradeAcctIds == null) {
      this.canTradeAcctIds = new ArrayList<>();
    }
    this.canTradeAcctIds.add(canTradeAcctIdsItem);
    return this;
  }

  /**
   * Indicates permitted accountIDs that may trade the contract.
   * @return canTradeAcctIds
   */
  @javax.annotation.Nullable
  public List<String> getCanTradeAcctIds() {
    return canTradeAcctIds;
  }

  public void setCanTradeAcctIds(@javax.annotation.Nullable List<String> canTradeAcctIds) {
    this.canTradeAcctIds = canTradeAcctIds;
  }


  public ContractRules error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * If rules information can not be received for any reason, it will be expressed here.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }


  public ContractRules orderTypes(@javax.annotation.Nullable List<OrderTypesEnum> orderTypes) {
    this.orderTypes = orderTypes;
    return this;
  }

  public ContractRules addOrderTypesItem(OrderTypesEnum orderTypesItem) {
    if (this.orderTypes == null) {
      this.orderTypes = new ArrayList<>();
    }
    this.orderTypes.add(orderTypesItem);
    return this;
  }

  /**
   * Indicates permitted order types for use with standard quantity trading.
   * @return orderTypes
   */
  @javax.annotation.Nullable
  public List<OrderTypesEnum> getOrderTypes() {
    return orderTypes;
  }

  public void setOrderTypes(@javax.annotation.Nullable List<OrderTypesEnum> orderTypes) {
    this.orderTypes = orderTypes;
  }


  public ContractRules ibAlgoTypes(@javax.annotation.Nullable List<IbAlgoTypesEnum> ibAlgoTypes) {
    this.ibAlgoTypes = ibAlgoTypes;
    return this;
  }

  public ContractRules addIbAlgoTypesItem(IbAlgoTypesEnum ibAlgoTypesItem) {
    if (this.ibAlgoTypes == null) {
      this.ibAlgoTypes = new ArrayList<>();
    }
    this.ibAlgoTypes.add(ibAlgoTypesItem);
    return this;
  }

  /**
   * Indicates permitted algo types for use with the given contract.
   * @return ibAlgoTypes
   */
  @javax.annotation.Nullable
  public List<IbAlgoTypesEnum> getIbAlgoTypes() {
    return ibAlgoTypes;
  }

  public void setIbAlgoTypes(@javax.annotation.Nullable List<IbAlgoTypesEnum> ibAlgoTypes) {
    this.ibAlgoTypes = ibAlgoTypes;
  }


  public ContractRules fraqTypes(@javax.annotation.Nullable List<FraqTypesEnum> fraqTypes) {
    this.fraqTypes = fraqTypes;
    return this;
  }

  public ContractRules addFraqTypesItem(FraqTypesEnum fraqTypesItem) {
    if (this.fraqTypes == null) {
      this.fraqTypes = new ArrayList<>();
    }
    this.fraqTypes.add(fraqTypesItem);
    return this;
  }

  /**
   * Indicates permitted order types for use with fractional trading.
   * @return fraqTypes
   */
  @javax.annotation.Nullable
  public List<FraqTypesEnum> getFraqTypes() {
    return fraqTypes;
  }

  public void setFraqTypes(@javax.annotation.Nullable List<FraqTypesEnum> fraqTypes) {
    this.fraqTypes = fraqTypes;
  }


  public ContractRules forceOrderPreview(@javax.annotation.Nullable Boolean forceOrderPreview) {
    this.forceOrderPreview = forceOrderPreview;
    return this;
  }

  /**
   * Indicates if the order preview is forced upon the user before submission.
   * @return forceOrderPreview
   */
  @javax.annotation.Nullable
  public Boolean getForceOrderPreview() {
    return forceOrderPreview;
  }

  public void setForceOrderPreview(@javax.annotation.Nullable Boolean forceOrderPreview) {
    this.forceOrderPreview = forceOrderPreview;
  }


  public ContractRules cqtTypes(@javax.annotation.Nullable List<CqtTypesEnum> cqtTypes) {
    this.cqtTypes = cqtTypes;
    return this;
  }

  public ContractRules addCqtTypesItem(CqtTypesEnum cqtTypesItem) {
    if (this.cqtTypes == null) {
      this.cqtTypes = new ArrayList<>();
    }
    this.cqtTypes.add(cqtTypesItem);
    return this;
  }

  /**
   * Indicates accepted order types for use with cash quantity.
   * @return cqtTypes
   */
  @javax.annotation.Nullable
  public List<CqtTypesEnum> getCqtTypes() {
    return cqtTypes;
  }

  public void setCqtTypes(@javax.annotation.Nullable List<CqtTypesEnum> cqtTypes) {
    this.cqtTypes = cqtTypes;
  }


  public ContractRules orderDefaults(@javax.annotation.Nullable ContractRulesOrderDefaults orderDefaults) {
    this.orderDefaults = orderDefaults;
    return this;
  }

  /**
   * Get orderDefaults
   * @return orderDefaults
   */
  @javax.annotation.Nullable
  public ContractRulesOrderDefaults getOrderDefaults() {
    return orderDefaults;
  }

  public void setOrderDefaults(@javax.annotation.Nullable ContractRulesOrderDefaults orderDefaults) {
    this.orderDefaults = orderDefaults;
  }


  public ContractRules orderTypesOutside(@javax.annotation.Nullable List<OrderTypesOutsideEnum> orderTypesOutside) {
    this.orderTypesOutside = orderTypesOutside;
    return this;
  }

  public ContractRules addOrderTypesOutsideItem(OrderTypesOutsideEnum orderTypesOutsideItem) {
    if (this.orderTypesOutside == null) {
      this.orderTypesOutside = new ArrayList<>();
    }
    this.orderTypesOutside.add(orderTypesOutsideItem);
    return this;
  }

  /**
   * Indicates permitted order types for use outside of regular trading hours.
   * @return orderTypesOutside
   */
  @javax.annotation.Nullable
  public List<OrderTypesOutsideEnum> getOrderTypesOutside() {
    return orderTypesOutside;
  }

  public void setOrderTypesOutside(@javax.annotation.Nullable List<OrderTypesOutsideEnum> orderTypesOutside) {
    this.orderTypesOutside = orderTypesOutside;
  }


  public ContractRules defaultSize(@javax.annotation.Nullable Integer defaultSize) {
    this.defaultSize = defaultSize;
    return this;
  }

  /**
   * Default total quantity value for orders.
   * @return defaultSize
   */
  @javax.annotation.Nullable
  public Integer getDefaultSize() {
    return defaultSize;
  }

  public void setDefaultSize(@javax.annotation.Nullable Integer defaultSize) {
    this.defaultSize = defaultSize;
  }


  public ContractRules cashSize(@javax.annotation.Nullable Integer cashSize) {
    this.cashSize = cashSize;
    return this;
  }

  /**
   * Default cash value quantity.
   * @return cashSize
   */
  @javax.annotation.Nullable
  public Integer getCashSize() {
    return cashSize;
  }

  public void setCashSize(@javax.annotation.Nullable Integer cashSize) {
    this.cashSize = cashSize;
  }


  public ContractRules sizeIncrement(@javax.annotation.Nullable Integer sizeIncrement) {
    this.sizeIncrement = sizeIncrement;
    return this;
  }

  /**
   * Indicates quantity increase for the contract.
   * @return sizeIncrement
   */
  @javax.annotation.Nullable
  public Integer getSizeIncrement() {
    return sizeIncrement;
  }

  public void setSizeIncrement(@javax.annotation.Nullable Integer sizeIncrement) {
    this.sizeIncrement = sizeIncrement;
  }


  public ContractRules tifTypes(@javax.annotation.Nullable List<String> tifTypes) {
    this.tifTypes = tifTypes;
    return this;
  }

  public ContractRules addTifTypesItem(String tifTypesItem) {
    if (this.tifTypes == null) {
      this.tifTypes = new ArrayList<>();
    }
    this.tifTypes.add(tifTypesItem);
    return this;
  }

  /**
   * Indicates allowed tif types supported for the contract.
   * @return tifTypes
   */
  @javax.annotation.Nullable
  public List<String> getTifTypes() {
    return tifTypes;
  }

  public void setTifTypes(@javax.annotation.Nullable List<String> tifTypes) {
    this.tifTypes = tifTypes;
  }


  public ContractRules tifDefaults(@javax.annotation.Nullable ContractRulesTifDefaults tifDefaults) {
    this.tifDefaults = tifDefaults;
    return this;
  }

  /**
   * Get tifDefaults
   * @return tifDefaults
   */
  @javax.annotation.Nullable
  public ContractRulesTifDefaults getTifDefaults() {
    return tifDefaults;
  }

  public void setTifDefaults(@javax.annotation.Nullable ContractRulesTifDefaults tifDefaults) {
    this.tifDefaults = tifDefaults;
  }


  public ContractRules limitPrice(@javax.annotation.Nullable Integer limitPrice) {
    this.limitPrice = limitPrice;
    return this;
  }

  /**
   * Default limit price for the given contract.
   * @return limitPrice
   */
  @javax.annotation.Nullable
  public Integer getLimitPrice() {
    return limitPrice;
  }

  public void setLimitPrice(@javax.annotation.Nullable Integer limitPrice) {
    this.limitPrice = limitPrice;
  }


  public ContractRules stopPrice(@javax.annotation.Nullable Integer stopPrice) {
    this.stopPrice = stopPrice;
    return this;
  }

  /**
   * Default stop price for the given contract.
   * @return stopPrice
   */
  @javax.annotation.Nullable
  public Integer getStopPrice() {
    return stopPrice;
  }

  public void setStopPrice(@javax.annotation.Nullable Integer stopPrice) {
    this.stopPrice = stopPrice;
  }


  public ContractRules orderOrigination(@javax.annotation.Nullable String orderOrigination) {
    this.orderOrigination = orderOrigination;
    return this;
  }

  /**
   * Order origin designation for US securities options and Options Clearing Corporation
   * @return orderOrigination
   */
  @javax.annotation.Nullable
  public String getOrderOrigination() {
    return orderOrigination;
  }

  public void setOrderOrigination(@javax.annotation.Nullable String orderOrigination) {
    this.orderOrigination = orderOrigination;
  }


  public ContractRules preview(@javax.annotation.Nullable Boolean preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Indicates if the order preview is required (for client portal only)
   * @return preview
   */
  @javax.annotation.Nullable
  public Boolean getPreview() {
    return preview;
  }

  public void setPreview(@javax.annotation.Nullable Boolean preview) {
    this.preview = preview;
  }


  public ContractRules displaySize(@javax.annotation.Nullable Integer displaySize) {
    this.displaySize = displaySize;
    return this;
  }

  /**
   * Standard display increment rule for the instrument.
   * @return displaySize
   */
  @javax.annotation.Nullable
  public Integer getDisplaySize() {
    return displaySize;
  }

  public void setDisplaySize(@javax.annotation.Nullable Integer displaySize) {
    this.displaySize = displaySize;
  }


  public ContractRules fraqInt(@javax.annotation.Nullable Integer fraqInt) {
    this.fraqInt = fraqInt;
    return this;
  }

  /**
   * Indicates decimal places for fractional order size.
   * @return fraqInt
   */
  @javax.annotation.Nullable
  public Integer getFraqInt() {
    return fraqInt;
  }

  public void setFraqInt(@javax.annotation.Nullable Integer fraqInt) {
    this.fraqInt = fraqInt;
  }


  public ContractRules cashCcy(@javax.annotation.Nullable String cashCcy) {
    this.cashCcy = cashCcy;
    return this;
  }

  /**
   * Indicates base currency for the instrument.
   * @return cashCcy
   */
  @javax.annotation.Nullable
  public String getCashCcy() {
    return cashCcy;
  }

  public void setCashCcy(@javax.annotation.Nullable String cashCcy) {
    this.cashCcy = cashCcy;
  }


  public ContractRules cashQtyIncr(@javax.annotation.Nullable Integer cashQtyIncr) {
    this.cashQtyIncr = cashQtyIncr;
    return this;
  }

  /**
   * Indicates cash quantity increment rules.
   * @return cashQtyIncr
   */
  @javax.annotation.Nullable
  public Integer getCashQtyIncr() {
    return cashQtyIncr;
  }

  public void setCashQtyIncr(@javax.annotation.Nullable Integer cashQtyIncr) {
    this.cashQtyIncr = cashQtyIncr;
  }


  public ContractRules priceMagnifier(@javax.annotation.Nullable Integer priceMagnifier) {
    this.priceMagnifier = priceMagnifier;
    return this;
  }

  /**
   * Signifies the magnifier of a given contract. This is separate from the price multiplier, and will typically return ‘null’ 
   * @return priceMagnifier
   */
  @javax.annotation.Nullable
  public Integer getPriceMagnifier() {
    return priceMagnifier;
  }

  public void setPriceMagnifier(@javax.annotation.Nullable Integer priceMagnifier) {
    this.priceMagnifier = priceMagnifier;
  }


  public ContractRules negativeCapable(@javax.annotation.Nullable Boolean negativeCapable) {
    this.negativeCapable = negativeCapable;
    return this;
  }

  /**
   * Indicates if the value of the contract can be negative (true) or if it is always positive (false).
   * @return negativeCapable
   */
  @javax.annotation.Nullable
  public Boolean getNegativeCapable() {
    return negativeCapable;
  }

  public void setNegativeCapable(@javax.annotation.Nullable Boolean negativeCapable) {
    this.negativeCapable = negativeCapable;
  }


  public ContractRules incrementType(@javax.annotation.Nullable Integer incrementType) {
    this.incrementType = incrementType;
    return this;
  }

  /**
   * Indicates the type of increment style.
   * @return incrementType
   */
  @javax.annotation.Nullable
  public Integer getIncrementType() {
    return incrementType;
  }

  public void setIncrementType(@javax.annotation.Nullable Integer incrementType) {
    this.incrementType = incrementType;
  }


  public ContractRules incrementRules(@javax.annotation.Nullable List<ContractRulesIncrementRulesInner> incrementRules) {
    this.incrementRules = incrementRules;
    return this;
  }

  public ContractRules addIncrementRulesItem(ContractRulesIncrementRulesInner incrementRulesItem) {
    if (this.incrementRules == null) {
      this.incrementRules = new ArrayList<>();
    }
    this.incrementRules.add(incrementRulesItem);
    return this;
  }

  /**
   * Indicates increment rule values including lowerEdge and increment value.
   * @return incrementRules
   */
  @javax.annotation.Nullable
  public List<ContractRulesIncrementRulesInner> getIncrementRules() {
    return incrementRules;
  }

  public void setIncrementRules(@javax.annotation.Nullable List<ContractRulesIncrementRulesInner> incrementRules) {
    this.incrementRules = incrementRules;
  }


  public ContractRules hasSecondary(@javax.annotation.Nullable Boolean hasSecondary) {
    this.hasSecondary = hasSecondary;
    return this;
  }

  /**
   * Get hasSecondary
   * @return hasSecondary
   */
  @javax.annotation.Nullable
  public Boolean getHasSecondary() {
    return hasSecondary;
  }

  public void setHasSecondary(@javax.annotation.Nullable Boolean hasSecondary) {
    this.hasSecondary = hasSecondary;
  }


  public ContractRules modTypes(@javax.annotation.Nullable List<String> modTypes) {
    this.modTypes = modTypes;
    return this;
  }

  public ContractRules addModTypesItem(String modTypesItem) {
    if (this.modTypes == null) {
      this.modTypes = new ArrayList<>();
    }
    this.modTypes.add(modTypesItem);
    return this;
  }

  /**
   * Lists the available order types supported when modifying the order.
   * @return modTypes
   */
  @javax.annotation.Nullable
  public List<String> getModTypes() {
    return modTypes;
  }

  public void setModTypes(@javax.annotation.Nullable List<String> modTypes) {
    this.modTypes = modTypes;
  }


  public ContractRules increment(@javax.annotation.Nullable Integer increment) {
    this.increment = increment;
    return this;
  }

  /**
   * Minimum increment values for prices
   * @return increment
   */
  @javax.annotation.Nullable
  public Integer getIncrement() {
    return increment;
  }

  public void setIncrement(@javax.annotation.Nullable Integer increment) {
    this.increment = increment;
  }


  public ContractRules incrementDigits(@javax.annotation.Nullable Integer incrementDigits) {
    this.incrementDigits = incrementDigits;
    return this;
  }

  /**
   * Number of decimal places to indicate the increment value.
   * @return incrementDigits
   */
  @javax.annotation.Nullable
  public Integer getIncrementDigits() {
    return incrementDigits;
  }

  public void setIncrementDigits(@javax.annotation.Nullable Integer incrementDigits) {
    this.incrementDigits = incrementDigits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractRules contractRules = (ContractRules) o;
    return Objects.equals(this.algoEligible, contractRules.algoEligible) &&
        Objects.equals(this.overnightEligible, contractRules.overnightEligible) &&
        Objects.equals(this.costReport, contractRules.costReport) &&
        Objects.equals(this.canTradeAcctIds, contractRules.canTradeAcctIds) &&
        Objects.equals(this.error, contractRules.error) &&
        Objects.equals(this.orderTypes, contractRules.orderTypes) &&
        Objects.equals(this.ibAlgoTypes, contractRules.ibAlgoTypes) &&
        Objects.equals(this.fraqTypes, contractRules.fraqTypes) &&
        Objects.equals(this.forceOrderPreview, contractRules.forceOrderPreview) &&
        Objects.equals(this.cqtTypes, contractRules.cqtTypes) &&
        Objects.equals(this.orderDefaults, contractRules.orderDefaults) &&
        Objects.equals(this.orderTypesOutside, contractRules.orderTypesOutside) &&
        Objects.equals(this.defaultSize, contractRules.defaultSize) &&
        Objects.equals(this.cashSize, contractRules.cashSize) &&
        Objects.equals(this.sizeIncrement, contractRules.sizeIncrement) &&
        Objects.equals(this.tifTypes, contractRules.tifTypes) &&
        Objects.equals(this.tifDefaults, contractRules.tifDefaults) &&
        Objects.equals(this.limitPrice, contractRules.limitPrice) &&
        Objects.equals(this.stopPrice, contractRules.stopPrice) &&
        Objects.equals(this.orderOrigination, contractRules.orderOrigination) &&
        Objects.equals(this.preview, contractRules.preview) &&
        Objects.equals(this.displaySize, contractRules.displaySize) &&
        Objects.equals(this.fraqInt, contractRules.fraqInt) &&
        Objects.equals(this.cashCcy, contractRules.cashCcy) &&
        Objects.equals(this.cashQtyIncr, contractRules.cashQtyIncr) &&
        Objects.equals(this.priceMagnifier, contractRules.priceMagnifier) &&
        Objects.equals(this.negativeCapable, contractRules.negativeCapable) &&
        Objects.equals(this.incrementType, contractRules.incrementType) &&
        Objects.equals(this.incrementRules, contractRules.incrementRules) &&
        Objects.equals(this.hasSecondary, contractRules.hasSecondary) &&
        Objects.equals(this.modTypes, contractRules.modTypes) &&
        Objects.equals(this.increment, contractRules.increment) &&
        Objects.equals(this.incrementDigits, contractRules.incrementDigits);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(algoEligible, overnightEligible, costReport, canTradeAcctIds, error, orderTypes, ibAlgoTypes, fraqTypes, forceOrderPreview, cqtTypes, orderDefaults, orderTypesOutside, defaultSize, cashSize, sizeIncrement, tifTypes, tifDefaults, limitPrice, stopPrice, orderOrigination, preview, displaySize, fraqInt, cashCcy, cashQtyIncr, priceMagnifier, negativeCapable, incrementType, incrementRules, hasSecondary, modTypes, increment, incrementDigits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractRules {\n");
    sb.append("    algoEligible: ").append(toIndentedString(algoEligible)).append("\n");
    sb.append("    overnightEligible: ").append(toIndentedString(overnightEligible)).append("\n");
    sb.append("    costReport: ").append(toIndentedString(costReport)).append("\n");
    sb.append("    canTradeAcctIds: ").append(toIndentedString(canTradeAcctIds)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    orderTypes: ").append(toIndentedString(orderTypes)).append("\n");
    sb.append("    ibAlgoTypes: ").append(toIndentedString(ibAlgoTypes)).append("\n");
    sb.append("    fraqTypes: ").append(toIndentedString(fraqTypes)).append("\n");
    sb.append("    forceOrderPreview: ").append(toIndentedString(forceOrderPreview)).append("\n");
    sb.append("    cqtTypes: ").append(toIndentedString(cqtTypes)).append("\n");
    sb.append("    orderDefaults: ").append(toIndentedString(orderDefaults)).append("\n");
    sb.append("    orderTypesOutside: ").append(toIndentedString(orderTypesOutside)).append("\n");
    sb.append("    defaultSize: ").append(toIndentedString(defaultSize)).append("\n");
    sb.append("    cashSize: ").append(toIndentedString(cashSize)).append("\n");
    sb.append("    sizeIncrement: ").append(toIndentedString(sizeIncrement)).append("\n");
    sb.append("    tifTypes: ").append(toIndentedString(tifTypes)).append("\n");
    sb.append("    tifDefaults: ").append(toIndentedString(tifDefaults)).append("\n");
    sb.append("    limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
    sb.append("    stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
    sb.append("    orderOrigination: ").append(toIndentedString(orderOrigination)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    displaySize: ").append(toIndentedString(displaySize)).append("\n");
    sb.append("    fraqInt: ").append(toIndentedString(fraqInt)).append("\n");
    sb.append("    cashCcy: ").append(toIndentedString(cashCcy)).append("\n");
    sb.append("    cashQtyIncr: ").append(toIndentedString(cashQtyIncr)).append("\n");
    sb.append("    priceMagnifier: ").append(toIndentedString(priceMagnifier)).append("\n");
    sb.append("    negativeCapable: ").append(toIndentedString(negativeCapable)).append("\n");
    sb.append("    incrementType: ").append(toIndentedString(incrementType)).append("\n");
    sb.append("    incrementRules: ").append(toIndentedString(incrementRules)).append("\n");
    sb.append("    hasSecondary: ").append(toIndentedString(hasSecondary)).append("\n");
    sb.append("    modTypes: ").append(toIndentedString(modTypes)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    incrementDigits: ").append(toIndentedString(incrementDigits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algoEligible");
    openapiFields.add("overnightEligible");
    openapiFields.add("costReport");
    openapiFields.add("canTradeAcctIds");
    openapiFields.add("error");
    openapiFields.add("orderTypes");
    openapiFields.add("ibAlgoTypes");
    openapiFields.add("fraqTypes");
    openapiFields.add("forceOrderPreview");
    openapiFields.add("cqtTypes");
    openapiFields.add("orderDefaults");
    openapiFields.add("orderTypesOutside");
    openapiFields.add("defaultSize");
    openapiFields.add("cashSize");
    openapiFields.add("sizeIncrement");
    openapiFields.add("tifTypes");
    openapiFields.add("tifDefaults");
    openapiFields.add("limitPrice");
    openapiFields.add("stopPrice");
    openapiFields.add("orderOrigination");
    openapiFields.add("preview");
    openapiFields.add("displaySize");
    openapiFields.add("fraqInt");
    openapiFields.add("cashCcy");
    openapiFields.add("cashQtyIncr");
    openapiFields.add("priceMagnifier");
    openapiFields.add("negativeCapable");
    openapiFields.add("incrementType");
    openapiFields.add("incrementRules");
    openapiFields.add("hasSecondary");
    openapiFields.add("modTypes");
    openapiFields.add("increment");
    openapiFields.add("incrementDigits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractRules is not found in the empty JSON string", ContractRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("canTradeAcctIds") != null && !jsonObj.get("canTradeAcctIds").isJsonNull() && !jsonObj.get("canTradeAcctIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `canTradeAcctIds` to be an array in the JSON string but got `%s`", jsonObj.get("canTradeAcctIds").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orderTypes") != null && !jsonObj.get("orderTypes").isJsonNull() && !jsonObj.get("orderTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderTypes` to be an array in the JSON string but got `%s`", jsonObj.get("orderTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ibAlgoTypes") != null && !jsonObj.get("ibAlgoTypes").isJsonNull() && !jsonObj.get("ibAlgoTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibAlgoTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ibAlgoTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fraqTypes") != null && !jsonObj.get("fraqTypes").isJsonNull() && !jsonObj.get("fraqTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraqTypes` to be an array in the JSON string but got `%s`", jsonObj.get("fraqTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cqtTypes") != null && !jsonObj.get("cqtTypes").isJsonNull() && !jsonObj.get("cqtTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cqtTypes` to be an array in the JSON string but got `%s`", jsonObj.get("cqtTypes").toString()));
      }
      // validate the optional field `orderDefaults`
      if (jsonObj.get("orderDefaults") != null && !jsonObj.get("orderDefaults").isJsonNull()) {
        ContractRulesOrderDefaults.validateJsonElement(jsonObj.get("orderDefaults"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orderTypesOutside") != null && !jsonObj.get("orderTypesOutside").isJsonNull() && !jsonObj.get("orderTypesOutside").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderTypesOutside` to be an array in the JSON string but got `%s`", jsonObj.get("orderTypesOutside").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tifTypes") != null && !jsonObj.get("tifTypes").isJsonNull() && !jsonObj.get("tifTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tifTypes` to be an array in the JSON string but got `%s`", jsonObj.get("tifTypes").toString()));
      }
      // validate the optional field `tifDefaults`
      if (jsonObj.get("tifDefaults") != null && !jsonObj.get("tifDefaults").isJsonNull()) {
        ContractRulesTifDefaults.validateJsonElement(jsonObj.get("tifDefaults"));
      }
      if ((jsonObj.get("orderOrigination") != null && !jsonObj.get("orderOrigination").isJsonNull()) && !jsonObj.get("orderOrigination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderOrigination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderOrigination").toString()));
      }
      if ((jsonObj.get("cashCcy") != null && !jsonObj.get("cashCcy").isJsonNull()) && !jsonObj.get("cashCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashCcy").toString()));
      }
      if (jsonObj.get("incrementRules") != null && !jsonObj.get("incrementRules").isJsonNull()) {
        JsonArray jsonArrayincrementRules = jsonObj.getAsJsonArray("incrementRules");
        if (jsonArrayincrementRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("incrementRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `incrementRules` to be an array in the JSON string but got `%s`", jsonObj.get("incrementRules").toString()));
          }

          // validate the optional field `incrementRules` (array)
          for (int i = 0; i < jsonArrayincrementRules.size(); i++) {
            ContractRulesIncrementRulesInner.validateJsonElement(jsonArrayincrementRules.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modTypes") != null && !jsonObj.get("modTypes").isJsonNull() && !jsonObj.get("modTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modTypes` to be an array in the JSON string but got `%s`", jsonObj.get("modTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractRules.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractRules>() {
           @Override
           public void write(JsonWriter out, ContractRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractRules
   * @throws IOException if the JSON string is invalid with respect to ContractRules
   */
  public static ContractRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractRules.class);
  }

  /**
   * Convert an instance of ContractRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

