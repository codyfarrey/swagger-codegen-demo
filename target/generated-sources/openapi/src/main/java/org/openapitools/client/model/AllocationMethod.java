/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * &#x60;A&#x60; - Available Equity   * &#x60;E&#x60; - Equal   * &#x60;N&#x60; - Net Liquidation Value  User-specified allocation methods:   * &#x60;C&#x60; - Cash Quantity   * &#x60;P&#x60; - Percentage   * &#x60;R&#x60; - Ratios   * &#x60;S&#x60; - Shares 
 */
@JsonAdapter(AllocationMethod.Adapter.class)
public enum AllocationMethod {
  
  A("A"),
  
  E("E"),
  
  N("N"),
  
  C("C"),
  
  P("P"),
  
  R("R"),
  
  S("S");

  private String value;

  AllocationMethod(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AllocationMethod fromValue(String value) {
    for (AllocationMethod b : AllocationMethod.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AllocationMethod> {
    @Override
    public void write(final JsonWriter jsonWriter, final AllocationMethod enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AllocationMethod read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AllocationMethod.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AllocationMethod.fromValue(value);
  }
}

