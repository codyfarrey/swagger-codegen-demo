/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegulatoryDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class RegulatoryDetail {
  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CRIMINAL("CRIMINAL"),
    
    AFFILIATION("AFFILIATION"),
    
    CFTCREGISTERED("CFTCREGISTERED"),
    
    IBACCOUNTS("IBACCOUNTS"),
    
    REGULATORYCONTROL("REGULATORYCONTROL"),
    
    EMPLOYEE_PUB_TRADE("EmployeePubTrade"),
    
    CONTROL_PUB_TRADED("ControlPubTraded"),
    
    BROKERDEALER("BROKERDEALER"),
    
    EXCHANGEMEMBERSHIP("EXCHANGEMEMBERSHIP"),
    
    STOCKCONTROL("STOCKCONTROL"),
    
    DISPUTE("DISPUTE"),
    
    INVESTIGATION("INVESTIGATION"),
    
    MEMBERSHIP("MEMBERSHIP"),
    
    AUSEXPOSURE("AUSEXPOSURE"),
    
    CONTROLLER("CONTROLLER"),
    
    POLITICALMILITARYDIPLOMATIC("POLITICALMILITARYDIPLOMATIC"),
    
    FOREIGN_BANK("FOREIGN_BANK"),
    
    BROKER_DEALER("BROKER_DEALER"),
    
    FUTURES_COMMISSION_MERCHANT("FUTURES_COMMISSION_MERCHANT"),
    
    MUTUAL_FUND("MUTUAL_FUND"),
    
    FOREIGN_EXCHANGE("FOREIGN_EXCHANGE"),
    
    MONEY_TRANSMITTER("MONEY_TRANSMITTER"),
    
    EMPLOYEE_BENEFIT_PLAN("EMPLOYEE_BENEFIT_PLAN"),
    
    US_BANK("US_BANK"),
    
    US_SWAP_DEALER("US_SWAP_DEALER"),
    
    US_SWAP_PARTICIPANT("US_SWAP_PARTICIPANT"),
    
    US_INSURANCE_COMPANY("US_INSURANCE_COMPANY"),
    
    NON_US_INSURANCE_COMPANY("NON_US_INSURANCE_COMPANY"),
    
    US_DEPT("US_DEPT"),
    
    FINANCIAL_ADVISOR("FINANCIAL_ADVISOR"),
    
    HIGH_RISK_CONTRIBUTION("HIGH_RISK_CONTRIBUTION");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private CodeEnum code;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Boolean status;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private String details;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  @javax.annotation.Nullable
  private String detail;

  public static final String SERIALIZED_NAME_EXTERNAL_INDIVIDUAL_ID = "externalIndividualId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_INDIVIDUAL_ID)
  @javax.annotation.Nullable
  private String externalIndividualId;

  public RegulatoryDetail() {
  }

  public RegulatoryDetail code(@javax.annotation.Nullable CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable CodeEnum code) {
    this.code = code;
  }


  public RegulatoryDetail status(@javax.annotation.Nullable Boolean status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Boolean getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Boolean status) {
    this.status = status;
  }


  public RegulatoryDetail details(@javax.annotation.Nullable String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable String details) {
    this.details = details;
  }


  public RegulatoryDetail detail(@javax.annotation.Nullable String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(@javax.annotation.Nullable String detail) {
    this.detail = detail;
  }


  public RegulatoryDetail externalIndividualId(@javax.annotation.Nullable String externalIndividualId) {
    this.externalIndividualId = externalIndividualId;
    return this;
  }

  /**
   * Get externalIndividualId
   * @return externalIndividualId
   */
  @javax.annotation.Nullable
  public String getExternalIndividualId() {
    return externalIndividualId;
  }

  public void setExternalIndividualId(@javax.annotation.Nullable String externalIndividualId) {
    this.externalIndividualId = externalIndividualId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulatoryDetail regulatoryDetail = (RegulatoryDetail) o;
    return Objects.equals(this.code, regulatoryDetail.code) &&
        Objects.equals(this.status, regulatoryDetail.status) &&
        Objects.equals(this.details, regulatoryDetail.details) &&
        Objects.equals(this.detail, regulatoryDetail.detail) &&
        Objects.equals(this.externalIndividualId, regulatoryDetail.externalIndividualId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, status, details, detail, externalIndividualId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulatoryDetail {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    externalIndividualId: ").append(toIndentedString(externalIndividualId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("status");
    openapiFields.add("details");
    openapiFields.add("detail");
    openapiFields.add("externalIndividualId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegulatoryDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegulatoryDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegulatoryDetail is not found in the empty JSON string", RegulatoryDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegulatoryDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegulatoryDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("externalIndividualId") != null && !jsonObj.get("externalIndividualId").isJsonNull()) && !jsonObj.get("externalIndividualId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalIndividualId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalIndividualId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegulatoryDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegulatoryDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegulatoryDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegulatoryDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<RegulatoryDetail>() {
           @Override
           public void write(JsonWriter out, RegulatoryDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegulatoryDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegulatoryDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegulatoryDetail
   * @throws IOException if the JSON string is invalid with respect to RegulatoryDetail
   */
  public static RegulatoryDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegulatoryDetail.class);
  }

  /**
   * Convert an instance of RegulatoryDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

