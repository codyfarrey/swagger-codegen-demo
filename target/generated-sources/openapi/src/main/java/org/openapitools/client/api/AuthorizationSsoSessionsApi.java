/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateBrowserSessionRequest;
import org.openapitools.client.model.CreateBrowserSessionResponse;
import org.openapitools.client.model.CreateSessionRequest;
import org.openapitools.client.model.CreateSessionResponse;
import org.openapitools.client.model.InsufficientScopeResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.InvalidAccessTokenResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationSsoSessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationSsoSessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationSsoSessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gwApiV1SsoBrowserSessionsPost
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createBrowserSessionRequest Create browser session on behalf of end-user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Single Sign On (SSO) to access the IBKR hosted portal (White Branded). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1SsoBrowserSessionsPostCall(String authorization, CreateBrowserSessionRequest createBrowserSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBrowserSessionRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/sso-browser-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1SsoBrowserSessionsPostValidateBeforeCall(String authorization, CreateBrowserSessionRequest createBrowserSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1SsoBrowserSessionsPost(Async)");
        }

        // verify the required parameter 'createBrowserSessionRequest' is set
        if (createBrowserSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createBrowserSessionRequest' when calling gwApiV1SsoBrowserSessionsPost(Async)");
        }

        return gwApiV1SsoBrowserSessionsPostCall(authorization, createBrowserSessionRequest, _callback);

    }

    /**
     * Create SSO Browser Session.
     * &lt;br&gt;**Scope**: &#x60;sso-browser-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createBrowserSessionRequest Create browser session on behalf of end-user. (required)
     * @return CreateBrowserSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Single Sign On (SSO) to access the IBKR hosted portal (White Branded). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateBrowserSessionResponse gwApiV1SsoBrowserSessionsPost(String authorization, CreateBrowserSessionRequest createBrowserSessionRequest) throws ApiException {
        ApiResponse<CreateBrowserSessionResponse> localVarResp = gwApiV1SsoBrowserSessionsPostWithHttpInfo(authorization, createBrowserSessionRequest);
        return localVarResp.getData();
    }

    /**
     * Create SSO Browser Session.
     * &lt;br&gt;**Scope**: &#x60;sso-browser-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createBrowserSessionRequest Create browser session on behalf of end-user. (required)
     * @return ApiResponse&lt;CreateBrowserSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Single Sign On (SSO) to access the IBKR hosted portal (White Branded). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBrowserSessionResponse> gwApiV1SsoBrowserSessionsPostWithHttpInfo(String authorization, CreateBrowserSessionRequest createBrowserSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1SsoBrowserSessionsPostValidateBeforeCall(authorization, createBrowserSessionRequest, null);
        Type localVarReturnType = new TypeToken<CreateBrowserSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create SSO Browser Session. (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;sso-browser-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createBrowserSessionRequest Create browser session on behalf of end-user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a Single Sign On (SSO) to access the IBKR hosted portal (White Branded). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1SsoBrowserSessionsPostAsync(String authorization, CreateBrowserSessionRequest createBrowserSessionRequest, final ApiCallback<CreateBrowserSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1SsoBrowserSessionsPostValidateBeforeCall(authorization, createBrowserSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateBrowserSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1SsoSessionsPost
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createSessionRequest Create session on behalf of end-user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing a reference to the newly created SSO session. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1SsoSessionsPostCall(String authorization, CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSessionRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/sso-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1SsoSessionsPostValidateBeforeCall(String authorization, CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling gwApiV1SsoSessionsPost(Async)");
        }

        // verify the required parameter 'createSessionRequest' is set
        if (createSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createSessionRequest' when calling gwApiV1SsoSessionsPost(Async)");
        }

        return gwApiV1SsoSessionsPostCall(authorization, createSessionRequest, _callback);

    }

    /**
     * Create A New SSO Session On Behalf Of An End-user.
     * &lt;br&gt;**Scope**: &#x60;sso-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createSessionRequest Create session on behalf of end-user. (required)
     * @return CreateSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing a reference to the newly created SSO session. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionResponse gwApiV1SsoSessionsPost(String authorization, CreateSessionRequest createSessionRequest) throws ApiException {
        ApiResponse<CreateSessionResponse> localVarResp = gwApiV1SsoSessionsPostWithHttpInfo(authorization, createSessionRequest);
        return localVarResp.getData();
    }

    /**
     * Create A New SSO Session On Behalf Of An End-user.
     * &lt;br&gt;**Scope**: &#x60;sso-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createSessionRequest Create session on behalf of end-user. (required)
     * @return ApiResponse&lt;CreateSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing a reference to the newly created SSO session. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSessionResponse> gwApiV1SsoSessionsPostWithHttpInfo(String authorization, CreateSessionRequest createSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1SsoSessionsPostValidateBeforeCall(authorization, createSessionRequest, null);
        Type localVarReturnType = new TypeToken<CreateSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create A New SSO Session On Behalf Of An End-user. (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;sso-sessions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param authorization Specifies the authorization header value (e.g., Bearer eyJ0eXAiOiJKV1...). (required)
     * @param createSessionRequest Create session on behalf of end-user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a JSON object containing a reference to the newly created SSO session. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns a Problem detail instance representing an unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1SsoSessionsPostAsync(String authorization, CreateSessionRequest createSessionRequest, final ApiCallback<CreateSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1SsoSessionsPostValidateBeforeCall(authorization, createSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
