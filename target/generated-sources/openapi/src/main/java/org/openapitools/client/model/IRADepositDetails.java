/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRADepositDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IRADepositDetails {
  /**
   * Gets or Sets depositType
   */
  @JsonAdapter(DepositTypeEnum.Adapter.class)
  public enum DepositTypeEnum {
    CONTRIBUTION("contribution"),
    
    ROLLOVER("rollover");

    private String value;

    DepositTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepositTypeEnum fromValue(String value) {
      for (DepositTypeEnum b : DepositTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepositTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepositTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepositTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepositTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DepositTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPOSIT_TYPE = "depositType";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_TYPE)
  @javax.annotation.Nullable
  private DepositTypeEnum depositType;

  /**
   * Gets or Sets taxYear
   */
  @JsonAdapter(TaxYearEnum.Adapter.class)
  public enum TaxYearEnum {
    CURRENT("current"),
    
    PRIOR("prior");

    private String value;

    TaxYearEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxYearEnum fromValue(String value) {
      for (TaxYearEnum b : TaxYearEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxYearEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxYearEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxYearEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxYearEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxYearEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_YEAR = "taxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  @javax.annotation.Nullable
  private TaxYearEnum taxYear;

  /**
   * Gets or Sets fromIraType
   */
  @JsonAdapter(FromIraTypeEnum.Adapter.class)
  public enum FromIraTypeEnum {
    RI("RI"),
    
    RO("RO"),
    
    RT("RT"),
    
    SP("SP"),
    
    ED("ED"),
    
    TH("TH"),
    
    RH("RH"),
    
    SH("SH"),
    
    RRSP("RRSP"),
    
    SRRSP("SRRSP"),
    
    TFSA("TFSA"),
    
    SIMPLE("SIMPLE"),
    
    ISA("ISA");

    private String value;

    FromIraTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromIraTypeEnum fromValue(String value) {
      for (FromIraTypeEnum b : FromIraTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromIraTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromIraTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromIraTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromIraTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FromIraTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FROM_IRA_TYPE = "fromIraType";
  @SerializedName(SERIALIZED_NAME_FROM_IRA_TYPE)
  @javax.annotation.Nullable
  private FromIraTypeEnum fromIraType;

  public IRADepositDetails() {
  }

  public IRADepositDetails depositType(@javax.annotation.Nullable DepositTypeEnum depositType) {
    this.depositType = depositType;
    return this;
  }

  /**
   * Get depositType
   * @return depositType
   */
  @javax.annotation.Nullable
  public DepositTypeEnum getDepositType() {
    return depositType;
  }

  public void setDepositType(@javax.annotation.Nullable DepositTypeEnum depositType) {
    this.depositType = depositType;
  }


  public IRADepositDetails taxYear(@javax.annotation.Nullable TaxYearEnum taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * Get taxYear
   * @return taxYear
   */
  @javax.annotation.Nullable
  public TaxYearEnum getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(@javax.annotation.Nullable TaxYearEnum taxYear) {
    this.taxYear = taxYear;
  }


  public IRADepositDetails fromIraType(@javax.annotation.Nullable FromIraTypeEnum fromIraType) {
    this.fromIraType = fromIraType;
    return this;
  }

  /**
   * Get fromIraType
   * @return fromIraType
   */
  @javax.annotation.Nullable
  public FromIraTypeEnum getFromIraType() {
    return fromIraType;
  }

  public void setFromIraType(@javax.annotation.Nullable FromIraTypeEnum fromIraType) {
    this.fromIraType = fromIraType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRADepositDetails irADepositDetails = (IRADepositDetails) o;
    return Objects.equals(this.depositType, irADepositDetails.depositType) &&
        Objects.equals(this.taxYear, irADepositDetails.taxYear) &&
        Objects.equals(this.fromIraType, irADepositDetails.fromIraType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depositType, taxYear, fromIraType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRADepositDetails {\n");
    sb.append("    depositType: ").append(toIndentedString(depositType)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    fromIraType: ").append(toIndentedString(fromIraType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("depositType");
    openapiFields.add("taxYear");
    openapiFields.add("fromIraType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRADepositDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRADepositDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRADepositDetails is not found in the empty JSON string", IRADepositDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRADepositDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRADepositDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("depositType") != null && !jsonObj.get("depositType").isJsonNull()) && !jsonObj.get("depositType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositType").toString()));
      }
      // validate the optional field `depositType`
      if (jsonObj.get("depositType") != null && !jsonObj.get("depositType").isJsonNull()) {
        DepositTypeEnum.validateJsonElement(jsonObj.get("depositType"));
      }
      if ((jsonObj.get("taxYear") != null && !jsonObj.get("taxYear").isJsonNull()) && !jsonObj.get("taxYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxYear").toString()));
      }
      // validate the optional field `taxYear`
      if (jsonObj.get("taxYear") != null && !jsonObj.get("taxYear").isJsonNull()) {
        TaxYearEnum.validateJsonElement(jsonObj.get("taxYear"));
      }
      if ((jsonObj.get("fromIraType") != null && !jsonObj.get("fromIraType").isJsonNull()) && !jsonObj.get("fromIraType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromIraType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromIraType").toString()));
      }
      // validate the optional field `fromIraType`
      if (jsonObj.get("fromIraType") != null && !jsonObj.get("fromIraType").isJsonNull()) {
        FromIraTypeEnum.validateJsonElement(jsonObj.get("fromIraType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRADepositDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRADepositDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRADepositDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRADepositDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<IRADepositDetails>() {
           @Override
           public void write(JsonWriter out, IRADepositDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRADepositDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRADepositDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRADepositDetails
   * @throws IOException if the JSON string is invalid with respect to IRADepositDetails
   */
  public static IRADepositDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRADepositDetails.class);
  }

  /**
   * Convert an instance of IRADepositDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

