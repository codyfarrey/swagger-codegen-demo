/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.LegalEntityIdentification;
import org.openapitools.client.model.PhoneInfo;
import org.openapitools.client.model.TaxResidency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class LegalEntity {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private Address address;

  public static final String SERIALIZED_NAME_PHONES = "phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  @javax.annotation.Nullable
  private List<PhoneInfo> phones = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_IDENTIFICATION = "legalEntityIdentification";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_IDENTIFICATION)
  @javax.annotation.Nullable
  private LegalEntityIdentification legalEntityIdentification;

  public static final String SERIALIZED_NAME_TAX_RESIDENCIES = "taxResidencies";
  @SerializedName(SERIALIZED_NAME_TAX_RESIDENCIES)
  @javax.annotation.Nullable
  private List<TaxResidency> taxResidencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_US_TAX_RESIDENT = "usTaxResident";
  @SerializedName(SERIALIZED_NAME_US_TAX_RESIDENT)
  @javax.annotation.Nullable
  private Boolean usTaxResident;

  public static final String SERIALIZED_NAME_TRANSLATED = "translated";
  @SerializedName(SERIALIZED_NAME_TRANSLATED)
  @javax.annotation.Nullable
  private Boolean translated;

  public LegalEntity() {
  }

  public LegalEntity name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public LegalEntity address(@javax.annotation.Nullable Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable Address address) {
    this.address = address;
  }


  public LegalEntity phones(@javax.annotation.Nullable List<PhoneInfo> phones) {
    this.phones = phones;
    return this;
  }

  public LegalEntity addPhonesItem(PhoneInfo phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * Get phones
   * @return phones
   */
  @javax.annotation.Nullable
  public List<PhoneInfo> getPhones() {
    return phones;
  }

  public void setPhones(@javax.annotation.Nullable List<PhoneInfo> phones) {
    this.phones = phones;
  }


  public LegalEntity email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public LegalEntity legalEntityIdentification(@javax.annotation.Nullable LegalEntityIdentification legalEntityIdentification) {
    this.legalEntityIdentification = legalEntityIdentification;
    return this;
  }

  /**
   * Get legalEntityIdentification
   * @return legalEntityIdentification
   */
  @javax.annotation.Nullable
  public LegalEntityIdentification getLegalEntityIdentification() {
    return legalEntityIdentification;
  }

  public void setLegalEntityIdentification(@javax.annotation.Nullable LegalEntityIdentification legalEntityIdentification) {
    this.legalEntityIdentification = legalEntityIdentification;
  }


  public LegalEntity taxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
    return this;
  }

  public LegalEntity addTaxResidenciesItem(TaxResidency taxResidenciesItem) {
    if (this.taxResidencies == null) {
      this.taxResidencies = new ArrayList<>();
    }
    this.taxResidencies.add(taxResidenciesItem);
    return this;
  }

  /**
   * Get taxResidencies
   * @return taxResidencies
   */
  @javax.annotation.Nullable
  public List<TaxResidency> getTaxResidencies() {
    return taxResidencies;
  }

  public void setTaxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
  }


  public LegalEntity id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public LegalEntity externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public LegalEntity usTaxResident(@javax.annotation.Nullable Boolean usTaxResident) {
    this.usTaxResident = usTaxResident;
    return this;
  }

  /**
   * Get usTaxResident
   * @return usTaxResident
   */
  @javax.annotation.Nullable
  public Boolean getUsTaxResident() {
    return usTaxResident;
  }

  public void setUsTaxResident(@javax.annotation.Nullable Boolean usTaxResident) {
    this.usTaxResident = usTaxResident;
  }


  public LegalEntity translated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
    return this;
  }

  /**
   * Get translated
   * @return translated
   */
  @javax.annotation.Nullable
  public Boolean getTranslated() {
    return translated;
  }

  public void setTranslated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntity legalEntity = (LegalEntity) o;
    return Objects.equals(this.name, legalEntity.name) &&
        Objects.equals(this.address, legalEntity.address) &&
        Objects.equals(this.phones, legalEntity.phones) &&
        Objects.equals(this.email, legalEntity.email) &&
        Objects.equals(this.legalEntityIdentification, legalEntity.legalEntityIdentification) &&
        Objects.equals(this.taxResidencies, legalEntity.taxResidencies) &&
        Objects.equals(this.id, legalEntity.id) &&
        Objects.equals(this.externalId, legalEntity.externalId) &&
        Objects.equals(this.usTaxResident, legalEntity.usTaxResident) &&
        Objects.equals(this.translated, legalEntity.translated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, phones, email, legalEntityIdentification, taxResidencies, id, externalId, usTaxResident, translated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntity {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    legalEntityIdentification: ").append(toIndentedString(legalEntityIdentification)).append("\n");
    sb.append("    taxResidencies: ").append(toIndentedString(taxResidencies)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    usTaxResident: ").append(toIndentedString(usTaxResident)).append("\n");
    sb.append("    translated: ").append(toIndentedString(translated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("phones");
    openapiFields.add("email");
    openapiFields.add("legalEntityIdentification");
    openapiFields.add("taxResidencies");
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("usTaxResident");
    openapiFields.add("translated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntity is not found in the empty JSON string", LegalEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if (jsonObj.get("phones") != null && !jsonObj.get("phones").isJsonNull()) {
        JsonArray jsonArrayphones = jsonObj.getAsJsonArray("phones");
        if (jsonArrayphones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phones` to be an array in the JSON string but got `%s`", jsonObj.get("phones").toString()));
          }

          // validate the optional field `phones` (array)
          for (int i = 0; i < jsonArrayphones.size(); i++) {
            PhoneInfo.validateJsonElement(jsonArrayphones.get(i));
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `legalEntityIdentification`
      if (jsonObj.get("legalEntityIdentification") != null && !jsonObj.get("legalEntityIdentification").isJsonNull()) {
        LegalEntityIdentification.validateJsonElement(jsonObj.get("legalEntityIdentification"));
      }
      if (jsonObj.get("taxResidencies") != null && !jsonObj.get("taxResidencies").isJsonNull()) {
        JsonArray jsonArraytaxResidencies = jsonObj.getAsJsonArray("taxResidencies");
        if (jsonArraytaxResidencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxResidencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxResidencies` to be an array in the JSON string but got `%s`", jsonObj.get("taxResidencies").toString()));
          }

          // validate the optional field `taxResidencies` (array)
          for (int i = 0; i < jsonArraytaxResidencies.size(); i++) {
            TaxResidency.validateJsonElement(jsonArraytaxResidencies.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntity>() {
           @Override
           public void write(JsonWriter out, LegalEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalEntity
   * @throws IOException if the JSON string is invalid with respect to LegalEntity
   */
  public static LegalEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntity.class);
  }

  /**
   * Convert an instance of LegalEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

