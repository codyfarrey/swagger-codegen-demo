/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DwacInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class DwacInstruction {
  public static final String SERIALIZED_NAME_CLIENT_INSTRUCTION_ID = "clientInstructionId";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal clientInstructionId;

  /**
   * Gets or Sets direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    IN("IN"),
    
    OUT("OUT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  @javax.annotation.Nonnull
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_CONTRA_BROKER_ACCOUNT_ID = "contraBrokerAccountId";
  @SerializedName(SERIALIZED_NAME_CONTRA_BROKER_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String contraBrokerAccountId;

  public static final String SERIALIZED_NAME_CONTRA_BROKER_TAX_ID = "contraBrokerTaxId";
  @SerializedName(SERIALIZED_NAME_CONTRA_BROKER_TAX_ID)
  @javax.annotation.Nonnull
  private String contraBrokerTaxId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nonnull
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_TRADING_INSTRUMENT = "tradingInstrument";
  @SerializedName(SERIALIZED_NAME_TRADING_INSTRUMENT)
  @javax.annotation.Nullable
  private Object tradingInstrument;

  public static final String SERIALIZED_NAME_ACCOUNT_TITLE = "accountTitle";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TITLE)
  @javax.annotation.Nullable
  private String accountTitle;

  public static final String SERIALIZED_NAME_REFRENCE_ID = "refrenceId";
  @SerializedName(SERIALIZED_NAME_REFRENCE_ID)
  @javax.annotation.Nullable
  private String refrenceId;

  public DwacInstruction() {
  }

  public DwacInstruction clientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
    return this;
  }

  /**
   * Get clientInstructionId
   * @return clientInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getClientInstructionId() {
    return clientInstructionId;
  }

  public void setClientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
  }


  public DwacInstruction direction(@javax.annotation.Nonnull DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(@javax.annotation.Nonnull DirectionEnum direction) {
    this.direction = direction;
  }


  public DwacInstruction accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public DwacInstruction contraBrokerAccountId(@javax.annotation.Nonnull String contraBrokerAccountId) {
    this.contraBrokerAccountId = contraBrokerAccountId;
    return this;
  }

  /**
   * Get contraBrokerAccountId
   * @return contraBrokerAccountId
   */
  @javax.annotation.Nonnull
  public String getContraBrokerAccountId() {
    return contraBrokerAccountId;
  }

  public void setContraBrokerAccountId(@javax.annotation.Nonnull String contraBrokerAccountId) {
    this.contraBrokerAccountId = contraBrokerAccountId;
  }


  public DwacInstruction contraBrokerTaxId(@javax.annotation.Nonnull String contraBrokerTaxId) {
    this.contraBrokerTaxId = contraBrokerTaxId;
    return this;
  }

  /**
   * Get contraBrokerTaxId
   * @return contraBrokerTaxId
   */
  @javax.annotation.Nonnull
  public String getContraBrokerTaxId() {
    return contraBrokerTaxId;
  }

  public void setContraBrokerTaxId(@javax.annotation.Nonnull String contraBrokerTaxId) {
    this.contraBrokerTaxId = contraBrokerTaxId;
  }


  public DwacInstruction quantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * minimum: 0
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nonnull BigDecimal quantity) {
    this.quantity = quantity;
  }


  public DwacInstruction tradingInstrument(@javax.annotation.Nullable Object tradingInstrument) {
    this.tradingInstrument = tradingInstrument;
    return this;
  }

  /**
   * Get tradingInstrument
   * @return tradingInstrument
   */
  @javax.annotation.Nullable
  public Object getTradingInstrument() {
    return tradingInstrument;
  }

  public void setTradingInstrument(@javax.annotation.Nullable Object tradingInstrument) {
    this.tradingInstrument = tradingInstrument;
  }


  public DwacInstruction accountTitle(@javax.annotation.Nullable String accountTitle) {
    this.accountTitle = accountTitle;
    return this;
  }

  /**
   * Get accountTitle
   * @return accountTitle
   */
  @javax.annotation.Nullable
  public String getAccountTitle() {
    return accountTitle;
  }

  public void setAccountTitle(@javax.annotation.Nullable String accountTitle) {
    this.accountTitle = accountTitle;
  }


  public DwacInstruction refrenceId(@javax.annotation.Nullable String refrenceId) {
    this.refrenceId = refrenceId;
    return this;
  }

  /**
   * Get refrenceId
   * @return refrenceId
   */
  @javax.annotation.Nullable
  public String getRefrenceId() {
    return refrenceId;
  }

  public void setRefrenceId(@javax.annotation.Nullable String refrenceId) {
    this.refrenceId = refrenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DwacInstruction dwacInstruction = (DwacInstruction) o;
    return Objects.equals(this.clientInstructionId, dwacInstruction.clientInstructionId) &&
        Objects.equals(this.direction, dwacInstruction.direction) &&
        Objects.equals(this.accountId, dwacInstruction.accountId) &&
        Objects.equals(this.contraBrokerAccountId, dwacInstruction.contraBrokerAccountId) &&
        Objects.equals(this.contraBrokerTaxId, dwacInstruction.contraBrokerTaxId) &&
        Objects.equals(this.quantity, dwacInstruction.quantity) &&
        Objects.equals(this.tradingInstrument, dwacInstruction.tradingInstrument) &&
        Objects.equals(this.accountTitle, dwacInstruction.accountTitle) &&
        Objects.equals(this.refrenceId, dwacInstruction.refrenceId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInstructionId, direction, accountId, contraBrokerAccountId, contraBrokerTaxId, quantity, tradingInstrument, accountTitle, refrenceId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DwacInstruction {\n");
    sb.append("    clientInstructionId: ").append(toIndentedString(clientInstructionId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    contraBrokerAccountId: ").append(toIndentedString(contraBrokerAccountId)).append("\n");
    sb.append("    contraBrokerTaxId: ").append(toIndentedString(contraBrokerTaxId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tradingInstrument: ").append(toIndentedString(tradingInstrument)).append("\n");
    sb.append("    accountTitle: ").append(toIndentedString(accountTitle)).append("\n");
    sb.append("    refrenceId: ").append(toIndentedString(refrenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInstructionId");
    openapiFields.add("direction");
    openapiFields.add("accountId");
    openapiFields.add("contraBrokerAccountId");
    openapiFields.add("contraBrokerTaxId");
    openapiFields.add("quantity");
    openapiFields.add("tradingInstrument");
    openapiFields.add("accountTitle");
    openapiFields.add("refrenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientInstructionId");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("contraBrokerAccountId");
    openapiRequiredFields.add("contraBrokerTaxId");
    openapiRequiredFields.add("quantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DwacInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DwacInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DwacInstruction is not found in the empty JSON string", DwacInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DwacInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DwacInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DwacInstruction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the required field `direction`
      DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("contraBrokerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contraBrokerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contraBrokerAccountId").toString()));
      }
      if (!jsonObj.get("contraBrokerTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contraBrokerTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contraBrokerTaxId").toString()));
      }
      // validate the optional field `tradingInstrument`
      if (jsonObj.get("tradingInstrument") != null && !jsonObj.get("tradingInstrument").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("tradingInstrument"));
      }
      if ((jsonObj.get("accountTitle") != null && !jsonObj.get("accountTitle").isJsonNull()) && !jsonObj.get("accountTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountTitle").toString()));
      }
      if ((jsonObj.get("refrenceId") != null && !jsonObj.get("refrenceId").isJsonNull()) && !jsonObj.get("refrenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refrenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refrenceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DwacInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DwacInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DwacInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DwacInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<DwacInstruction>() {
           @Override
           public void write(JsonWriter out, DwacInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DwacInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DwacInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DwacInstruction
   * @throws IOException if the JSON string is invalid with respect to DwacInstruction
   */
  public static DwacInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DwacInstruction.class);
  }

  /**
   * Convert an instance of DwacInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

