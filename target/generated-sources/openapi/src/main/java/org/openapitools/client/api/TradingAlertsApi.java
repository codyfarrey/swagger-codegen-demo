/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertActivationRequest;
import org.openapitools.client.model.AlertActivationResponse;
import org.openapitools.client.model.AlertCreationRequest;
import org.openapitools.client.model.AlertCreationResponse;
import org.openapitools.client.model.AlertDeletionResponse;
import org.openapitools.client.model.AlertDetails;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingAlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingAlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingAlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iserverAccountAccountIdAlertActivatePost
     * @param accountId  (required)
     * @param alertActivationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details about the activated/deactivated alert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; unable to process incoming request due to invalid data in it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertActivatePostCall(String accountId, AlertActivationRequest alertActivationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertActivationRequest;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/alert/activate"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdAlertActivatePostValidateBeforeCall(String accountId, AlertActivationRequest alertActivationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertActivatePost(Async)");
        }

        // verify the required parameter 'alertActivationRequest' is set
        if (alertActivationRequest == null) {
            throw new ApiException("Missing the required parameter 'alertActivationRequest' when calling iserverAccountAccountIdAlertActivatePost(Async)");
        }

        return iserverAccountAccountIdAlertActivatePostCall(accountId, alertActivationRequest, _callback);

    }

    /**
     * Activate Or Deactivate An Alert
     * Activate or Deactivate existing alerts created for this account. This does not delete alerts, but disables notifications until reactivated.
     * @param accountId  (required)
     * @param alertActivationRequest  (required)
     * @return AlertActivationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details about the activated/deactivated alert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; unable to process incoming request due to invalid data in it </td><td>  -  </td></tr>
     </table>
     */
    public AlertActivationResponse iserverAccountAccountIdAlertActivatePost(String accountId, AlertActivationRequest alertActivationRequest) throws ApiException {
        ApiResponse<AlertActivationResponse> localVarResp = iserverAccountAccountIdAlertActivatePostWithHttpInfo(accountId, alertActivationRequest);
        return localVarResp.getData();
    }

    /**
     * Activate Or Deactivate An Alert
     * Activate or Deactivate existing alerts created for this account. This does not delete alerts, but disables notifications until reactivated.
     * @param accountId  (required)
     * @param alertActivationRequest  (required)
     * @return ApiResponse&lt;AlertActivationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details about the activated/deactivated alert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; unable to process incoming request due to invalid data in it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertActivationResponse> iserverAccountAccountIdAlertActivatePostWithHttpInfo(String accountId, AlertActivationRequest alertActivationRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdAlertActivatePostValidateBeforeCall(accountId, alertActivationRequest, null);
        Type localVarReturnType = new TypeToken<AlertActivationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate Or Deactivate An Alert (asynchronously)
     * Activate or Deactivate existing alerts created for this account. This does not delete alerts, but disables notifications until reactivated.
     * @param accountId  (required)
     * @param alertActivationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details about the activated/deactivated alert. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; unable to process incoming request due to invalid data in it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertActivatePostAsync(String accountId, AlertActivationRequest alertActivationRequest, final ApiCallback<AlertActivationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdAlertActivatePostValidateBeforeCall(accountId, alertActivationRequest, _callback);
        Type localVarReturnType = new TypeToken<AlertActivationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdAlertAlertIdDelete
     * @param accountId  (required)
     * @param alertId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details on the deleted endpoint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; Unable to delete alert in case when provided alert id doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertAlertIdDeleteCall(String accountId, String alertId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/alert/{alertId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(String accountId, String alertId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertAlertIdDelete(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling iserverAccountAccountIdAlertAlertIdDelete(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling iserverAccountAccountIdAlertAlertIdDelete(Async)");
        }

        return iserverAccountAccountIdAlertAlertIdDeleteCall(accountId, alertId, body, _callback);

    }

    /**
     * Delete An Alert
     * Permanently delete an existing alert. Deleting an MTA alert will reset it to the default state.
     * @param accountId  (required)
     * @param alertId  (required)
     * @param body  (required)
     * @return AlertDeletionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details on the deleted endpoint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; Unable to delete alert in case when provided alert id doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public AlertDeletionResponse iserverAccountAccountIdAlertAlertIdDelete(String accountId, String alertId, Object body) throws ApiException {
        ApiResponse<AlertDeletionResponse> localVarResp = iserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo(accountId, alertId, body);
        return localVarResp.getData();
    }

    /**
     * Delete An Alert
     * Permanently delete an existing alert. Deleting an MTA alert will reset it to the default state.
     * @param accountId  (required)
     * @param alertId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;AlertDeletionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details on the deleted endpoint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; Unable to delete alert in case when provided alert id doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertDeletionResponse> iserverAccountAccountIdAlertAlertIdDeleteWithHttpInfo(String accountId, String alertId, Object body) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(accountId, alertId, body, null);
        Type localVarReturnType = new TypeToken<AlertDeletionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete An Alert (asynchronously)
     * Permanently delete an existing alert. Deleting an MTA alert will reset it to the default state.
     * @param accountId  (required)
     * @param alertId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing details on the deleted endpoint. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error; Unable to delete alert in case when provided alert id doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertAlertIdDeleteAsync(String accountId, String alertId, Object body, final ApiCallback<AlertDeletionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdAlertAlertIdDeleteValidateBeforeCall(accountId, alertId, body, _callback);
        Type localVarReturnType = new TypeToken<AlertDeletionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdAlertPost
     * @param accountId  (required)
     * @param alertCreationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; body is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example operator is \&quot;abc\&quot; Or if modification request contains unmodified fields  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertPostCall(String accountId, AlertCreationRequest alertCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertCreationRequest;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/alert"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdAlertPostValidateBeforeCall(String accountId, AlertCreationRequest alertCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertPost(Async)");
        }

        // verify the required parameter 'alertCreationRequest' is set
        if (alertCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'alertCreationRequest' when calling iserverAccountAccountIdAlertPost(Async)");
        }

        return iserverAccountAccountIdAlertPostCall(accountId, alertCreationRequest, _callback);

    }

    /**
     * Create Or Modify Alert
     * Endpoint used to create a new alert, or modify an existing alert.
     * @param accountId  (required)
     * @param alertCreationRequest  (required)
     * @return AlertCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; body is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example operator is \&quot;abc\&quot; Or if modification request contains unmodified fields  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public AlertCreationResponse iserverAccountAccountIdAlertPost(String accountId, AlertCreationRequest alertCreationRequest) throws ApiException {
        ApiResponse<AlertCreationResponse> localVarResp = iserverAccountAccountIdAlertPostWithHttpInfo(accountId, alertCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Create Or Modify Alert
     * Endpoint used to create a new alert, or modify an existing alert.
     * @param accountId  (required)
     * @param alertCreationRequest  (required)
     * @return ApiResponse&lt;AlertCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; body is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example operator is \&quot;abc\&quot; Or if modification request contains unmodified fields  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertCreationResponse> iserverAccountAccountIdAlertPostWithHttpInfo(String accountId, AlertCreationRequest alertCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdAlertPostValidateBeforeCall(accountId, alertCreationRequest, null);
        Type localVarReturnType = new TypeToken<AlertCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Or Modify Alert (asynchronously)
     * Endpoint used to create a new alert, or modify an existing alert.
     * @param accountId  (required)
     * @param alertCreationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; body is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example operator is \&quot;abc\&quot; Or if modification request contains unmodified fields  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertPostAsync(String accountId, AlertCreationRequest alertCreationRequest, final ApiCallback<AlertCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdAlertPostValidateBeforeCall(accountId, alertCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<AlertCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdAlertsGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertsGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/alerts"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdAlertsGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdAlertsGet(Async)");
        }

        return iserverAccountAccountIdAlertsGetCall(accountId, _callback);

    }

    /**
     * Get A List Of Available Alerts
     * Retrieve a list of all alerts attached to the provided account.
     * @param accountId  (required)
     * @return Set&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public Set<Alert> iserverAccountAccountIdAlertsGet(String accountId) throws ApiException {
        ApiResponse<Set<Alert>> localVarResp = iserverAccountAccountIdAlertsGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get A List Of Available Alerts
     * Retrieve a list of all alerts attached to the provided account.
     * @param accountId  (required)
     * @return ApiResponse&lt;Set&lt;Alert&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<Alert>> iserverAccountAccountIdAlertsGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdAlertsGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Set<Alert>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get A List Of Available Alerts (asynchronously)
     * Retrieve a list of all alerts attached to the provided account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdAlertsGetAsync(String accountId, final ApiCallback<Set<Alert>> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdAlertsGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Set<Alert>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAlertAlertIdGet
     * @param alertId  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all unique details of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request if orderId is empty or type is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> orderId is not parsable; unable to process request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAlertAlertIdGetCall(String alertId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/alert/{alertId}"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAlertAlertIdGetValidateBeforeCall(String alertId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling iserverAccountAlertAlertIdGet(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling iserverAccountAlertAlertIdGet(Async)");
        }

        return iserverAccountAlertAlertIdGetCall(alertId, type, _callback);

    }

    /**
     * Get Details Of A Specific Alert
     * Request details of a specific alert by providing the assigned alertId Id.
     * @param alertId  (required)
     * @param type  (required)
     * @return AlertDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all unique details of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request if orderId is empty or type is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> orderId is not parsable; unable to process request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public AlertDetails iserverAccountAlertAlertIdGet(String alertId, String type) throws ApiException {
        ApiResponse<AlertDetails> localVarResp = iserverAccountAlertAlertIdGetWithHttpInfo(alertId, type);
        return localVarResp.getData();
    }

    /**
     * Get Details Of A Specific Alert
     * Request details of a specific alert by providing the assigned alertId Id.
     * @param alertId  (required)
     * @param type  (required)
     * @return ApiResponse&lt;AlertDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all unique details of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request if orderId is empty or type is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> orderId is not parsable; unable to process request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertDetails> iserverAccountAlertAlertIdGetWithHttpInfo(String alertId, String type) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAlertAlertIdGetValidateBeforeCall(alertId, type, null);
        Type localVarReturnType = new TypeToken<AlertDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Details Of A Specific Alert (asynchronously)
     * Request details of a specific alert by providing the assigned alertId Id.
     * @param alertId  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing all unique details of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request if orderId is empty or type is invalid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> orderId is not parsable; unable to process request </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAlertAlertIdGetAsync(String alertId, String type, final ApiCallback<AlertDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAlertAlertIdGetValidateBeforeCall(alertId, type, _callback);
        Type localVarReturnType = new TypeToken<AlertDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountMtaGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The alert description for the unique MTA alert on the account. </td><td>  -  </td></tr>
     </table>
     * See our here for more information on MTA alerts
     * @see <a href="https://www.ibkrguides.com/iphone/alerts.htm">Get MTA Alert Documentation</a>
     */
    public okhttp3.Call iserverAccountMtaGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/mta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountMtaGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverAccountMtaGetCall(_callback);

    }

    /**
     * Get MTA Alert
     * Retrieve information about your MTA alert. Each login user only has one mobile trading assistant (MTA) alert with it’s own unique tool id that cannot be changed. MTA alerts can not be created or deleted, only modified. When modified a new order Id is generated. 
     * @return AlertDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The alert description for the unique MTA alert on the account. </td><td>  -  </td></tr>
     </table>
     * See our here for more information on MTA alerts
     * @see <a href="https://www.ibkrguides.com/iphone/alerts.htm">Get MTA Alert Documentation</a>
     */
    public AlertDetails iserverAccountMtaGet() throws ApiException {
        ApiResponse<AlertDetails> localVarResp = iserverAccountMtaGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get MTA Alert
     * Retrieve information about your MTA alert. Each login user only has one mobile trading assistant (MTA) alert with it’s own unique tool id that cannot be changed. MTA alerts can not be created or deleted, only modified. When modified a new order Id is generated. 
     * @return ApiResponse&lt;AlertDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The alert description for the unique MTA alert on the account. </td><td>  -  </td></tr>
     </table>
     * See our here for more information on MTA alerts
     * @see <a href="https://www.ibkrguides.com/iphone/alerts.htm">Get MTA Alert Documentation</a>
     */
    public ApiResponse<AlertDetails> iserverAccountMtaGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverAccountMtaGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AlertDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MTA Alert (asynchronously)
     * Retrieve information about your MTA alert. Each login user only has one mobile trading assistant (MTA) alert with it’s own unique tool id that cannot be changed. MTA alerts can not be created or deleted, only modified. When modified a new order Id is generated. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The alert description for the unique MTA alert on the account. </td><td>  -  </td></tr>
     </table>
     * See our here for more information on MTA alerts
     * @see <a href="https://www.ibkrguides.com/iphone/alerts.htm">Get MTA Alert Documentation</a>
     */
    public okhttp3.Call iserverAccountMtaGetAsync(final ApiCallback<AlertDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountMtaGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AlertDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
