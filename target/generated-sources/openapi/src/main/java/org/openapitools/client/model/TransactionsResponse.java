/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransactionsResponseRpnl;
import org.openapitools.client.model.TransactionsResponseTransactionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TransactionsResponse {
  public static final String SERIALIZED_NAME_RC = "rc";
  @SerializedName(SERIALIZED_NAME_RC)
  @javax.annotation.Nullable
  private Integer rc;

  public static final String SERIALIZED_NAME_ND = "nd";
  @SerializedName(SERIALIZED_NAME_ND)
  @javax.annotation.Nullable
  private Integer nd;

  public static final String SERIALIZED_NAME_RPNL = "rpnl";
  @SerializedName(SERIALIZED_NAME_RPNL)
  @javax.annotation.Nullable
  private TransactionsResponseRpnl rpnl;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private Integer from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nullable
  private Integer to;

  public static final String SERIALIZED_NAME_INCLUDES_REAL_TIME = "includesRealTime";
  @SerializedName(SERIALIZED_NAME_INCLUDES_REAL_TIME)
  @javax.annotation.Nullable
  private Boolean includesRealTime;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  @javax.annotation.Nullable
  private List<TransactionsResponseTransactionsInner> transactions = new ArrayList<>();

  public TransactionsResponse() {
  }

  public TransactionsResponse rc(@javax.annotation.Nullable Integer rc) {
    this.rc = rc;
    return this;
  }

  /**
   * Client portal use only
   * @return rc
   */
  @javax.annotation.Nullable
  public Integer getRc() {
    return rc;
  }

  public void setRc(@javax.annotation.Nullable Integer rc) {
    this.rc = rc;
  }


  public TransactionsResponse nd(@javax.annotation.Nullable Integer nd) {
    this.nd = nd;
    return this;
  }

  /**
   * Client portal use only
   * @return nd
   */
  @javax.annotation.Nullable
  public Integer getNd() {
    return nd;
  }

  public void setNd(@javax.annotation.Nullable Integer nd) {
    this.nd = nd;
  }


  public TransactionsResponse rpnl(@javax.annotation.Nullable TransactionsResponseRpnl rpnl) {
    this.rpnl = rpnl;
    return this;
  }

  /**
   * Get rpnl
   * @return rpnl
   */
  @javax.annotation.Nullable
  public TransactionsResponseRpnl getRpnl() {
    return rpnl;
  }

  public void setRpnl(@javax.annotation.Nullable TransactionsResponseRpnl rpnl) {
    this.rpnl = rpnl;
  }


  public TransactionsResponse currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Returns the currency the account is traded in.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public TransactionsResponse from(@javax.annotation.Nullable Integer from) {
    this.from = from;
    return this;
  }

  /**
   * Returns the epoch time for the start of requests.
   * @return from
   */
  @javax.annotation.Nullable
  public Integer getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable Integer from) {
    this.from = from;
  }


  public TransactionsResponse id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Returns the request identifier, getTransactions.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public TransactionsResponse to(@javax.annotation.Nullable Integer to) {
    this.to = to;
    return this;
  }

  /**
   * Returns the epoch time for the end of requests.
   * @return to
   */
  @javax.annotation.Nullable
  public Integer getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nullable Integer to) {
    this.to = to;
  }


  public TransactionsResponse includesRealTime(@javax.annotation.Nullable Boolean includesRealTime) {
    this.includesRealTime = includesRealTime;
    return this;
  }

  /**
   * Returns if the trades are up to date or not.
   * @return includesRealTime
   */
  @javax.annotation.Nullable
  public Boolean getIncludesRealTime() {
    return includesRealTime;
  }

  public void setIncludesRealTime(@javax.annotation.Nullable Boolean includesRealTime) {
    this.includesRealTime = includesRealTime;
  }


  public TransactionsResponse transactions(@javax.annotation.Nullable List<TransactionsResponseTransactionsInner> transactions) {
    this.transactions = transactions;
    return this;
  }

  public TransactionsResponse addTransactionsItem(TransactionsResponseTransactionsInner transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * Lists all supported transaction values.
   * @return transactions
   */
  @javax.annotation.Nullable
  public List<TransactionsResponseTransactionsInner> getTransactions() {
    return transactions;
  }

  public void setTransactions(@javax.annotation.Nullable List<TransactionsResponseTransactionsInner> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsResponse transactionsResponse = (TransactionsResponse) o;
    return Objects.equals(this.rc, transactionsResponse.rc) &&
        Objects.equals(this.nd, transactionsResponse.nd) &&
        Objects.equals(this.rpnl, transactionsResponse.rpnl) &&
        Objects.equals(this.currency, transactionsResponse.currency) &&
        Objects.equals(this.from, transactionsResponse.from) &&
        Objects.equals(this.id, transactionsResponse.id) &&
        Objects.equals(this.to, transactionsResponse.to) &&
        Objects.equals(this.includesRealTime, transactionsResponse.includesRealTime) &&
        Objects.equals(this.transactions, transactionsResponse.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rc, nd, rpnl, currency, from, id, to, includesRealTime, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsResponse {\n");
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("    nd: ").append(toIndentedString(nd)).append("\n");
    sb.append("    rpnl: ").append(toIndentedString(rpnl)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    includesRealTime: ").append(toIndentedString(includesRealTime)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rc");
    openapiFields.add("nd");
    openapiFields.add("rpnl");
    openapiFields.add("currency");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("to");
    openapiFields.add("includesRealTime");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionsResponse is not found in the empty JSON string", TransactionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `rpnl`
      if (jsonObj.get("rpnl") != null && !jsonObj.get("rpnl").isJsonNull()) {
        TransactionsResponseRpnl.validateJsonElement(jsonObj.get("rpnl"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            TransactionsResponseTransactionsInner.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionsResponse>() {
           @Override
           public void write(JsonWriter out, TransactionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionsResponse
   * @throws IOException if the JSON string is invalid with respect to TransactionsResponse
   */
  public static TransactionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionsResponse.class);
  }

  /**
   * Convert an instance of TransactionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

