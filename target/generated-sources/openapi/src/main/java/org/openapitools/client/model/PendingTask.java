/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PendingTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PendingTask {
  public static final String SERIALIZED_NAME_TASK_NUMBER = "taskNumber";
  @SerializedName(SERIALIZED_NAME_TASK_NUMBER)
  @javax.annotation.Nullable
  private Integer taskNumber;

  public static final String SERIALIZED_NAME_FORM_NUMBER = "formNumber";
  @SerializedName(SERIALIZED_NAME_FORM_NUMBER)
  @javax.annotation.Nullable
  private Integer formNumber;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  @javax.annotation.Nullable
  private String action;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_DOCUMENT_REJECT_REASON = "documentRejectReason";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_REJECT_REASON)
  @javax.annotation.Nullable
  private List<String> documentRejectReason = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_AU10TIX_CREATED_DATE = "au10tixCreatedDate";
  @SerializedName(SERIALIZED_NAME_AU10TIX_CREATED_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime au10tixCreatedDate;

  public static final String SERIALIZED_NAME_AU10TIX_EXPIRY_DATE = "au10tixExpiryDate";
  @SerializedName(SERIALIZED_NAME_AU10TIX_EXPIRY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime au10tixExpiryDate;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  @javax.annotation.Nullable
  private Integer entityId;

  public static final String SERIALIZED_NAME_ONLINE_TASK = "onlineTask";
  @SerializedName(SERIALIZED_NAME_ONLINE_TASK)
  @javax.annotation.Nullable
  private Boolean onlineTask;

  public static final String SERIALIZED_NAME_REQUIRED_FOR_APPROVAL = "requiredForApproval";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FOR_APPROVAL)
  @javax.annotation.Nullable
  private Boolean requiredForApproval;

  public static final String SERIALIZED_NAME_REQUIRED_FOR_TRADING = "requiredForTrading";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FOR_TRADING)
  @javax.annotation.Nullable
  private Boolean requiredForTrading;

  public static final String SERIALIZED_NAME_QUESTION_IDS = "questionIds";
  @SerializedName(SERIALIZED_NAME_QUESTION_IDS)
  @javax.annotation.Nullable
  private List<Integer> questionIds = new ArrayList<>();

  public PendingTask() {
  }

  public PendingTask taskNumber(@javax.annotation.Nullable Integer taskNumber) {
    this.taskNumber = taskNumber;
    return this;
  }

  /**
   * Get taskNumber
   * @return taskNumber
   */
  @javax.annotation.Nullable
  public Integer getTaskNumber() {
    return taskNumber;
  }

  public void setTaskNumber(@javax.annotation.Nullable Integer taskNumber) {
    this.taskNumber = taskNumber;
  }


  public PendingTask formNumber(@javax.annotation.Nullable Integer formNumber) {
    this.formNumber = formNumber;
    return this;
  }

  /**
   * Get formNumber
   * @return formNumber
   */
  @javax.annotation.Nullable
  public Integer getFormNumber() {
    return formNumber;
  }

  public void setFormNumber(@javax.annotation.Nullable Integer formNumber) {
    this.formNumber = formNumber;
  }


  public PendingTask formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Get formName
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public PendingTask action(@javax.annotation.Nullable String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(@javax.annotation.Nullable String action) {
    this.action = action;
  }


  public PendingTask externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public PendingTask state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public PendingTask documentRejectReason(@javax.annotation.Nullable List<String> documentRejectReason) {
    this.documentRejectReason = documentRejectReason;
    return this;
  }

  public PendingTask addDocumentRejectReasonItem(String documentRejectReasonItem) {
    if (this.documentRejectReason == null) {
      this.documentRejectReason = new ArrayList<>();
    }
    this.documentRejectReason.add(documentRejectReasonItem);
    return this;
  }

  /**
   * Get documentRejectReason
   * @return documentRejectReason
   */
  @javax.annotation.Nullable
  public List<String> getDocumentRejectReason() {
    return documentRejectReason;
  }

  public void setDocumentRejectReason(@javax.annotation.Nullable List<String> documentRejectReason) {
    this.documentRejectReason = documentRejectReason;
  }


  public PendingTask url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public PendingTask startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public PendingTask au10tixCreatedDate(@javax.annotation.Nullable OffsetDateTime au10tixCreatedDate) {
    this.au10tixCreatedDate = au10tixCreatedDate;
    return this;
  }

  /**
   * Get au10tixCreatedDate
   * @return au10tixCreatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAu10tixCreatedDate() {
    return au10tixCreatedDate;
  }

  public void setAu10tixCreatedDate(@javax.annotation.Nullable OffsetDateTime au10tixCreatedDate) {
    this.au10tixCreatedDate = au10tixCreatedDate;
  }


  public PendingTask au10tixExpiryDate(@javax.annotation.Nullable OffsetDateTime au10tixExpiryDate) {
    this.au10tixExpiryDate = au10tixExpiryDate;
    return this;
  }

  /**
   * Get au10tixExpiryDate
   * @return au10tixExpiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAu10tixExpiryDate() {
    return au10tixExpiryDate;
  }

  public void setAu10tixExpiryDate(@javax.annotation.Nullable OffsetDateTime au10tixExpiryDate) {
    this.au10tixExpiryDate = au10tixExpiryDate;
  }


  public PendingTask entityId(@javax.annotation.Nullable Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(@javax.annotation.Nullable Integer entityId) {
    this.entityId = entityId;
  }


  public PendingTask onlineTask(@javax.annotation.Nullable Boolean onlineTask) {
    this.onlineTask = onlineTask;
    return this;
  }

  /**
   * Get onlineTask
   * @return onlineTask
   */
  @javax.annotation.Nullable
  public Boolean getOnlineTask() {
    return onlineTask;
  }

  public void setOnlineTask(@javax.annotation.Nullable Boolean onlineTask) {
    this.onlineTask = onlineTask;
  }


  public PendingTask requiredForApproval(@javax.annotation.Nullable Boolean requiredForApproval) {
    this.requiredForApproval = requiredForApproval;
    return this;
  }

  /**
   * Get requiredForApproval
   * @return requiredForApproval
   */
  @javax.annotation.Nullable
  public Boolean getRequiredForApproval() {
    return requiredForApproval;
  }

  public void setRequiredForApproval(@javax.annotation.Nullable Boolean requiredForApproval) {
    this.requiredForApproval = requiredForApproval;
  }


  public PendingTask requiredForTrading(@javax.annotation.Nullable Boolean requiredForTrading) {
    this.requiredForTrading = requiredForTrading;
    return this;
  }

  /**
   * Get requiredForTrading
   * @return requiredForTrading
   */
  @javax.annotation.Nullable
  public Boolean getRequiredForTrading() {
    return requiredForTrading;
  }

  public void setRequiredForTrading(@javax.annotation.Nullable Boolean requiredForTrading) {
    this.requiredForTrading = requiredForTrading;
  }


  public PendingTask questionIds(@javax.annotation.Nullable List<Integer> questionIds) {
    this.questionIds = questionIds;
    return this;
  }

  public PendingTask addQuestionIdsItem(Integer questionIdsItem) {
    if (this.questionIds == null) {
      this.questionIds = new ArrayList<>();
    }
    this.questionIds.add(questionIdsItem);
    return this;
  }

  /**
   * Get questionIds
   * @return questionIds
   */
  @javax.annotation.Nullable
  public List<Integer> getQuestionIds() {
    return questionIds;
  }

  public void setQuestionIds(@javax.annotation.Nullable List<Integer> questionIds) {
    this.questionIds = questionIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingTask pendingTask = (PendingTask) o;
    return Objects.equals(this.taskNumber, pendingTask.taskNumber) &&
        Objects.equals(this.formNumber, pendingTask.formNumber) &&
        Objects.equals(this.formName, pendingTask.formName) &&
        Objects.equals(this.action, pendingTask.action) &&
        Objects.equals(this.externalId, pendingTask.externalId) &&
        Objects.equals(this.state, pendingTask.state) &&
        Objects.equals(this.documentRejectReason, pendingTask.documentRejectReason) &&
        Objects.equals(this.url, pendingTask.url) &&
        Objects.equals(this.startDate, pendingTask.startDate) &&
        Objects.equals(this.au10tixCreatedDate, pendingTask.au10tixCreatedDate) &&
        Objects.equals(this.au10tixExpiryDate, pendingTask.au10tixExpiryDate) &&
        Objects.equals(this.entityId, pendingTask.entityId) &&
        Objects.equals(this.onlineTask, pendingTask.onlineTask) &&
        Objects.equals(this.requiredForApproval, pendingTask.requiredForApproval) &&
        Objects.equals(this.requiredForTrading, pendingTask.requiredForTrading) &&
        Objects.equals(this.questionIds, pendingTask.questionIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskNumber, formNumber, formName, action, externalId, state, documentRejectReason, url, startDate, au10tixCreatedDate, au10tixExpiryDate, entityId, onlineTask, requiredForApproval, requiredForTrading, questionIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingTask {\n");
    sb.append("    taskNumber: ").append(toIndentedString(taskNumber)).append("\n");
    sb.append("    formNumber: ").append(toIndentedString(formNumber)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    documentRejectReason: ").append(toIndentedString(documentRejectReason)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    au10tixCreatedDate: ").append(toIndentedString(au10tixCreatedDate)).append("\n");
    sb.append("    au10tixExpiryDate: ").append(toIndentedString(au10tixExpiryDate)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    onlineTask: ").append(toIndentedString(onlineTask)).append("\n");
    sb.append("    requiredForApproval: ").append(toIndentedString(requiredForApproval)).append("\n");
    sb.append("    requiredForTrading: ").append(toIndentedString(requiredForTrading)).append("\n");
    sb.append("    questionIds: ").append(toIndentedString(questionIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taskNumber");
    openapiFields.add("formNumber");
    openapiFields.add("formName");
    openapiFields.add("action");
    openapiFields.add("externalId");
    openapiFields.add("state");
    openapiFields.add("documentRejectReason");
    openapiFields.add("url");
    openapiFields.add("startDate");
    openapiFields.add("au10tixCreatedDate");
    openapiFields.add("au10tixExpiryDate");
    openapiFields.add("entityId");
    openapiFields.add("onlineTask");
    openapiFields.add("requiredForApproval");
    openapiFields.add("requiredForTrading");
    openapiFields.add("questionIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingTask is not found in the empty JSON string", PendingTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentRejectReason") != null && !jsonObj.get("documentRejectReason").isJsonNull() && !jsonObj.get("documentRejectReason").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentRejectReason` to be an array in the JSON string but got `%s`", jsonObj.get("documentRejectReason").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("questionIds") != null && !jsonObj.get("questionIds").isJsonNull() && !jsonObj.get("questionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionIds` to be an array in the JSON string but got `%s`", jsonObj.get("questionIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingTask.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingTask>() {
           @Override
           public void write(JsonWriter out, PendingTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingTask
   * @throws IOException if the JSON string is invalid with respect to PendingTask
   */
  public static PendingTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingTask.class);
  }

  /**
   * Convert an instance of PendingTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

