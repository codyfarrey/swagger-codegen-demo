/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FyiVT;
import org.openapitools.client.model.HmdsHistoryResponse;
import org.openapitools.client.model.IserverHistoryResponse;
import org.openapitools.client.model.IserverMarketdataUnsubscribePost200Response;
import org.openapitools.client.model.IserverMarketdataUnsubscribePostRequest;
import org.openapitools.client.model.IserverMarketdataUnsubscribeallGet200Response;
import org.openapitools.client.model.MdFields;
import org.openapitools.client.model.RegsnapshotData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingMarketDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingMarketDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingMarketDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hmdsHistoryGet
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime, as governed by the direction parameter, to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param barType The requested historical data type. If omitted, Last Trade data is queried. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends, as governed by the direction parameter. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param direction The requested period&#39;s direction in time away from the startTime. -1 queries bars from startTime forward into the future for the span of the requested period, 1 queries bars from startTime backward into the past for the span of the request period. Default behavior is 1, from startTime backward. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hmdsHistoryGetCall(String conid, String period, String bar, String barType, String startTime, String direction, Boolean outsideRth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hmds/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conid", conid));
        }

        if (barType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barType", barType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (bar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bar", bar));
        }

        if (outsideRth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outsideRth", outsideRth));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hmdsHistoryGetValidateBeforeCall(String conid, String period, String bar, String barType, String startTime, String direction, Boolean outsideRth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling hmdsHistoryGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling hmdsHistoryGet(Async)");
        }

        // verify the required parameter 'bar' is set
        if (bar == null) {
            throw new ApiException("Missing the required parameter 'bar' when calling hmdsHistoryGet(Async)");
        }

        return hmdsHistoryGetCall(conid, period, bar, barType, startTime, direction, outsideRth, _callback);

    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime, as governed by the direction parameter, to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param barType The requested historical data type. If omitted, Last Trade data is queried. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends, as governed by the direction parameter. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param direction The requested period&#39;s direction in time away from the startTime. -1 queries bars from startTime forward into the future for the span of the requested period, 1 queries bars from startTime backward into the past for the span of the request period. Default behavior is 1, from startTime backward. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @return HmdsHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public HmdsHistoryResponse hmdsHistoryGet(String conid, String period, String bar, String barType, String startTime, String direction, Boolean outsideRth) throws ApiException {
        ApiResponse<HmdsHistoryResponse> localVarResp = hmdsHistoryGetWithHttpInfo(conid, period, bar, barType, startTime, direction, outsideRth);
        return localVarResp.getData();
    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime, as governed by the direction parameter, to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param barType The requested historical data type. If omitted, Last Trade data is queried. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends, as governed by the direction parameter. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param direction The requested period&#39;s direction in time away from the startTime. -1 queries bars from startTime forward into the future for the span of the requested period, 1 queries bars from startTime backward into the past for the span of the request period. Default behavior is 1, from startTime backward. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @return ApiResponse&lt;HmdsHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmdsHistoryResponse> hmdsHistoryGetWithHttpInfo(String conid, String period, String bar, String barType, String startTime, String direction, Boolean outsideRth) throws ApiException {
        okhttp3.Call localVarCall = hmdsHistoryGetValidateBeforeCall(conid, period, bar, barType, startTime, direction, outsideRth, null);
        Type localVarReturnType = new TypeToken<HmdsHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars. (asynchronously)
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime, as governed by the direction parameter, to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param barType The requested historical data type. If omitted, Last Trade data is queried. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends, as governed by the direction parameter. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param direction The requested period&#39;s direction in time away from the startTime. -1 queries bars from startTime forward into the future for the span of the requested period, 1 queries bars from startTime backward into the past for the span of the request period. Default behavior is 1, from startTime backward. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hmdsHistoryGetAsync(String conid, String period, String bar, String barType, String startTime, String direction, Boolean outsideRth, final ApiCallback<HmdsHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hmdsHistoryGetValidateBeforeCall(conid, period, bar, barType, startTime, direction, outsideRth, _callback);
        Type localVarReturnType = new TypeToken<HmdsHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverMarketdataHistoryGet
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime into the future to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param exchange Exchange (or SMART) from which data is requested. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataHistoryGetCall(String conid, String period, String bar, String exchange, String startTime, Boolean outsideRth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/marketdata/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conid", conid));
        }

        if (exchange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange", exchange));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (bar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bar", bar));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (outsideRth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outsideRth", outsideRth));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverMarketdataHistoryGetValidateBeforeCall(String conid, String period, String bar, String exchange, String startTime, Boolean outsideRth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling iserverMarketdataHistoryGet(Async)");
        }

        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling iserverMarketdataHistoryGet(Async)");
        }

        // verify the required parameter 'bar' is set
        if (bar == null) {
            throw new ApiException("Missing the required parameter 'bar' when calling iserverMarketdataHistoryGet(Async)");
        }

        return iserverMarketdataHistoryGetCall(conid, period, bar, exchange, startTime, outsideRth, _callback);

    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime into the future to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param exchange Exchange (or SMART) from which data is requested. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @return IserverHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverHistoryResponse iserverMarketdataHistoryGet(String conid, String period, String bar, String exchange, String startTime, Boolean outsideRth) throws ApiException {
        ApiResponse<IserverHistoryResponse> localVarResp = iserverMarketdataHistoryGetWithHttpInfo(conid, period, bar, exchange, startTime, outsideRth);
        return localVarResp.getData();
    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars.
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime into the future to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param exchange Exchange (or SMART) from which data is requested. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @return ApiResponse&lt;IserverHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverHistoryResponse> iserverMarketdataHistoryGetWithHttpInfo(String conid, String period, String bar, String exchange, String startTime, Boolean outsideRth) throws ApiException {
        okhttp3.Call localVarCall = iserverMarketdataHistoryGetValidateBeforeCall(conid, period, bar, exchange, startTime, outsideRth, null);
        Type localVarReturnType = new TypeToken<IserverHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Historical Data For An Instrument In The Form Of OHLC Bars. (asynchronously)
     * Request historical data for an instrument in the form of OHLC bars.
     * @param conid IB contract ID of the requested instrument. (required)
     * @param period A time duration away from startTime into the future to be divided into bars of the specified width. (required)
     * @param bar The width of the bars into which the interval determined by period and startTime will be divided. It is not required that bar evenly divide period; partial bars can be returned. (required)
     * @param exchange Exchange (or SMART) from which data is requested. (optional)
     * @param startTime A fixed UTC date-time reference point for the historical data request, from which the specified period extends. Format is YYYYMMDD-hh:mm:ss. If omitted, the current time is used, and direction must be omitted or 1. (optional)
     * @param outsideRth Indicates whether data outside of regular trading hours should be included in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Historical data query successfully returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataHistoryGetAsync(String conid, String period, String bar, String exchange, String startTime, Boolean outsideRth, final ApiCallback<IserverHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverMarketdataHistoryGetValidateBeforeCall(conid, period, bar, exchange, startTime, outsideRth, _callback);
        Type localVarReturnType = new TypeToken<IserverHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverMarketdataSnapshotGet
     * @param conids  (required)
     * @param fields  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled or disabled your email notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataSnapshotGetCall(String conids, MdFields fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/marketdata/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conids", conids));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverMarketdataSnapshotGetValidateBeforeCall(String conids, MdFields fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conids' is set
        if (conids == null) {
            throw new ApiException("Missing the required parameter 'conids' when calling iserverMarketdataSnapshotGet(Async)");
        }

        return iserverMarketdataSnapshotGetCall(conids, fields, _callback);

    }

    /**
     * Live Market Data Snapshot
     * Get Market Data for the given conid(s). A pre-flight request must be made prior to ever receiving data. For some fields, it may take more than a few moments to receive information. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. 
     * @param conids  (required)
     * @param fields  (optional)
     * @return FyiVT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled or disabled your email notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public FyiVT iserverMarketdataSnapshotGet(String conids, MdFields fields) throws ApiException {
        ApiResponse<FyiVT> localVarResp = iserverMarketdataSnapshotGetWithHttpInfo(conids, fields);
        return localVarResp.getData();
    }

    /**
     * Live Market Data Snapshot
     * Get Market Data for the given conid(s). A pre-flight request must be made prior to ever receiving data. For some fields, it may take more than a few moments to receive information. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. 
     * @param conids  (required)
     * @param fields  (optional)
     * @return ApiResponse&lt;FyiVT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled or disabled your email notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FyiVT> iserverMarketdataSnapshotGetWithHttpInfo(String conids, MdFields fields) throws ApiException {
        okhttp3.Call localVarCall = iserverMarketdataSnapshotGetValidateBeforeCall(conids, fields, null);
        Type localVarReturnType = new TypeToken<FyiVT>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Live Market Data Snapshot (asynchronously)
     * Get Market Data for the given conid(s). A pre-flight request must be made prior to ever receiving data. For some fields, it may take more than a few moments to receive information. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. 
     * @param conids  (required)
     * @param fields  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled or disabled your email notifications. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataSnapshotGetAsync(String conids, MdFields fields, final ApiCallback<FyiVT> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverMarketdataSnapshotGetValidateBeforeCall(conids, fields, _callback);
        Type localVarReturnType = new TypeToken<FyiVT>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverMarketdataUnsubscribePost
     * @param iserverMarketdataUnsubscribePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledges a successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataUnsubscribePostCall(IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverMarketdataUnsubscribePostRequest;

        // create path and map variables
        String localVarPath = "/iserver/marketdata/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverMarketdataUnsubscribePostValidateBeforeCall(IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iserverMarketdataUnsubscribePostRequest' is set
        if (iserverMarketdataUnsubscribePostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverMarketdataUnsubscribePostRequest' when calling iserverMarketdataUnsubscribePost(Async)");
        }

        return iserverMarketdataUnsubscribePostCall(iserverMarketdataUnsubscribePostRequest, _callback);

    }

    /**
     * Instruct IServer To Close Its Backend Stream For The Instrument.
     * Instruct IServer to close its backend stream for the instrument when real-time snapshots are no longer needed.
     * @param iserverMarketdataUnsubscribePostRequest  (required)
     * @return IserverMarketdataUnsubscribePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledges a successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverMarketdataUnsubscribePost200Response iserverMarketdataUnsubscribePost(IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest) throws ApiException {
        ApiResponse<IserverMarketdataUnsubscribePost200Response> localVarResp = iserverMarketdataUnsubscribePostWithHttpInfo(iserverMarketdataUnsubscribePostRequest);
        return localVarResp.getData();
    }

    /**
     * Instruct IServer To Close Its Backend Stream For The Instrument.
     * Instruct IServer to close its backend stream for the instrument when real-time snapshots are no longer needed.
     * @param iserverMarketdataUnsubscribePostRequest  (required)
     * @return ApiResponse&lt;IserverMarketdataUnsubscribePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledges a successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverMarketdataUnsubscribePost200Response> iserverMarketdataUnsubscribePostWithHttpInfo(IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverMarketdataUnsubscribePostValidateBeforeCall(iserverMarketdataUnsubscribePostRequest, null);
        Type localVarReturnType = new TypeToken<IserverMarketdataUnsubscribePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Instruct IServer To Close Its Backend Stream For The Instrument. (asynchronously)
     * Instruct IServer to close its backend stream for the instrument when real-time snapshots are no longer needed.
     * @param iserverMarketdataUnsubscribePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledges a successful request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataUnsubscribePostAsync(IserverMarketdataUnsubscribePostRequest iserverMarketdataUnsubscribePostRequest, final ApiCallback<IserverMarketdataUnsubscribePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverMarketdataUnsubscribePostValidateBeforeCall(iserverMarketdataUnsubscribePostRequest, _callback);
        Type localVarReturnType = new TypeToken<IserverMarketdataUnsubscribePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverMarketdataUnsubscribeallGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful request to unsubscribe all streams. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataUnsubscribeallGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/marketdata/unsubscribeall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverMarketdataUnsubscribeallGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverMarketdataUnsubscribeallGetCall(_callback);

    }

    /**
     * Instruct IServer To Close All Of Its Open Backend Data Streams For All Instruments.
     * Instruct IServer to close all of its open backend data streams for all instruments.
     * @return IserverMarketdataUnsubscribeallGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful request to unsubscribe all streams. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public IserverMarketdataUnsubscribeallGet200Response iserverMarketdataUnsubscribeallGet() throws ApiException {
        ApiResponse<IserverMarketdataUnsubscribeallGet200Response> localVarResp = iserverMarketdataUnsubscribeallGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Instruct IServer To Close All Of Its Open Backend Data Streams For All Instruments.
     * Instruct IServer to close all of its open backend data streams for all instruments.
     * @return ApiResponse&lt;IserverMarketdataUnsubscribeallGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful request to unsubscribe all streams. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IserverMarketdataUnsubscribeallGet200Response> iserverMarketdataUnsubscribeallGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverMarketdataUnsubscribeallGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IserverMarketdataUnsubscribeallGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Instruct IServer To Close All Of Its Open Backend Data Streams For All Instruments. (asynchronously)
     * Instruct IServer to close all of its open backend data streams for all instruments.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful request to unsubscribe all streams. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverMarketdataUnsubscribeallGetAsync(final ApiCallback<IserverMarketdataUnsubscribeallGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverMarketdataUnsubscribeallGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IserverMarketdataUnsubscribeallGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdRegsnapshotGet
     * @param conid An IB contract ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Data reg. snapshot </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdRegsnapshotGetCall(String conid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/md/regsnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conid", conid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdRegsnapshotGetValidateBeforeCall(String conid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conid' is set
        if (conid == null) {
            throw new ApiException("Missing the required parameter 'conid' when calling mdRegsnapshotGet(Async)");
        }

        return mdRegsnapshotGetCall(conid, _callback);

    }

    /**
     * Request A Regulatory Snapshot For An Instrument.
     * Request a regulatory snapshot for an instrument.
     * @param conid An IB contract ID. (required)
     * @return RegsnapshotData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Data reg. snapshot </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public RegsnapshotData mdRegsnapshotGet(String conid) throws ApiException {
        ApiResponse<RegsnapshotData> localVarResp = mdRegsnapshotGetWithHttpInfo(conid);
        return localVarResp.getData();
    }

    /**
     * Request A Regulatory Snapshot For An Instrument.
     * Request a regulatory snapshot for an instrument.
     * @param conid An IB contract ID. (required)
     * @return ApiResponse&lt;RegsnapshotData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Data reg. snapshot </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegsnapshotData> mdRegsnapshotGetWithHttpInfo(String conid) throws ApiException {
        okhttp3.Call localVarCall = mdRegsnapshotGetValidateBeforeCall(conid, null);
        Type localVarReturnType = new TypeToken<RegsnapshotData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request A Regulatory Snapshot For An Instrument. (asynchronously)
     * Request a regulatory snapshot for an instrument.
     * @param conid An IB contract ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Market Data reg. snapshot </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdRegsnapshotGetAsync(String conid, final ApiCallback<RegsnapshotData> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdRegsnapshotGetValidateBeforeCall(conid, _callback);
        Type localVarReturnType = new TypeToken<RegsnapshotData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
