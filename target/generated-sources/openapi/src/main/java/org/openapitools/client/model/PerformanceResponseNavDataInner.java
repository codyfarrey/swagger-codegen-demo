/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PerformanceResponseNavDataInnerStartNAV;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceResponseNavDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PerformanceResponseNavDataInner {
  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  @javax.annotation.Nullable
  private String idType;

  public static final String SERIALIZED_NAME_NAVS = "navs";
  @SerializedName(SERIALIZED_NAME_NAVS)
  @javax.annotation.Nullable
  private List<String> navs = new ArrayList<>();

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  @javax.annotation.Nullable
  private String start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  @javax.annotation.Nullable
  private String end;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_START_N_A_V = "startNAV";
  @SerializedName(SERIALIZED_NAME_START_N_A_V)
  @javax.annotation.Nullable
  private PerformanceResponseNavDataInnerStartNAV startNAV;

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  @javax.annotation.Nullable
  private String baseCurrency;

  public PerformanceResponseNavDataInner() {
  }

  public PerformanceResponseNavDataInner idType(@javax.annotation.Nullable String idType) {
    this.idType = idType;
    return this;
  }

  /**
   * Returns how identifiers are determined.
   * @return idType
   */
  @javax.annotation.Nullable
  public String getIdType() {
    return idType;
  }

  public void setIdType(@javax.annotation.Nullable String idType) {
    this.idType = idType;
  }


  public PerformanceResponseNavDataInner navs(@javax.annotation.Nullable List<String> navs) {
    this.navs = navs;
    return this;
  }

  public PerformanceResponseNavDataInner addNavsItem(String navsItem) {
    if (this.navs == null) {
      this.navs = new ArrayList<>();
    }
    this.navs.add(navsItem);
    return this;
  }

  /**
   * Returns sequential data points corresponding to the net asset value between the \&quot;start\&quot; and \&quot;end\&quot; days.
   * @return navs
   */
  @javax.annotation.Nullable
  public List<String> getNavs() {
    return navs;
  }

  public void setNavs(@javax.annotation.Nullable List<String> navs) {
    this.navs = navs;
  }


  public PerformanceResponseNavDataInner start(@javax.annotation.Nullable String start) {
    this.start = start;
    return this;
  }

  /**
   * Returns the first available date for data.
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(@javax.annotation.Nullable String start) {
    this.start = start;
  }


  public PerformanceResponseNavDataInner end(@javax.annotation.Nullable String end) {
    this.end = end;
    return this;
  }

  /**
   * Returns the end of the available frequency.
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(@javax.annotation.Nullable String end) {
    this.end = end;
  }


  public PerformanceResponseNavDataInner id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Returns the account identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PerformanceResponseNavDataInner startNAV(@javax.annotation.Nullable PerformanceResponseNavDataInnerStartNAV startNAV) {
    this.startNAV = startNAV;
    return this;
  }

  /**
   * Get startNAV
   * @return startNAV
   */
  @javax.annotation.Nullable
  public PerformanceResponseNavDataInnerStartNAV getStartNAV() {
    return startNAV;
  }

  public void setStartNAV(@javax.annotation.Nullable PerformanceResponseNavDataInnerStartNAV startNAV) {
    this.startNAV = startNAV;
  }


  public PerformanceResponseNavDataInner baseCurrency(@javax.annotation.Nullable String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * Returns the base currency used in the account.
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public String getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(@javax.annotation.Nullable String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceResponseNavDataInner performanceResponseNavDataInner = (PerformanceResponseNavDataInner) o;
    return Objects.equals(this.idType, performanceResponseNavDataInner.idType) &&
        Objects.equals(this.navs, performanceResponseNavDataInner.navs) &&
        Objects.equals(this.start, performanceResponseNavDataInner.start) &&
        Objects.equals(this.end, performanceResponseNavDataInner.end) &&
        Objects.equals(this.id, performanceResponseNavDataInner.id) &&
        Objects.equals(this.startNAV, performanceResponseNavDataInner.startNAV) &&
        Objects.equals(this.baseCurrency, performanceResponseNavDataInner.baseCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idType, navs, start, end, id, startNAV, baseCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceResponseNavDataInner {\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    navs: ").append(toIndentedString(navs)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startNAV: ").append(toIndentedString(startNAV)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idType");
    openapiFields.add("navs");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("id");
    openapiFields.add("startNAV");
    openapiFields.add("baseCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceResponseNavDataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceResponseNavDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceResponseNavDataInner is not found in the empty JSON string", PerformanceResponseNavDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceResponseNavDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceResponseNavDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idType") != null && !jsonObj.get("idType").isJsonNull()) && !jsonObj.get("idType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("navs") != null && !jsonObj.get("navs").isJsonNull() && !jsonObj.get("navs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `navs` to be an array in the JSON string but got `%s`", jsonObj.get("navs").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `startNAV`
      if (jsonObj.get("startNAV") != null && !jsonObj.get("startNAV").isJsonNull()) {
        PerformanceResponseNavDataInnerStartNAV.validateJsonElement(jsonObj.get("startNAV"));
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceResponseNavDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceResponseNavDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceResponseNavDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceResponseNavDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceResponseNavDataInner>() {
           @Override
           public void write(JsonWriter out, PerformanceResponseNavDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceResponseNavDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceResponseNavDataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceResponseNavDataInner
   * @throws IOException if the JSON string is invalid with respect to PerformanceResponseNavDataInner
   */
  public static PerformanceResponseNavDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceResponseNavDataInner.class);
  }

  /**
   * Convert an instance of PerformanceResponseNavDataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

