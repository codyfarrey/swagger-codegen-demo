/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IndividualApplicant;
import org.openapitools.client.model.JointApplicant;
import org.openapitools.client.model.OrganizationApplicant;
import org.openapitools.client.model.TrustApplicant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Customer {
  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private OrganizationApplicant organization;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER = "accountHolder";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER)
  @javax.annotation.Nullable
  private IndividualApplicant accountHolder;

  public static final String SERIALIZED_NAME_JOINT_HOLDERS = "jointHolders";
  @SerializedName(SERIALIZED_NAME_JOINT_HOLDERS)
  @javax.annotation.Nullable
  private JointApplicant jointHolders;

  public static final String SERIALIZED_NAME_TRUST = "trust";
  @SerializedName(SERIALIZED_NAME_TRUST)
  @javax.annotation.Nullable
  private TrustApplicant trust;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_TRANSFER_US_MICRO_CAP_STOCK = "transferUsMicroCapStock";
  @SerializedName(SERIALIZED_NAME_TRANSFER_US_MICRO_CAP_STOCK)
  @javax.annotation.Nullable
  private Boolean transferUsMicroCapStock;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INDIVIDUAL("INDIVIDUAL"),
    
    JOINT("JOINT"),
    
    TRUST("TRUST"),
    
    UGMA("UGMA"),
    
    UTMA("UTMA"),
    
    ORG("ORG"),
    
    IRA("IRA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  @javax.annotation.Nullable
  private String prefix;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nullable
  private String userName;

  public static final String SERIALIZED_NAME_USER_NAME_ALIAS = "userNameAlias";
  @SerializedName(SERIALIZED_NAME_USER_NAME_ALIAS)
  @javax.annotation.Nullable
  private String userNameAlias;

  public static final String SERIALIZED_NAME_USER_NAME_SOURCE = "userNameSource";
  @SerializedName(SERIALIZED_NAME_USER_NAME_SOURCE)
  @javax.annotation.Nullable
  private String userNameSource;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_MD_STATUS_NON_PRO = "mdStatusNonPro";
  @SerializedName(SERIALIZED_NAME_MD_STATUS_NON_PRO)
  @javax.annotation.Nullable
  private Boolean mdStatusNonPro;

  public static final String SERIALIZED_NAME_PREFERRED_PRIMARY_LANGUAGE = "preferredPrimaryLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_PRIMARY_LANGUAGE)
  @javax.annotation.Nullable
  private String preferredPrimaryLanguage;

  public static final String SERIALIZED_NAME_PREFERRED_SECONDARY_LANGUAGE = "preferredSecondaryLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_SECONDARY_LANGUAGE)
  @javax.annotation.Nullable
  private String preferredSecondaryLanguage;

  public static final String SERIALIZED_NAME_LEGAL_RESIDENCE_COUNTRY = "legalResidenceCountry";
  @SerializedName(SERIALIZED_NAME_LEGAL_RESIDENCE_COUNTRY)
  @javax.annotation.Nullable
  private String legalResidenceCountry;

  public static final String SERIALIZED_NAME_TAX_TREATY_COUNTRY = "taxTreatyCountry";
  @SerializedName(SERIALIZED_NAME_TAX_TREATY_COUNTRY)
  @javax.annotation.Nullable
  private String taxTreatyCountry;

  public static final String SERIALIZED_NAME_MEET_AML_STANDARD = "meetAmlStandard";
  @SerializedName(SERIALIZED_NAME_MEET_AML_STANDARD)
  @javax.annotation.Nullable
  private String meetAmlStandard;

  public static final String SERIALIZED_NAME_MEETS_AML_STANDARD = "meetsAmlStandard";
  @SerializedName(SERIALIZED_NAME_MEETS_AML_STANDARD)
  @javax.annotation.Nullable
  private String meetsAmlStandard;

  public static final String SERIALIZED_NAME_DIRECT_TRADING_ACCESS = "directTradingAccess";
  @SerializedName(SERIALIZED_NAME_DIRECT_TRADING_ACCESS)
  @javax.annotation.Nullable
  private Boolean directTradingAccess;

  public static final String SERIALIZED_NAME_ORIGIN_COUNTRY = "originCountry";
  @SerializedName(SERIALIZED_NAME_ORIGIN_COUNTRY)
  @javax.annotation.Nullable
  private String originCountry;

  public static final String SERIALIZED_NAME_TERMINATION_AGE = "terminationAge";
  @SerializedName(SERIALIZED_NAME_TERMINATION_AGE)
  @javax.annotation.Nullable
  private Integer terminationAge;

  public static final String SERIALIZED_NAME_GOVERNING_STATE = "governingState";
  @SerializedName(SERIALIZED_NAME_GOVERNING_STATE)
  @javax.annotation.Nullable
  private String governingState;

  public static final String SERIALIZED_NAME_OPT_FOR_DEBIT_CARD = "optForDebitCard";
  @SerializedName(SERIALIZED_NAME_OPT_FOR_DEBIT_CARD)
  @javax.annotation.Nullable
  private Boolean optForDebitCard;

  public static final String SERIALIZED_NAME_ROBO_FA_CLIENT = "roboFaClient";
  @SerializedName(SERIALIZED_NAME_ROBO_FA_CLIENT)
  @javax.annotation.Nullable
  private Boolean roboFaClient;

  public static final String SERIALIZED_NAME_INDEPENDENT_ACCOUNT = "independentAccount";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean independentAccount;

  public static final String SERIALIZED_NAME_PAPER_ACCOUNT = "paperAccount";
  @SerializedName(SERIALIZED_NAME_PAPER_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean paperAccount;

  public Customer() {
  }

  public Customer organization(@javax.annotation.Nullable OrganizationApplicant organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public OrganizationApplicant getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable OrganizationApplicant organization) {
    this.organization = organization;
  }


  public Customer accountHolder(@javax.annotation.Nullable IndividualApplicant accountHolder) {
    this.accountHolder = accountHolder;
    return this;
  }

  /**
   * Get accountHolder
   * @return accountHolder
   */
  @javax.annotation.Nullable
  public IndividualApplicant getAccountHolder() {
    return accountHolder;
  }

  public void setAccountHolder(@javax.annotation.Nullable IndividualApplicant accountHolder) {
    this.accountHolder = accountHolder;
  }


  public Customer jointHolders(@javax.annotation.Nullable JointApplicant jointHolders) {
    this.jointHolders = jointHolders;
    return this;
  }

  /**
   * Get jointHolders
   * @return jointHolders
   */
  @javax.annotation.Nullable
  public JointApplicant getJointHolders() {
    return jointHolders;
  }

  public void setJointHolders(@javax.annotation.Nullable JointApplicant jointHolders) {
    this.jointHolders = jointHolders;
  }


  public Customer trust(@javax.annotation.Nullable TrustApplicant trust) {
    this.trust = trust;
    return this;
  }

  /**
   * Get trust
   * @return trust
   */
  @javax.annotation.Nullable
  public TrustApplicant getTrust() {
    return trust;
  }

  public void setTrust(@javax.annotation.Nullable TrustApplicant trust) {
    this.trust = trust;
  }


  public Customer id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Customer externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public Customer transferUsMicroCapStock(@javax.annotation.Nullable Boolean transferUsMicroCapStock) {
    this.transferUsMicroCapStock = transferUsMicroCapStock;
    return this;
  }

  /**
   * Get transferUsMicroCapStock
   * @return transferUsMicroCapStock
   */
  @javax.annotation.Nullable
  public Boolean getTransferUsMicroCapStock() {
    return transferUsMicroCapStock;
  }

  public void setTransferUsMicroCapStock(@javax.annotation.Nullable Boolean transferUsMicroCapStock) {
    this.transferUsMicroCapStock = transferUsMicroCapStock;
  }


  public Customer type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public Customer prefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
  }


  public Customer userName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }


  public Customer userNameAlias(@javax.annotation.Nullable String userNameAlias) {
    this.userNameAlias = userNameAlias;
    return this;
  }

  /**
   * Get userNameAlias
   * @return userNameAlias
   */
  @javax.annotation.Nullable
  public String getUserNameAlias() {
    return userNameAlias;
  }

  public void setUserNameAlias(@javax.annotation.Nullable String userNameAlias) {
    this.userNameAlias = userNameAlias;
  }


  public Customer userNameSource(@javax.annotation.Nullable String userNameSource) {
    this.userNameSource = userNameSource;
    return this;
  }

  /**
   * Get userNameSource
   * @return userNameSource
   */
  @javax.annotation.Nullable
  public String getUserNameSource() {
    return userNameSource;
  }

  public void setUserNameSource(@javax.annotation.Nullable String userNameSource) {
    this.userNameSource = userNameSource;
  }


  public Customer email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public Customer mdStatusNonPro(@javax.annotation.Nullable Boolean mdStatusNonPro) {
    this.mdStatusNonPro = mdStatusNonPro;
    return this;
  }

  /**
   * Get mdStatusNonPro
   * @return mdStatusNonPro
   */
  @javax.annotation.Nullable
  public Boolean getMdStatusNonPro() {
    return mdStatusNonPro;
  }

  public void setMdStatusNonPro(@javax.annotation.Nullable Boolean mdStatusNonPro) {
    this.mdStatusNonPro = mdStatusNonPro;
  }


  public Customer preferredPrimaryLanguage(@javax.annotation.Nullable String preferredPrimaryLanguage) {
    this.preferredPrimaryLanguage = preferredPrimaryLanguage;
    return this;
  }

  /**
   * Get preferredPrimaryLanguage
   * @return preferredPrimaryLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredPrimaryLanguage() {
    return preferredPrimaryLanguage;
  }

  public void setPreferredPrimaryLanguage(@javax.annotation.Nullable String preferredPrimaryLanguage) {
    this.preferredPrimaryLanguage = preferredPrimaryLanguage;
  }


  public Customer preferredSecondaryLanguage(@javax.annotation.Nullable String preferredSecondaryLanguage) {
    this.preferredSecondaryLanguage = preferredSecondaryLanguage;
    return this;
  }

  /**
   * Get preferredSecondaryLanguage
   * @return preferredSecondaryLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredSecondaryLanguage() {
    return preferredSecondaryLanguage;
  }

  public void setPreferredSecondaryLanguage(@javax.annotation.Nullable String preferredSecondaryLanguage) {
    this.preferredSecondaryLanguage = preferredSecondaryLanguage;
  }


  public Customer legalResidenceCountry(@javax.annotation.Nullable String legalResidenceCountry) {
    this.legalResidenceCountry = legalResidenceCountry;
    return this;
  }

  /**
   * Get legalResidenceCountry
   * @return legalResidenceCountry
   */
  @javax.annotation.Nullable
  public String getLegalResidenceCountry() {
    return legalResidenceCountry;
  }

  public void setLegalResidenceCountry(@javax.annotation.Nullable String legalResidenceCountry) {
    this.legalResidenceCountry = legalResidenceCountry;
  }


  public Customer taxTreatyCountry(@javax.annotation.Nullable String taxTreatyCountry) {
    this.taxTreatyCountry = taxTreatyCountry;
    return this;
  }

  /**
   * Get taxTreatyCountry
   * @return taxTreatyCountry
   */
  @javax.annotation.Nullable
  public String getTaxTreatyCountry() {
    return taxTreatyCountry;
  }

  public void setTaxTreatyCountry(@javax.annotation.Nullable String taxTreatyCountry) {
    this.taxTreatyCountry = taxTreatyCountry;
  }


  public Customer meetAmlStandard(@javax.annotation.Nullable String meetAmlStandard) {
    this.meetAmlStandard = meetAmlStandard;
    return this;
  }

  /**
   * Get meetAmlStandard
   * @return meetAmlStandard
   */
  @javax.annotation.Nullable
  public String getMeetAmlStandard() {
    return meetAmlStandard;
  }

  public void setMeetAmlStandard(@javax.annotation.Nullable String meetAmlStandard) {
    this.meetAmlStandard = meetAmlStandard;
  }


  public Customer meetsAmlStandard(@javax.annotation.Nullable String meetsAmlStandard) {
    this.meetsAmlStandard = meetsAmlStandard;
    return this;
  }

  /**
   * Get meetsAmlStandard
   * @return meetsAmlStandard
   */
  @javax.annotation.Nullable
  public String getMeetsAmlStandard() {
    return meetsAmlStandard;
  }

  public void setMeetsAmlStandard(@javax.annotation.Nullable String meetsAmlStandard) {
    this.meetsAmlStandard = meetsAmlStandard;
  }


  public Customer directTradingAccess(@javax.annotation.Nullable Boolean directTradingAccess) {
    this.directTradingAccess = directTradingAccess;
    return this;
  }

  /**
   * Get directTradingAccess
   * @return directTradingAccess
   */
  @javax.annotation.Nullable
  public Boolean getDirectTradingAccess() {
    return directTradingAccess;
  }

  public void setDirectTradingAccess(@javax.annotation.Nullable Boolean directTradingAccess) {
    this.directTradingAccess = directTradingAccess;
  }


  public Customer originCountry(@javax.annotation.Nullable String originCountry) {
    this.originCountry = originCountry;
    return this;
  }

  /**
   * Get originCountry
   * @return originCountry
   */
  @javax.annotation.Nullable
  public String getOriginCountry() {
    return originCountry;
  }

  public void setOriginCountry(@javax.annotation.Nullable String originCountry) {
    this.originCountry = originCountry;
  }


  public Customer terminationAge(@javax.annotation.Nullable Integer terminationAge) {
    this.terminationAge = terminationAge;
    return this;
  }

  /**
   * Get terminationAge
   * @return terminationAge
   */
  @javax.annotation.Nullable
  public Integer getTerminationAge() {
    return terminationAge;
  }

  public void setTerminationAge(@javax.annotation.Nullable Integer terminationAge) {
    this.terminationAge = terminationAge;
  }


  public Customer governingState(@javax.annotation.Nullable String governingState) {
    this.governingState = governingState;
    return this;
  }

  /**
   * Get governingState
   * @return governingState
   */
  @javax.annotation.Nullable
  public String getGoverningState() {
    return governingState;
  }

  public void setGoverningState(@javax.annotation.Nullable String governingState) {
    this.governingState = governingState;
  }


  public Customer optForDebitCard(@javax.annotation.Nullable Boolean optForDebitCard) {
    this.optForDebitCard = optForDebitCard;
    return this;
  }

  /**
   * Get optForDebitCard
   * @return optForDebitCard
   */
  @javax.annotation.Nullable
  public Boolean getOptForDebitCard() {
    return optForDebitCard;
  }

  public void setOptForDebitCard(@javax.annotation.Nullable Boolean optForDebitCard) {
    this.optForDebitCard = optForDebitCard;
  }


  public Customer roboFaClient(@javax.annotation.Nullable Boolean roboFaClient) {
    this.roboFaClient = roboFaClient;
    return this;
  }

  /**
   * Get roboFaClient
   * @return roboFaClient
   */
  @javax.annotation.Nullable
  public Boolean getRoboFaClient() {
    return roboFaClient;
  }

  public void setRoboFaClient(@javax.annotation.Nullable Boolean roboFaClient) {
    this.roboFaClient = roboFaClient;
  }


  public Customer independentAccount(@javax.annotation.Nullable Boolean independentAccount) {
    this.independentAccount = independentAccount;
    return this;
  }

  /**
   * Get independentAccount
   * @return independentAccount
   */
  @javax.annotation.Nullable
  public Boolean getIndependentAccount() {
    return independentAccount;
  }

  public void setIndependentAccount(@javax.annotation.Nullable Boolean independentAccount) {
    this.independentAccount = independentAccount;
  }


  public Customer paperAccount(@javax.annotation.Nullable Boolean paperAccount) {
    this.paperAccount = paperAccount;
    return this;
  }

  /**
   * Get paperAccount
   * @return paperAccount
   */
  @javax.annotation.Nullable
  public Boolean getPaperAccount() {
    return paperAccount;
  }

  public void setPaperAccount(@javax.annotation.Nullable Boolean paperAccount) {
    this.paperAccount = paperAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.organization, customer.organization) &&
        Objects.equals(this.accountHolder, customer.accountHolder) &&
        Objects.equals(this.jointHolders, customer.jointHolders) &&
        Objects.equals(this.trust, customer.trust) &&
        Objects.equals(this.id, customer.id) &&
        Objects.equals(this.externalId, customer.externalId) &&
        Objects.equals(this.transferUsMicroCapStock, customer.transferUsMicroCapStock) &&
        Objects.equals(this.type, customer.type) &&
        Objects.equals(this.prefix, customer.prefix) &&
        Objects.equals(this.userName, customer.userName) &&
        Objects.equals(this.userNameAlias, customer.userNameAlias) &&
        Objects.equals(this.userNameSource, customer.userNameSource) &&
        Objects.equals(this.email, customer.email) &&
        Objects.equals(this.mdStatusNonPro, customer.mdStatusNonPro) &&
        Objects.equals(this.preferredPrimaryLanguage, customer.preferredPrimaryLanguage) &&
        Objects.equals(this.preferredSecondaryLanguage, customer.preferredSecondaryLanguage) &&
        Objects.equals(this.legalResidenceCountry, customer.legalResidenceCountry) &&
        Objects.equals(this.taxTreatyCountry, customer.taxTreatyCountry) &&
        Objects.equals(this.meetAmlStandard, customer.meetAmlStandard) &&
        Objects.equals(this.meetsAmlStandard, customer.meetsAmlStandard) &&
        Objects.equals(this.directTradingAccess, customer.directTradingAccess) &&
        Objects.equals(this.originCountry, customer.originCountry) &&
        Objects.equals(this.terminationAge, customer.terminationAge) &&
        Objects.equals(this.governingState, customer.governingState) &&
        Objects.equals(this.optForDebitCard, customer.optForDebitCard) &&
        Objects.equals(this.roboFaClient, customer.roboFaClient) &&
        Objects.equals(this.independentAccount, customer.independentAccount) &&
        Objects.equals(this.paperAccount, customer.paperAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organization, accountHolder, jointHolders, trust, id, externalId, transferUsMicroCapStock, type, prefix, userName, userNameAlias, userNameSource, email, mdStatusNonPro, preferredPrimaryLanguage, preferredSecondaryLanguage, legalResidenceCountry, taxTreatyCountry, meetAmlStandard, meetsAmlStandard, directTradingAccess, originCountry, terminationAge, governingState, optForDebitCard, roboFaClient, independentAccount, paperAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    accountHolder: ").append(toIndentedString(accountHolder)).append("\n");
    sb.append("    jointHolders: ").append(toIndentedString(jointHolders)).append("\n");
    sb.append("    trust: ").append(toIndentedString(trust)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    transferUsMicroCapStock: ").append(toIndentedString(transferUsMicroCapStock)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userNameAlias: ").append(toIndentedString(userNameAlias)).append("\n");
    sb.append("    userNameSource: ").append(toIndentedString(userNameSource)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mdStatusNonPro: ").append(toIndentedString(mdStatusNonPro)).append("\n");
    sb.append("    preferredPrimaryLanguage: ").append(toIndentedString(preferredPrimaryLanguage)).append("\n");
    sb.append("    preferredSecondaryLanguage: ").append(toIndentedString(preferredSecondaryLanguage)).append("\n");
    sb.append("    legalResidenceCountry: ").append(toIndentedString(legalResidenceCountry)).append("\n");
    sb.append("    taxTreatyCountry: ").append(toIndentedString(taxTreatyCountry)).append("\n");
    sb.append("    meetAmlStandard: ").append(toIndentedString(meetAmlStandard)).append("\n");
    sb.append("    meetsAmlStandard: ").append(toIndentedString(meetsAmlStandard)).append("\n");
    sb.append("    directTradingAccess: ").append(toIndentedString(directTradingAccess)).append("\n");
    sb.append("    originCountry: ").append(toIndentedString(originCountry)).append("\n");
    sb.append("    terminationAge: ").append(toIndentedString(terminationAge)).append("\n");
    sb.append("    governingState: ").append(toIndentedString(governingState)).append("\n");
    sb.append("    optForDebitCard: ").append(toIndentedString(optForDebitCard)).append("\n");
    sb.append("    roboFaClient: ").append(toIndentedString(roboFaClient)).append("\n");
    sb.append("    independentAccount: ").append(toIndentedString(independentAccount)).append("\n");
    sb.append("    paperAccount: ").append(toIndentedString(paperAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organization");
    openapiFields.add("accountHolder");
    openapiFields.add("jointHolders");
    openapiFields.add("trust");
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("transferUsMicroCapStock");
    openapiFields.add("type");
    openapiFields.add("prefix");
    openapiFields.add("userName");
    openapiFields.add("userNameAlias");
    openapiFields.add("userNameSource");
    openapiFields.add("email");
    openapiFields.add("mdStatusNonPro");
    openapiFields.add("preferredPrimaryLanguage");
    openapiFields.add("preferredSecondaryLanguage");
    openapiFields.add("legalResidenceCountry");
    openapiFields.add("taxTreatyCountry");
    openapiFields.add("meetAmlStandard");
    openapiFields.add("meetsAmlStandard");
    openapiFields.add("directTradingAccess");
    openapiFields.add("originCountry");
    openapiFields.add("terminationAge");
    openapiFields.add("governingState");
    openapiFields.add("optForDebitCard");
    openapiFields.add("roboFaClient");
    openapiFields.add("independentAccount");
    openapiFields.add("paperAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Customer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        OrganizationApplicant.validateJsonElement(jsonObj.get("organization"));
      }
      // validate the optional field `accountHolder`
      if (jsonObj.get("accountHolder") != null && !jsonObj.get("accountHolder").isJsonNull()) {
        IndividualApplicant.validateJsonElement(jsonObj.get("accountHolder"));
      }
      // validate the optional field `jointHolders`
      if (jsonObj.get("jointHolders") != null && !jsonObj.get("jointHolders").isJsonNull()) {
        JointApplicant.validateJsonElement(jsonObj.get("jointHolders"));
      }
      // validate the optional field `trust`
      if (jsonObj.get("trust") != null && !jsonObj.get("trust").isJsonNull()) {
        TrustApplicant.validateJsonElement(jsonObj.get("trust"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("userNameAlias") != null && !jsonObj.get("userNameAlias").isJsonNull()) && !jsonObj.get("userNameAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNameAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNameAlias").toString()));
      }
      if ((jsonObj.get("userNameSource") != null && !jsonObj.get("userNameSource").isJsonNull()) && !jsonObj.get("userNameSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNameSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNameSource").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("preferredPrimaryLanguage") != null && !jsonObj.get("preferredPrimaryLanguage").isJsonNull()) && !jsonObj.get("preferredPrimaryLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredPrimaryLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredPrimaryLanguage").toString()));
      }
      if ((jsonObj.get("preferredSecondaryLanguage") != null && !jsonObj.get("preferredSecondaryLanguage").isJsonNull()) && !jsonObj.get("preferredSecondaryLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredSecondaryLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredSecondaryLanguage").toString()));
      }
      if ((jsonObj.get("legalResidenceCountry") != null && !jsonObj.get("legalResidenceCountry").isJsonNull()) && !jsonObj.get("legalResidenceCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalResidenceCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalResidenceCountry").toString()));
      }
      if ((jsonObj.get("taxTreatyCountry") != null && !jsonObj.get("taxTreatyCountry").isJsonNull()) && !jsonObj.get("taxTreatyCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxTreatyCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxTreatyCountry").toString()));
      }
      if ((jsonObj.get("meetAmlStandard") != null && !jsonObj.get("meetAmlStandard").isJsonNull()) && !jsonObj.get("meetAmlStandard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetAmlStandard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetAmlStandard").toString()));
      }
      if ((jsonObj.get("meetsAmlStandard") != null && !jsonObj.get("meetsAmlStandard").isJsonNull()) && !jsonObj.get("meetsAmlStandard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetsAmlStandard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetsAmlStandard").toString()));
      }
      if ((jsonObj.get("originCountry") != null && !jsonObj.get("originCountry").isJsonNull()) && !jsonObj.get("originCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originCountry").toString()));
      }
      if ((jsonObj.get("governingState") != null && !jsonObj.get("governingState").isJsonNull()) && !jsonObj.get("governingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `governingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("governingState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Customer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Customer
   * @throws IOException if the JSON string is invalid with respect to Customer
   */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

  /**
   * Convert an instance of Customer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

