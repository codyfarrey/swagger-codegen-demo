/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TradingPermission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TradingPermission {
  /**
   * Gets or Sets assetClass
   */
  @JsonAdapter(AssetClassEnum.Adapter.class)
  public enum AssetClassEnum {
    BILL("BILL"),
    
    BOND("BOND"),
    
    CASH("CASH"),
    
    CFD("CFD"),
    
    COMB("COMB"),
    
    FOP("FOP"),
    
    FUND("FUND"),
    
    FUT("FUT"),
    
    OPT("OPT"),
    
    SSF("SSF"),
    
    STK("STK"),
    
    WAR("WAR"),
    
    MRGN("MRGN");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetClassEnum fromValue(String value) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  @javax.annotation.Nullable
  private AssetClassEnum assetClass;

  public static final String SERIALIZED_NAME_EXCHANGE_GROUP = "exchangeGroup";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_GROUP)
  @javax.annotation.Nullable
  private String exchangeGroup;

  /**
   * Gets or Sets country
   */
  @JsonAdapter(CountryEnum.Adapter.class)
  public enum CountryEnum {
    ALL("ALL"),
    
    AUSTRALIA("AUSTRALIA"),
    
    AUSTRIA("AUSTRIA"),
    
    BELGIUM("BELGIUM"),
    
    CANADA("CANADA"),
    
    FRANCE("FRANCE"),
    
    GERMANY("GERMANY"),
    
    HONG_KONG("HONG KONG"),
    
    ITALY("ITALY"),
    
    JAPAN("JAPAN"),
    
    KOREA("KOREA"),
    
    MEXICO("MEXICO"),
    
    NORWAY("NORWAY"),
    
    SINGAPORE("SINGAPORE"),
    
    SPAIN("SPAIN"),
    
    SWEDEN("SWEDEN"),
    
    SWITZERLAND("SWITZERLAND"),
    
    THE_NETHERLANDS("THE NETHERLANDS"),
    
    UNITED_KINGDOM("UNITED KINGDOM"),
    
    UNITED_STATES("UNITED STATES"),
    
    HK_CHINA("HK-CHINA");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private CountryEnum country;

  /**
   * Gets or Sets product
   */
  @JsonAdapter(ProductEnum.Adapter.class)
  public enum ProductEnum {
    BONDS("BONDS"),
    
    FUTURES("FUTURES"),
    
    FOREX("FOREX"),
    
    FUTURES_OPTIONS("FUTURES OPTIONS"),
    
    MUTUAL_FUNDS("MUTUAL FUNDS"),
    
    STOCKS("STOCKS"),
    
    SINGLE_STOCK_FUTURES("SINGLE STOCK FUTURES"),
    
    OPTIONS("OPTIONS"),
    
    STOCK_OPTIONS("STOCK OPTIONS"),
    
    WARRANTS("WARRANTS");

    private String value;

    ProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductEnum fromValue(String value) {
      for (ProductEnum b : ProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  @javax.annotation.Nullable
  private ProductEnum product;

  public TradingPermission() {
  }

  public TradingPermission assetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
    return this;
  }

  /**
   * Get assetClass
   * @return assetClass
   */
  @javax.annotation.Nullable
  public AssetClassEnum getAssetClass() {
    return assetClass;
  }

  public void setAssetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
  }


  public TradingPermission exchangeGroup(@javax.annotation.Nullable String exchangeGroup) {
    this.exchangeGroup = exchangeGroup;
    return this;
  }

  /**
   * Get exchangeGroup
   * @return exchangeGroup
   */
  @javax.annotation.Nullable
  public String getExchangeGroup() {
    return exchangeGroup;
  }

  public void setExchangeGroup(@javax.annotation.Nullable String exchangeGroup) {
    this.exchangeGroup = exchangeGroup;
  }


  public TradingPermission country(@javax.annotation.Nullable CountryEnum country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public CountryEnum getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable CountryEnum country) {
    this.country = country;
  }


  public TradingPermission product(@javax.annotation.Nullable ProductEnum product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public ProductEnum getProduct() {
    return product;
  }

  public void setProduct(@javax.annotation.Nullable ProductEnum product) {
    this.product = product;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradingPermission tradingPermission = (TradingPermission) o;
    return Objects.equals(this.assetClass, tradingPermission.assetClass) &&
        Objects.equals(this.exchangeGroup, tradingPermission.exchangeGroup) &&
        Objects.equals(this.country, tradingPermission.country) &&
        Objects.equals(this.product, tradingPermission.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetClass, exchangeGroup, country, product);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradingPermission {\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    exchangeGroup: ").append(toIndentedString(exchangeGroup)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetClass");
    openapiFields.add("exchangeGroup");
    openapiFields.add("country");
    openapiFields.add("product");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradingPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradingPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradingPermission is not found in the empty JSON string", TradingPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradingPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradingPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      // validate the optional field `assetClass`
      if (jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) {
        AssetClassEnum.validateJsonElement(jsonObj.get("assetClass"));
      }
      if ((jsonObj.get("exchangeGroup") != null && !jsonObj.get("exchangeGroup").isJsonNull()) && !jsonObj.get("exchangeGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeGroup").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        CountryEnum.validateJsonElement(jsonObj.get("country"));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        ProductEnum.validateJsonElement(jsonObj.get("product"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradingPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradingPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradingPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradingPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<TradingPermission>() {
           @Override
           public void write(JsonWriter out, TradingPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradingPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradingPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradingPermission
   * @throws IOException if the JSON string is invalid with respect to TradingPermission
   */
  public static TradingPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradingPermission.class);
  }

  /**
   * Convert an instance of TradingPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

