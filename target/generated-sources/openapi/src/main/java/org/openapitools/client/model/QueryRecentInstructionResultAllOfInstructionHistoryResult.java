/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryRecentInstructionResultAllOfInstructionHistoryResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class QueryRecentInstructionResultAllOfInstructionHistoryResult {
  public static final String SERIALIZED_NAME_CLIENT_INSTRUCTION_ID = "clientInstructionId";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal clientInstructionId;

  public static final String SERIALIZED_NAME_IB_INSTRUCTION_ID = "ibInstructionId";
  @SerializedName(SERIALIZED_NAME_IB_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal ibInstructionId;

  public static final String SERIALIZED_NAME_INSTRUCTION_TYPE = "instructionType";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_TYPE)
  @javax.annotation.Nonnull
  private String instructionType;

  public static final String SERIALIZED_NAME_REQUEST_DATE = "requestDate";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE)
  @javax.annotation.Nonnull
  private String requestDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private String status;

  public static final String SERIALIZED_NAME_INSTRUCTION_SET_ID = "instructionSetId";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_SET_ID)
  @javax.annotation.Nonnull
  private BigDecimal instructionSetId;

  public QueryRecentInstructionResultAllOfInstructionHistoryResult() {
  }

  public QueryRecentInstructionResultAllOfInstructionHistoryResult clientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
    return this;
  }

  /**
   * Get clientInstructionId
   * @return clientInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getClientInstructionId() {
    return clientInstructionId;
  }

  public void setClientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
  }


  public QueryRecentInstructionResultAllOfInstructionHistoryResult ibInstructionId(@javax.annotation.Nonnull BigDecimal ibInstructionId) {
    this.ibInstructionId = ibInstructionId;
    return this;
  }

  /**
   * Get ibInstructionId
   * @return ibInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getIbInstructionId() {
    return ibInstructionId;
  }

  public void setIbInstructionId(@javax.annotation.Nonnull BigDecimal ibInstructionId) {
    this.ibInstructionId = ibInstructionId;
  }


  public QueryRecentInstructionResultAllOfInstructionHistoryResult instructionType(@javax.annotation.Nonnull String instructionType) {
    this.instructionType = instructionType;
    return this;
  }

  /**
   * Get instructionType
   * @return instructionType
   */
  @javax.annotation.Nonnull
  public String getInstructionType() {
    return instructionType;
  }

  public void setInstructionType(@javax.annotation.Nonnull String instructionType) {
    this.instructionType = instructionType;
  }


  public QueryRecentInstructionResultAllOfInstructionHistoryResult requestDate(@javax.annotation.Nonnull String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  /**
   * Get requestDate
   * @return requestDate
   */
  @javax.annotation.Nonnull
  public String getRequestDate() {
    return requestDate;
  }

  public void setRequestDate(@javax.annotation.Nonnull String requestDate) {
    this.requestDate = requestDate;
  }


  public QueryRecentInstructionResultAllOfInstructionHistoryResult status(@javax.annotation.Nonnull String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull String status) {
    this.status = status;
  }


  public QueryRecentInstructionResultAllOfInstructionHistoryResult instructionSetId(@javax.annotation.Nonnull BigDecimal instructionSetId) {
    this.instructionSetId = instructionSetId;
    return this;
  }

  /**
   * Get instructionSetId
   * @return instructionSetId
   */
  @javax.annotation.Nonnull
  public BigDecimal getInstructionSetId() {
    return instructionSetId;
  }

  public void setInstructionSetId(@javax.annotation.Nonnull BigDecimal instructionSetId) {
    this.instructionSetId = instructionSetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRecentInstructionResultAllOfInstructionHistoryResult queryRecentInstructionResultAllOfInstructionHistoryResult = (QueryRecentInstructionResultAllOfInstructionHistoryResult) o;
    return Objects.equals(this.clientInstructionId, queryRecentInstructionResultAllOfInstructionHistoryResult.clientInstructionId) &&
        Objects.equals(this.ibInstructionId, queryRecentInstructionResultAllOfInstructionHistoryResult.ibInstructionId) &&
        Objects.equals(this.instructionType, queryRecentInstructionResultAllOfInstructionHistoryResult.instructionType) &&
        Objects.equals(this.requestDate, queryRecentInstructionResultAllOfInstructionHistoryResult.requestDate) &&
        Objects.equals(this.status, queryRecentInstructionResultAllOfInstructionHistoryResult.status) &&
        Objects.equals(this.instructionSetId, queryRecentInstructionResultAllOfInstructionHistoryResult.instructionSetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInstructionId, ibInstructionId, instructionType, requestDate, status, instructionSetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRecentInstructionResultAllOfInstructionHistoryResult {\n");
    sb.append("    clientInstructionId: ").append(toIndentedString(clientInstructionId)).append("\n");
    sb.append("    ibInstructionId: ").append(toIndentedString(ibInstructionId)).append("\n");
    sb.append("    instructionType: ").append(toIndentedString(instructionType)).append("\n");
    sb.append("    requestDate: ").append(toIndentedString(requestDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    instructionSetId: ").append(toIndentedString(instructionSetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInstructionId");
    openapiFields.add("ibInstructionId");
    openapiFields.add("instructionType");
    openapiFields.add("requestDate");
    openapiFields.add("status");
    openapiFields.add("instructionSetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientInstructionId");
    openapiRequiredFields.add("ibInstructionId");
    openapiRequiredFields.add("instructionType");
    openapiRequiredFields.add("requestDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("instructionSetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRecentInstructionResultAllOfInstructionHistoryResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRecentInstructionResultAllOfInstructionHistoryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRecentInstructionResultAllOfInstructionHistoryResult is not found in the empty JSON string", QueryRecentInstructionResultAllOfInstructionHistoryResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRecentInstructionResultAllOfInstructionHistoryResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRecentInstructionResultAllOfInstructionHistoryResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryRecentInstructionResultAllOfInstructionHistoryResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("instructionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionType").toString()));
      }
      if (!jsonObj.get("requestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestDate").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRecentInstructionResultAllOfInstructionHistoryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRecentInstructionResultAllOfInstructionHistoryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRecentInstructionResultAllOfInstructionHistoryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRecentInstructionResultAllOfInstructionHistoryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRecentInstructionResultAllOfInstructionHistoryResult>() {
           @Override
           public void write(JsonWriter out, QueryRecentInstructionResultAllOfInstructionHistoryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRecentInstructionResultAllOfInstructionHistoryResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRecentInstructionResultAllOfInstructionHistoryResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRecentInstructionResultAllOfInstructionHistoryResult
   * @throws IOException if the JSON string is invalid with respect to QueryRecentInstructionResultAllOfInstructionHistoryResult
   */
  public static QueryRecentInstructionResultAllOfInstructionHistoryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRecentInstructionResultAllOfInstructionHistoryResult.class);
  }

  /**
   * Convert an instance of QueryRecentInstructionResultAllOfInstructionHistoryResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

