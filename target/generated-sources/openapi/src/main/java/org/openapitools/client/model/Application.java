/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AddAdditionalAccount;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Application {
  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  @javax.annotation.Nullable
  private Customer customer;

  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  @javax.annotation.Nullable
  private List<Account> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  @javax.annotation.Nullable
  private List<User> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nullable
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_ACCOUNTS = "additionalAccounts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ACCOUNTS)
  @javax.annotation.Nullable
  private List<AddAdditionalAccount> additionalAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASTER_ACCOUNT_ID = "masterAccountId";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String masterAccountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  /**
   * Gets or Sets inputLanguage
   */
  @JsonAdapter(InputLanguageEnum.Adapter.class)
  public enum InputLanguageEnum {
    EN("en"),
    
    ZH_HANS("zh-Hans"),
    
    JA("ja"),
    
    RU("ru"),
    
    FR("fr"),
    
    PT("pt"),
    
    ES("es"),
    
    IT("it"),
    
    AR_AE("ar-AE"),
    
    DE("de"),
    
    HE_IL("he-IL"),
    
    HU("hu");

    private String value;

    InputLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InputLanguageEnum fromValue(String value) {
      for (InputLanguageEnum b : InputLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InputLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InputLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InputLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InputLanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InputLanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INPUT_LANGUAGE = "inputLanguage";
  @SerializedName(SERIALIZED_NAME_INPUT_LANGUAGE)
  @javax.annotation.Nullable
  private InputLanguageEnum inputLanguage;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  @javax.annotation.Nullable
  private Boolean translation;

  public static final String SERIALIZED_NAME_PAPER_ACCOUNT = "paperAccount";
  @SerializedName(SERIALIZED_NAME_PAPER_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean paperAccount;

  public Application() {
  }

  public Application customer(@javax.annotation.Nullable Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(@javax.annotation.Nullable Customer customer) {
    this.customer = customer;
  }


  public Application accounts(@javax.annotation.Nullable List<Account> accounts) {
    this.accounts = accounts;
    return this;
  }

  public Application addAccountsItem(Account accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * Get accounts
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<Account> getAccounts() {
    return accounts;
  }

  public void setAccounts(@javax.annotation.Nullable List<Account> accounts) {
    this.accounts = accounts;
  }


  public Application users(@javax.annotation.Nullable List<User> users) {
    this.users = users;
    return this;
  }

  public Application addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<User> getUsers() {
    return users;
  }

  public void setUsers(@javax.annotation.Nullable List<User> users) {
    this.users = users;
  }


  public Application documents(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
    return this;
  }

  public Application addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<Document> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
  }


  public Application additionalAccounts(@javax.annotation.Nullable List<AddAdditionalAccount> additionalAccounts) {
    this.additionalAccounts = additionalAccounts;
    return this;
  }

  public Application addAdditionalAccountsItem(AddAdditionalAccount additionalAccountsItem) {
    if (this.additionalAccounts == null) {
      this.additionalAccounts = new ArrayList<>();
    }
    this.additionalAccounts.add(additionalAccountsItem);
    return this;
  }

  /**
   * Get additionalAccounts
   * @return additionalAccounts
   */
  @javax.annotation.Nullable
  public List<AddAdditionalAccount> getAdditionalAccounts() {
    return additionalAccounts;
  }

  public void setAdditionalAccounts(@javax.annotation.Nullable List<AddAdditionalAccount> additionalAccounts) {
    this.additionalAccounts = additionalAccounts;
  }


  public Application masterAccountId(@javax.annotation.Nullable String masterAccountId) {
    this.masterAccountId = masterAccountId;
    return this;
  }

  /**
   * Get masterAccountId
   * @return masterAccountId
   */
  @javax.annotation.Nullable
  public String getMasterAccountId() {
    return masterAccountId;
  }

  public void setMasterAccountId(@javax.annotation.Nullable String masterAccountId) {
    this.masterAccountId = masterAccountId;
  }


  public Application id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Application inputLanguage(@javax.annotation.Nullable InputLanguageEnum inputLanguage) {
    this.inputLanguage = inputLanguage;
    return this;
  }

  /**
   * Get inputLanguage
   * @return inputLanguage
   */
  @javax.annotation.Nullable
  public InputLanguageEnum getInputLanguage() {
    return inputLanguage;
  }

  public void setInputLanguage(@javax.annotation.Nullable InputLanguageEnum inputLanguage) {
    this.inputLanguage = inputLanguage;
  }


  public Application translation(@javax.annotation.Nullable Boolean translation) {
    this.translation = translation;
    return this;
  }

  /**
   * Get translation
   * @return translation
   */
  @javax.annotation.Nullable
  public Boolean getTranslation() {
    return translation;
  }

  public void setTranslation(@javax.annotation.Nullable Boolean translation) {
    this.translation = translation;
  }


  public Application paperAccount(@javax.annotation.Nullable Boolean paperAccount) {
    this.paperAccount = paperAccount;
    return this;
  }

  /**
   * Get paperAccount
   * @return paperAccount
   */
  @javax.annotation.Nullable
  public Boolean getPaperAccount() {
    return paperAccount;
  }

  public void setPaperAccount(@javax.annotation.Nullable Boolean paperAccount) {
    this.paperAccount = paperAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.customer, application.customer) &&
        Objects.equals(this.accounts, application.accounts) &&
        Objects.equals(this.users, application.users) &&
        Objects.equals(this.documents, application.documents) &&
        Objects.equals(this.additionalAccounts, application.additionalAccounts) &&
        Objects.equals(this.masterAccountId, application.masterAccountId) &&
        Objects.equals(this.id, application.id) &&
        Objects.equals(this.inputLanguage, application.inputLanguage) &&
        Objects.equals(this.translation, application.translation) &&
        Objects.equals(this.paperAccount, application.paperAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, accounts, users, documents, additionalAccounts, masterAccountId, id, inputLanguage, translation, paperAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    additionalAccounts: ").append(toIndentedString(additionalAccounts)).append("\n");
    sb.append("    masterAccountId: ").append(toIndentedString(masterAccountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputLanguage: ").append(toIndentedString(inputLanguage)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("    paperAccount: ").append(toIndentedString(paperAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer");
    openapiFields.add("accounts");
    openapiFields.add("users");
    openapiFields.add("documents");
    openapiFields.add("additionalAccounts");
    openapiFields.add("masterAccountId");
    openapiFields.add("id");
    openapiFields.add("inputLanguage");
    openapiFields.add("translation");
    openapiFields.add("paperAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Application
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Application.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Application` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonElement(jsonObj.get("customer"));
      }
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            Account.validateJsonElement(jsonArrayaccounts.get(i));
          };
        }
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            User.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            Document.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if (jsonObj.get("additionalAccounts") != null && !jsonObj.get("additionalAccounts").isJsonNull()) {
        JsonArray jsonArrayadditionalAccounts = jsonObj.getAsJsonArray("additionalAccounts");
        if (jsonArrayadditionalAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("additionalAccounts").toString()));
          }

          // validate the optional field `additionalAccounts` (array)
          for (int i = 0; i < jsonArrayadditionalAccounts.size(); i++) {
            AddAdditionalAccount.validateJsonElement(jsonArrayadditionalAccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("masterAccountId") != null && !jsonObj.get("masterAccountId").isJsonNull()) && !jsonObj.get("masterAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterAccountId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("inputLanguage") != null && !jsonObj.get("inputLanguage").isJsonNull()) && !jsonObj.get("inputLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputLanguage").toString()));
      }
      // validate the optional field `inputLanguage`
      if (jsonObj.get("inputLanguage") != null && !jsonObj.get("inputLanguage").isJsonNull()) {
        InputLanguageEnum.validateJsonElement(jsonObj.get("inputLanguage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Application given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Application
   * @throws IOException if the JSON string is invalid with respect to Application
   */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

  /**
   * Convert an instance of Application to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

