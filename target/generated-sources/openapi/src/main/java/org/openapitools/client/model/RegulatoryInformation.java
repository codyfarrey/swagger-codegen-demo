/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AUSExposureDetailsType;
import org.openapitools.client.model.AffiliationDetailsType;
import org.openapitools.client.model.ORGRegulatoryInfoType;
import org.openapitools.client.model.PoliticalMilitaryDiplomaticDetailsType;
import org.openapitools.client.model.RegulatoryDetail;
import org.openapitools.client.model.SelfRegulatedMembershipType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegulatoryInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class RegulatoryInformation {
  public static final String SERIALIZED_NAME_REGULATORY_DETAILS = "regulatoryDetails";
  @SerializedName(SERIALIZED_NAME_REGULATORY_DETAILS)
  @javax.annotation.Nullable
  private List<RegulatoryDetail> regulatoryDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGULATORY_DETAIL = "regulatoryDetail";
  @SerializedName(SERIALIZED_NAME_REGULATORY_DETAIL)
  @javax.annotation.Nullable
  private List<RegulatoryDetail> regulatoryDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELF_REGULATED_MEMBERSHIP = "selfRegulatedMembership";
  @SerializedName(SERIALIZED_NAME_SELF_REGULATED_MEMBERSHIP)
  @javax.annotation.Nullable
  private SelfRegulatedMembershipType selfRegulatedMembership;

  public static final String SERIALIZED_NAME_AFFILIATION_DETAILS = "affiliationDetails";
  @SerializedName(SERIALIZED_NAME_AFFILIATION_DETAILS)
  @javax.annotation.Nullable
  private AffiliationDetailsType affiliationDetails;

  public static final String SERIALIZED_NAME_FINANCIAL_ORG_TYPES = "financialOrgTypes";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_ORG_TYPES)
  @javax.annotation.Nullable
  private List<String> financialOrgTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_REGULATORY_INFO = "orgRegulatoryInfo";
  @SerializedName(SERIALIZED_NAME_ORG_REGULATORY_INFO)
  @javax.annotation.Nullable
  private ORGRegulatoryInfoType orgRegulatoryInfo;

  public static final String SERIALIZED_NAME_AUS_EXPOSURE_DETAILS = "ausExposureDetails";
  @SerializedName(SERIALIZED_NAME_AUS_EXPOSURE_DETAILS)
  @javax.annotation.Nullable
  private AUSExposureDetailsType ausExposureDetails;

  public static final String SERIALIZED_NAME_CONTROLLER_EXCHANGE_CODE = "controllerExchangeCode";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_EXCHANGE_CODE)
  @javax.annotation.Nullable
  private String controllerExchangeCode;

  public static final String SERIALIZED_NAME_POLITICAL_MILITARY_DIPLOMATIC_DETAILS = "politicalMilitaryDiplomaticDetails";
  @SerializedName(SERIALIZED_NAME_POLITICAL_MILITARY_DIPLOMATIC_DETAILS)
  @javax.annotation.Nullable
  private PoliticalMilitaryDiplomaticDetailsType politicalMilitaryDiplomaticDetails;

  public static final String SERIALIZED_NAME_TRANSLATED = "translated";
  @SerializedName(SERIALIZED_NAME_TRANSLATED)
  @javax.annotation.Nullable
  private Boolean translated;

  public RegulatoryInformation() {
  }

  public RegulatoryInformation regulatoryDetails(@javax.annotation.Nullable List<RegulatoryDetail> regulatoryDetails) {
    this.regulatoryDetails = regulatoryDetails;
    return this;
  }

  public RegulatoryInformation addRegulatoryDetailsItem(RegulatoryDetail regulatoryDetailsItem) {
    if (this.regulatoryDetails == null) {
      this.regulatoryDetails = new ArrayList<>();
    }
    this.regulatoryDetails.add(regulatoryDetailsItem);
    return this;
  }

  /**
   * Get regulatoryDetails
   * @return regulatoryDetails
   */
  @javax.annotation.Nullable
  public List<RegulatoryDetail> getRegulatoryDetails() {
    return regulatoryDetails;
  }

  public void setRegulatoryDetails(@javax.annotation.Nullable List<RegulatoryDetail> regulatoryDetails) {
    this.regulatoryDetails = regulatoryDetails;
  }


  public RegulatoryInformation regulatoryDetail(@javax.annotation.Nullable List<RegulatoryDetail> regulatoryDetail) {
    this.regulatoryDetail = regulatoryDetail;
    return this;
  }

  public RegulatoryInformation addRegulatoryDetailItem(RegulatoryDetail regulatoryDetailItem) {
    if (this.regulatoryDetail == null) {
      this.regulatoryDetail = new ArrayList<>();
    }
    this.regulatoryDetail.add(regulatoryDetailItem);
    return this;
  }

  /**
   * Get regulatoryDetail
   * @return regulatoryDetail
   */
  @javax.annotation.Nullable
  public List<RegulatoryDetail> getRegulatoryDetail() {
    return regulatoryDetail;
  }

  public void setRegulatoryDetail(@javax.annotation.Nullable List<RegulatoryDetail> regulatoryDetail) {
    this.regulatoryDetail = regulatoryDetail;
  }


  public RegulatoryInformation selfRegulatedMembership(@javax.annotation.Nullable SelfRegulatedMembershipType selfRegulatedMembership) {
    this.selfRegulatedMembership = selfRegulatedMembership;
    return this;
  }

  /**
   * Get selfRegulatedMembership
   * @return selfRegulatedMembership
   */
  @javax.annotation.Nullable
  public SelfRegulatedMembershipType getSelfRegulatedMembership() {
    return selfRegulatedMembership;
  }

  public void setSelfRegulatedMembership(@javax.annotation.Nullable SelfRegulatedMembershipType selfRegulatedMembership) {
    this.selfRegulatedMembership = selfRegulatedMembership;
  }


  public RegulatoryInformation affiliationDetails(@javax.annotation.Nullable AffiliationDetailsType affiliationDetails) {
    this.affiliationDetails = affiliationDetails;
    return this;
  }

  /**
   * Get affiliationDetails
   * @return affiliationDetails
   */
  @javax.annotation.Nullable
  public AffiliationDetailsType getAffiliationDetails() {
    return affiliationDetails;
  }

  public void setAffiliationDetails(@javax.annotation.Nullable AffiliationDetailsType affiliationDetails) {
    this.affiliationDetails = affiliationDetails;
  }


  public RegulatoryInformation financialOrgTypes(@javax.annotation.Nullable List<String> financialOrgTypes) {
    this.financialOrgTypes = financialOrgTypes;
    return this;
  }

  public RegulatoryInformation addFinancialOrgTypesItem(String financialOrgTypesItem) {
    if (this.financialOrgTypes == null) {
      this.financialOrgTypes = new ArrayList<>();
    }
    this.financialOrgTypes.add(financialOrgTypesItem);
    return this;
  }

  /**
   * Get financialOrgTypes
   * @return financialOrgTypes
   */
  @javax.annotation.Nullable
  public List<String> getFinancialOrgTypes() {
    return financialOrgTypes;
  }

  public void setFinancialOrgTypes(@javax.annotation.Nullable List<String> financialOrgTypes) {
    this.financialOrgTypes = financialOrgTypes;
  }


  public RegulatoryInformation orgRegulatoryInfo(@javax.annotation.Nullable ORGRegulatoryInfoType orgRegulatoryInfo) {
    this.orgRegulatoryInfo = orgRegulatoryInfo;
    return this;
  }

  /**
   * Get orgRegulatoryInfo
   * @return orgRegulatoryInfo
   */
  @javax.annotation.Nullable
  public ORGRegulatoryInfoType getOrgRegulatoryInfo() {
    return orgRegulatoryInfo;
  }

  public void setOrgRegulatoryInfo(@javax.annotation.Nullable ORGRegulatoryInfoType orgRegulatoryInfo) {
    this.orgRegulatoryInfo = orgRegulatoryInfo;
  }


  public RegulatoryInformation ausExposureDetails(@javax.annotation.Nullable AUSExposureDetailsType ausExposureDetails) {
    this.ausExposureDetails = ausExposureDetails;
    return this;
  }

  /**
   * Get ausExposureDetails
   * @return ausExposureDetails
   */
  @javax.annotation.Nullable
  public AUSExposureDetailsType getAusExposureDetails() {
    return ausExposureDetails;
  }

  public void setAusExposureDetails(@javax.annotation.Nullable AUSExposureDetailsType ausExposureDetails) {
    this.ausExposureDetails = ausExposureDetails;
  }


  public RegulatoryInformation controllerExchangeCode(@javax.annotation.Nullable String controllerExchangeCode) {
    this.controllerExchangeCode = controllerExchangeCode;
    return this;
  }

  /**
   * Get controllerExchangeCode
   * @return controllerExchangeCode
   */
  @javax.annotation.Nullable
  public String getControllerExchangeCode() {
    return controllerExchangeCode;
  }

  public void setControllerExchangeCode(@javax.annotation.Nullable String controllerExchangeCode) {
    this.controllerExchangeCode = controllerExchangeCode;
  }


  public RegulatoryInformation politicalMilitaryDiplomaticDetails(@javax.annotation.Nullable PoliticalMilitaryDiplomaticDetailsType politicalMilitaryDiplomaticDetails) {
    this.politicalMilitaryDiplomaticDetails = politicalMilitaryDiplomaticDetails;
    return this;
  }

  /**
   * Get politicalMilitaryDiplomaticDetails
   * @return politicalMilitaryDiplomaticDetails
   */
  @javax.annotation.Nullable
  public PoliticalMilitaryDiplomaticDetailsType getPoliticalMilitaryDiplomaticDetails() {
    return politicalMilitaryDiplomaticDetails;
  }

  public void setPoliticalMilitaryDiplomaticDetails(@javax.annotation.Nullable PoliticalMilitaryDiplomaticDetailsType politicalMilitaryDiplomaticDetails) {
    this.politicalMilitaryDiplomaticDetails = politicalMilitaryDiplomaticDetails;
  }


  public RegulatoryInformation translated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
    return this;
  }

  /**
   * Get translated
   * @return translated
   */
  @javax.annotation.Nullable
  public Boolean getTranslated() {
    return translated;
  }

  public void setTranslated(@javax.annotation.Nullable Boolean translated) {
    this.translated = translated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulatoryInformation regulatoryInformation = (RegulatoryInformation) o;
    return Objects.equals(this.regulatoryDetails, regulatoryInformation.regulatoryDetails) &&
        Objects.equals(this.regulatoryDetail, regulatoryInformation.regulatoryDetail) &&
        Objects.equals(this.selfRegulatedMembership, regulatoryInformation.selfRegulatedMembership) &&
        Objects.equals(this.affiliationDetails, regulatoryInformation.affiliationDetails) &&
        Objects.equals(this.financialOrgTypes, regulatoryInformation.financialOrgTypes) &&
        Objects.equals(this.orgRegulatoryInfo, regulatoryInformation.orgRegulatoryInfo) &&
        Objects.equals(this.ausExposureDetails, regulatoryInformation.ausExposureDetails) &&
        Objects.equals(this.controllerExchangeCode, regulatoryInformation.controllerExchangeCode) &&
        Objects.equals(this.politicalMilitaryDiplomaticDetails, regulatoryInformation.politicalMilitaryDiplomaticDetails) &&
        Objects.equals(this.translated, regulatoryInformation.translated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regulatoryDetails, regulatoryDetail, selfRegulatedMembership, affiliationDetails, financialOrgTypes, orgRegulatoryInfo, ausExposureDetails, controllerExchangeCode, politicalMilitaryDiplomaticDetails, translated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulatoryInformation {\n");
    sb.append("    regulatoryDetails: ").append(toIndentedString(regulatoryDetails)).append("\n");
    sb.append("    regulatoryDetail: ").append(toIndentedString(regulatoryDetail)).append("\n");
    sb.append("    selfRegulatedMembership: ").append(toIndentedString(selfRegulatedMembership)).append("\n");
    sb.append("    affiliationDetails: ").append(toIndentedString(affiliationDetails)).append("\n");
    sb.append("    financialOrgTypes: ").append(toIndentedString(financialOrgTypes)).append("\n");
    sb.append("    orgRegulatoryInfo: ").append(toIndentedString(orgRegulatoryInfo)).append("\n");
    sb.append("    ausExposureDetails: ").append(toIndentedString(ausExposureDetails)).append("\n");
    sb.append("    controllerExchangeCode: ").append(toIndentedString(controllerExchangeCode)).append("\n");
    sb.append("    politicalMilitaryDiplomaticDetails: ").append(toIndentedString(politicalMilitaryDiplomaticDetails)).append("\n");
    sb.append("    translated: ").append(toIndentedString(translated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("regulatoryDetails");
    openapiFields.add("regulatoryDetail");
    openapiFields.add("selfRegulatedMembership");
    openapiFields.add("affiliationDetails");
    openapiFields.add("financialOrgTypes");
    openapiFields.add("orgRegulatoryInfo");
    openapiFields.add("ausExposureDetails");
    openapiFields.add("controllerExchangeCode");
    openapiFields.add("politicalMilitaryDiplomaticDetails");
    openapiFields.add("translated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegulatoryInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegulatoryInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegulatoryInformation is not found in the empty JSON string", RegulatoryInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegulatoryInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegulatoryInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("regulatoryDetails") != null && !jsonObj.get("regulatoryDetails").isJsonNull()) {
        JsonArray jsonArrayregulatoryDetails = jsonObj.getAsJsonArray("regulatoryDetails");
        if (jsonArrayregulatoryDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatoryDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatoryDetails` to be an array in the JSON string but got `%s`", jsonObj.get("regulatoryDetails").toString()));
          }

          // validate the optional field `regulatoryDetails` (array)
          for (int i = 0; i < jsonArrayregulatoryDetails.size(); i++) {
            RegulatoryDetail.validateJsonElement(jsonArrayregulatoryDetails.get(i));
          };
        }
      }
      if (jsonObj.get("regulatoryDetail") != null && !jsonObj.get("regulatoryDetail").isJsonNull()) {
        JsonArray jsonArrayregulatoryDetail = jsonObj.getAsJsonArray("regulatoryDetail");
        if (jsonArrayregulatoryDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatoryDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatoryDetail` to be an array in the JSON string but got `%s`", jsonObj.get("regulatoryDetail").toString()));
          }

          // validate the optional field `regulatoryDetail` (array)
          for (int i = 0; i < jsonArrayregulatoryDetail.size(); i++) {
            RegulatoryDetail.validateJsonElement(jsonArrayregulatoryDetail.get(i));
          };
        }
      }
      // validate the optional field `selfRegulatedMembership`
      if (jsonObj.get("selfRegulatedMembership") != null && !jsonObj.get("selfRegulatedMembership").isJsonNull()) {
        SelfRegulatedMembershipType.validateJsonElement(jsonObj.get("selfRegulatedMembership"));
      }
      // validate the optional field `affiliationDetails`
      if (jsonObj.get("affiliationDetails") != null && !jsonObj.get("affiliationDetails").isJsonNull()) {
        AffiliationDetailsType.validateJsonElement(jsonObj.get("affiliationDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("financialOrgTypes") != null && !jsonObj.get("financialOrgTypes").isJsonNull() && !jsonObj.get("financialOrgTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialOrgTypes` to be an array in the JSON string but got `%s`", jsonObj.get("financialOrgTypes").toString()));
      }
      // validate the optional field `orgRegulatoryInfo`
      if (jsonObj.get("orgRegulatoryInfo") != null && !jsonObj.get("orgRegulatoryInfo").isJsonNull()) {
        ORGRegulatoryInfoType.validateJsonElement(jsonObj.get("orgRegulatoryInfo"));
      }
      // validate the optional field `ausExposureDetails`
      if (jsonObj.get("ausExposureDetails") != null && !jsonObj.get("ausExposureDetails").isJsonNull()) {
        AUSExposureDetailsType.validateJsonElement(jsonObj.get("ausExposureDetails"));
      }
      if ((jsonObj.get("controllerExchangeCode") != null && !jsonObj.get("controllerExchangeCode").isJsonNull()) && !jsonObj.get("controllerExchangeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllerExchangeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllerExchangeCode").toString()));
      }
      // validate the optional field `politicalMilitaryDiplomaticDetails`
      if (jsonObj.get("politicalMilitaryDiplomaticDetails") != null && !jsonObj.get("politicalMilitaryDiplomaticDetails").isJsonNull()) {
        PoliticalMilitaryDiplomaticDetailsType.validateJsonElement(jsonObj.get("politicalMilitaryDiplomaticDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegulatoryInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegulatoryInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegulatoryInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegulatoryInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<RegulatoryInformation>() {
           @Override
           public void write(JsonWriter out, RegulatoryInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegulatoryInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegulatoryInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegulatoryInformation
   * @throws IOException if the JSON string is invalid with respect to RegulatoryInformation
   */
  public static RegulatoryInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegulatoryInformation.class);
  }

  /**
   * Convert an instance of RegulatoryInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

