/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountStatusResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AccountStatusResponse {
  public static final String SERIALIZED_NAME_DATE_OPENED = "dateOpened";
  @SerializedName(SERIALIZED_NAME_DATE_OPENED)
  @javax.annotation.Nullable
  private OffsetDateTime dateOpened;

  public static final String SERIALIZED_NAME_DATE_STARTED = "dateStarted";
  @SerializedName(SERIALIZED_NAME_DATE_STARTED)
  @javax.annotation.Nullable
  private OffsetDateTime dateStarted;

  public static final String SERIALIZED_NAME_DATE_CLOSED = "dateClosed";
  @SerializedName(SERIALIZED_NAME_DATE_CLOSED)
  @javax.annotation.Nullable
  private OffsetDateTime dateClosed;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_MASTER_ACCOUNT_ID = "masterAccountId";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String masterAccountId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public AccountStatusResponse() {
  }

  public AccountStatusResponse dateOpened(@javax.annotation.Nullable OffsetDateTime dateOpened) {
    this.dateOpened = dateOpened;
    return this;
  }

  /**
   * Get dateOpened
   * @return dateOpened
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateOpened() {
    return dateOpened;
  }

  public void setDateOpened(@javax.annotation.Nullable OffsetDateTime dateOpened) {
    this.dateOpened = dateOpened;
  }


  public AccountStatusResponse dateStarted(@javax.annotation.Nullable OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
    return this;
  }

  /**
   * Get dateStarted
   * @return dateStarted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateStarted() {
    return dateStarted;
  }

  public void setDateStarted(@javax.annotation.Nullable OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
  }


  public AccountStatusResponse dateClosed(@javax.annotation.Nullable OffsetDateTime dateClosed) {
    this.dateClosed = dateClosed;
    return this;
  }

  /**
   * Get dateClosed
   * @return dateClosed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateClosed() {
    return dateClosed;
  }

  public void setDateClosed(@javax.annotation.Nullable OffsetDateTime dateClosed) {
    this.dateClosed = dateClosed;
  }


  public AccountStatusResponse accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public AccountStatusResponse status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public AccountStatusResponse description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public AccountStatusResponse masterAccountId(@javax.annotation.Nullable String masterAccountId) {
    this.masterAccountId = masterAccountId;
    return this;
  }

  /**
   * Get masterAccountId
   * @return masterAccountId
   */
  @javax.annotation.Nullable
  public String getMasterAccountId() {
    return masterAccountId;
  }

  public void setMasterAccountId(@javax.annotation.Nullable String masterAccountId) {
    this.masterAccountId = masterAccountId;
  }


  public AccountStatusResponse state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountStatusResponse accountStatusResponse = (AccountStatusResponse) o;
    return Objects.equals(this.dateOpened, accountStatusResponse.dateOpened) &&
        Objects.equals(this.dateStarted, accountStatusResponse.dateStarted) &&
        Objects.equals(this.dateClosed, accountStatusResponse.dateClosed) &&
        Objects.equals(this.accountId, accountStatusResponse.accountId) &&
        Objects.equals(this.status, accountStatusResponse.status) &&
        Objects.equals(this.description, accountStatusResponse.description) &&
        Objects.equals(this.masterAccountId, accountStatusResponse.masterAccountId) &&
        Objects.equals(this.state, accountStatusResponse.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOpened, dateStarted, dateClosed, accountId, status, description, masterAccountId, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountStatusResponse {\n");
    sb.append("    dateOpened: ").append(toIndentedString(dateOpened)).append("\n");
    sb.append("    dateStarted: ").append(toIndentedString(dateStarted)).append("\n");
    sb.append("    dateClosed: ").append(toIndentedString(dateClosed)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    masterAccountId: ").append(toIndentedString(masterAccountId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateOpened");
    openapiFields.add("dateStarted");
    openapiFields.add("dateClosed");
    openapiFields.add("accountId");
    openapiFields.add("status");
    openapiFields.add("description");
    openapiFields.add("masterAccountId");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountStatusResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountStatusResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountStatusResponse is not found in the empty JSON string", AccountStatusResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountStatusResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountStatusResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("masterAccountId") != null && !jsonObj.get("masterAccountId").isJsonNull()) && !jsonObj.get("masterAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterAccountId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountStatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountStatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountStatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountStatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountStatusResponse>() {
           @Override
           public void write(JsonWriter out, AccountStatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountStatusResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountStatusResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountStatusResponse
   * @throws IOException if the JSON string is invalid with respect to AccountStatusResponse
   */
  public static AccountStatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountStatusResponse.class);
  }

  /**
   * Convert an instance of AccountStatusResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

