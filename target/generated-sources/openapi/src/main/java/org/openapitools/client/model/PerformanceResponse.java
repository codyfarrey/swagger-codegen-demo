/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PerformanceResponseCps;
import org.openapitools.client.model.PerformanceResponseNav;
import org.openapitools.client.model.PerformanceResponseTpps;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PerformanceResponse {
  public static final String SERIALIZED_NAME_CURRENCY_TYPE = "currencyType";
  @SerializedName(SERIALIZED_NAME_CURRENCY_TYPE)
  @javax.annotation.Nullable
  private String currencyType;

  public static final String SERIALIZED_NAME_RC = "rc";
  @SerializedName(SERIALIZED_NAME_RC)
  @javax.annotation.Nullable
  private Integer rc;

  public static final String SERIALIZED_NAME_NAV = "nav";
  @SerializedName(SERIALIZED_NAME_NAV)
  @javax.annotation.Nullable
  private PerformanceResponseNav nav;

  public static final String SERIALIZED_NAME_ND = "nd";
  @SerializedName(SERIALIZED_NAME_ND)
  @javax.annotation.Nullable
  private Integer nd;

  public static final String SERIALIZED_NAME_CPS = "cps";
  @SerializedName(SERIALIZED_NAME_CPS)
  @javax.annotation.Nullable
  private PerformanceResponseCps cps;

  public static final String SERIALIZED_NAME_TPPS = "tpps";
  @SerializedName(SERIALIZED_NAME_TPPS)
  @javax.annotation.Nullable
  private PerformanceResponseTpps tpps;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INCLUDED = "included";
  @SerializedName(SERIALIZED_NAME_INCLUDED)
  @javax.annotation.Nullable
  private List<String> included = new ArrayList<>();

  public static final String SERIALIZED_NAME_PM = "pm";
  @SerializedName(SERIALIZED_NAME_PM)
  @javax.annotation.Nullable
  private String pm;

  public PerformanceResponse() {
  }

  public PerformanceResponse currencyType(@javax.annotation.Nullable String currencyType) {
    this.currencyType = currencyType;
    return this;
  }

  /**
   * Confirms if the currency type. If trading exclusively in your base currency, “base” will be returned.
   * @return currencyType
   */
  @javax.annotation.Nullable
  public String getCurrencyType() {
    return currencyType;
  }

  public void setCurrencyType(@javax.annotation.Nullable String currencyType) {
    this.currencyType = currencyType;
  }


  public PerformanceResponse rc(@javax.annotation.Nullable Integer rc) {
    this.rc = rc;
    return this;
  }

  /**
   * Returns the data identifier (Internal Use Only).
   * @return rc
   */
  @javax.annotation.Nullable
  public Integer getRc() {
    return rc;
  }

  public void setRc(@javax.annotation.Nullable Integer rc) {
    this.rc = rc;
  }


  public PerformanceResponse nav(@javax.annotation.Nullable PerformanceResponseNav nav) {
    this.nav = nav;
    return this;
  }

  /**
   * Get nav
   * @return nav
   */
  @javax.annotation.Nullable
  public PerformanceResponseNav getNav() {
    return nav;
  }

  public void setNav(@javax.annotation.Nullable PerformanceResponseNav nav) {
    this.nav = nav;
  }


  public PerformanceResponse nd(@javax.annotation.Nullable Integer nd) {
    this.nd = nd;
    return this;
  }

  /**
   * Returns the total data points.
   * @return nd
   */
  @javax.annotation.Nullable
  public Integer getNd() {
    return nd;
  }

  public void setNd(@javax.annotation.Nullable Integer nd) {
    this.nd = nd;
  }


  public PerformanceResponse cps(@javax.annotation.Nullable PerformanceResponseCps cps) {
    this.cps = cps;
    return this;
  }

  /**
   * Get cps
   * @return cps
   */
  @javax.annotation.Nullable
  public PerformanceResponseCps getCps() {
    return cps;
  }

  public void setCps(@javax.annotation.Nullable PerformanceResponseCps cps) {
    this.cps = cps;
  }


  public PerformanceResponse tpps(@javax.annotation.Nullable PerformanceResponseTpps tpps) {
    this.tpps = tpps;
    return this;
  }

  /**
   * Get tpps
   * @return tpps
   */
  @javax.annotation.Nullable
  public PerformanceResponseTpps getTpps() {
    return tpps;
  }

  public void setTpps(@javax.annotation.Nullable PerformanceResponseTpps tpps) {
    this.tpps = tpps;
  }


  public PerformanceResponse id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Returns the request identifier, getPerformanceData.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PerformanceResponse included(@javax.annotation.Nullable List<String> included) {
    this.included = included;
    return this;
  }

  public PerformanceResponse addIncludedItem(String includedItem) {
    if (this.included == null) {
      this.included = new ArrayList<>();
    }
    this.included.add(includedItem);
    return this;
  }

  /**
   * Returns an array containing accounts reviewed.
   * @return included
   */
  @javax.annotation.Nullable
  public List<String> getIncluded() {
    return included;
  }

  public void setIncluded(@javax.annotation.Nullable List<String> included) {
    this.included = included;
  }


  public PerformanceResponse pm(@javax.annotation.Nullable String pm) {
    this.pm = pm;
    return this;
  }

  /**
   * Portfolio Measure. Used to indicate TWR or MWR values returned.
   * @return pm
   */
  @javax.annotation.Nullable
  public String getPm() {
    return pm;
  }

  public void setPm(@javax.annotation.Nullable String pm) {
    this.pm = pm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceResponse performanceResponse = (PerformanceResponse) o;
    return Objects.equals(this.currencyType, performanceResponse.currencyType) &&
        Objects.equals(this.rc, performanceResponse.rc) &&
        Objects.equals(this.nav, performanceResponse.nav) &&
        Objects.equals(this.nd, performanceResponse.nd) &&
        Objects.equals(this.cps, performanceResponse.cps) &&
        Objects.equals(this.tpps, performanceResponse.tpps) &&
        Objects.equals(this.id, performanceResponse.id) &&
        Objects.equals(this.included, performanceResponse.included) &&
        Objects.equals(this.pm, performanceResponse.pm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyType, rc, nav, nd, cps, tpps, id, included, pm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceResponse {\n");
    sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    nd: ").append(toIndentedString(nd)).append("\n");
    sb.append("    cps: ").append(toIndentedString(cps)).append("\n");
    sb.append("    tpps: ").append(toIndentedString(tpps)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    included: ").append(toIndentedString(included)).append("\n");
    sb.append("    pm: ").append(toIndentedString(pm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyType");
    openapiFields.add("rc");
    openapiFields.add("nav");
    openapiFields.add("nd");
    openapiFields.add("cps");
    openapiFields.add("tpps");
    openapiFields.add("id");
    openapiFields.add("included");
    openapiFields.add("pm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceResponse is not found in the empty JSON string", PerformanceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyType") != null && !jsonObj.get("currencyType").isJsonNull()) && !jsonObj.get("currencyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyType").toString()));
      }
      // validate the optional field `nav`
      if (jsonObj.get("nav") != null && !jsonObj.get("nav").isJsonNull()) {
        PerformanceResponseNav.validateJsonElement(jsonObj.get("nav"));
      }
      // validate the optional field `cps`
      if (jsonObj.get("cps") != null && !jsonObj.get("cps").isJsonNull()) {
        PerformanceResponseCps.validateJsonElement(jsonObj.get("cps"));
      }
      // validate the optional field `tpps`
      if (jsonObj.get("tpps") != null && !jsonObj.get("tpps").isJsonNull()) {
        PerformanceResponseTpps.validateJsonElement(jsonObj.get("tpps"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("included") != null && !jsonObj.get("included").isJsonNull() && !jsonObj.get("included").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `included` to be an array in the JSON string but got `%s`", jsonObj.get("included").toString()));
      }
      if ((jsonObj.get("pm") != null && !jsonObj.get("pm").isJsonNull()) && !jsonObj.get("pm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceResponse>() {
           @Override
           public void write(JsonWriter out, PerformanceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceResponse
   * @throws IOException if the JSON string is invalid with respect to PerformanceResponse
   */
  public static PerformanceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceResponse.class);
  }

  /**
   * Convert an instance of PerformanceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

