/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProblemDetailResponse;
import org.openapitools.client.model.TokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationTokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationTokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationTokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateToken
     * @param grantType The [authorization grant flow](https://dataetracker.ietf.org/doc/html/rfc6749#section-1.3) for the creation of the tokens. (required)
     * @param clientAssertion The compact [client assertion](https://www.rfc-editor.org/rfc/rfc7521.html) token used to authenticate you as a registered client. (required)
     * @param clientAssertionType The [client assertion type](https://www.rfc-editor.org/rfc/rfc7521.html#section-4.2) that identifies the client assertion. (required)
     * @param scope The space-delimited list of scopes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a token response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenCall(String grantType, String clientAssertion, String clientAssertionType, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/api/v1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientAssertion != null) {
            localVarFormParams.put("client_assertion", clientAssertion);
        }

        if (clientAssertionType != null) {
            localVarFormParams.put("client_assertion_type", clientAssertionType);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenValidateBeforeCall(String grantType, String clientAssertion, String clientAssertionType, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling generateToken(Async)");
        }

        // verify the required parameter 'clientAssertion' is set
        if (clientAssertion == null) {
            throw new ApiException("Missing the required parameter 'clientAssertion' when calling generateToken(Async)");
        }

        // verify the required parameter 'clientAssertionType' is set
        if (clientAssertionType == null) {
            throw new ApiException("Missing the required parameter 'clientAssertionType' when calling generateToken(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling generateToken(Async)");
        }

        return generateTokenCall(grantType, clientAssertion, clientAssertionType, scope, _callback);

    }

    /**
     * Create Access Token
     * Generate OAuth 2.0 access tokens based on request parameters.
     * @param grantType The [authorization grant flow](https://dataetracker.ietf.org/doc/html/rfc6749#section-1.3) for the creation of the tokens. (required)
     * @param clientAssertion The compact [client assertion](https://www.rfc-editor.org/rfc/rfc7521.html) token used to authenticate you as a registered client. (required)
     * @param clientAssertionType The [client assertion type](https://www.rfc-editor.org/rfc/rfc7521.html#section-4.2) that identifies the client assertion. (required)
     * @param scope The space-delimited list of scopes (required)
     * @return TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a token response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TokenResponse generateToken(String grantType, String clientAssertion, String clientAssertionType, String scope) throws ApiException {
        ApiResponse<TokenResponse> localVarResp = generateTokenWithHttpInfo(grantType, clientAssertion, clientAssertionType, scope);
        return localVarResp.getData();
    }

    /**
     * Create Access Token
     * Generate OAuth 2.0 access tokens based on request parameters.
     * @param grantType The [authorization grant flow](https://dataetracker.ietf.org/doc/html/rfc6749#section-1.3) for the creation of the tokens. (required)
     * @param clientAssertion The compact [client assertion](https://www.rfc-editor.org/rfc/rfc7521.html) token used to authenticate you as a registered client. (required)
     * @param clientAssertionType The [client assertion type](https://www.rfc-editor.org/rfc/rfc7521.html#section-4.2) that identifies the client assertion. (required)
     * @param scope The space-delimited list of scopes (required)
     * @return ApiResponse&lt;TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a token response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenResponse> generateTokenWithHttpInfo(String grantType, String clientAssertion, String clientAssertionType, String scope) throws ApiException {
        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(grantType, clientAssertion, clientAssertionType, scope, null);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Access Token (asynchronously)
     * Generate OAuth 2.0 access tokens based on request parameters.
     * @param grantType The [authorization grant flow](https://dataetracker.ietf.org/doc/html/rfc6749#section-1.3) for the creation of the tokens. (required)
     * @param clientAssertion The compact [client assertion](https://www.rfc-editor.org/rfc/rfc7521.html) token used to authenticate you as a registered client. (required)
     * @param clientAssertionType The [client assertion type](https://www.rfc-editor.org/rfc/rfc7521.html#section-4.2) that identifies the client assertion. (required)
     * @param scope The space-delimited list of scopes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a token response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a [Problem detail](https://datatracker.ietf.org/doc/html/rfc9457) instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenAsync(String grantType, String clientAssertion, String clientAssertionType, String scope, final ApiCallback<TokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(grantType, clientAssertion, clientAssertionType, scope, _callback);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
