/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Acknowledges IB&#39;s acceptance of the request to cancel the order. Does not report whether the cancellation can or will ultimately be enacted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class OrderCancelSuccess {
  /**
   * Indicates success with value &#39;Request was submitted&#39;
   */
  @JsonAdapter(MsgEnum.Adapter.class)
  public enum MsgEnum {
    REQUEST_WAS_SUBMITTED("Request was submitted");

    private String value;

    MsgEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MsgEnum fromValue(String value) {
      for (MsgEnum b : MsgEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MsgEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MsgEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MsgEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MsgEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MsgEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  @javax.annotation.Nullable
  private MsgEnum msg;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private String orderId;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public OrderCancelSuccess() {
  }

  public OrderCancelSuccess msg(@javax.annotation.Nullable MsgEnum msg) {
    this.msg = msg;
    return this;
  }

  /**
   * Indicates success with value &#39;Request was submitted&#39;
   * @return msg
   */
  @javax.annotation.Nullable
  public MsgEnum getMsg() {
    return msg;
  }

  public void setMsg(@javax.annotation.Nullable MsgEnum msg) {
    this.msg = msg;
  }


  public OrderCancelSuccess orderId(@javax.annotation.Nullable String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * IB order ID of the order ticket requested for cancellation.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable String orderId) {
    this.orderId = orderId;
  }


  public OrderCancelSuccess conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * IB contract ID of the order ticket&#39;s instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }


  public OrderCancelSuccess account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * IB account to which the order was originally set to clear.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCancelSuccess orderCancelSuccess = (OrderCancelSuccess) o;
    return Objects.equals(this.msg, orderCancelSuccess.msg) &&
        Objects.equals(this.orderId, orderCancelSuccess.orderId) &&
        Objects.equals(this.conid, orderCancelSuccess.conid) &&
        Objects.equals(this.account, orderCancelSuccess.account);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msg, orderId, conid, account);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCancelSuccess {\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msg");
    openapiFields.add("order_id");
    openapiFields.add("conid");
    openapiFields.add("account");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderCancelSuccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderCancelSuccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCancelSuccess is not found in the empty JSON string", OrderCancelSuccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderCancelSuccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCancelSuccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      // validate the optional field `msg`
      if (jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) {
        MsgEnum.validateJsonElement(jsonObj.get("msg"));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCancelSuccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCancelSuccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCancelSuccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCancelSuccess.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCancelSuccess>() {
           @Override
           public void write(JsonWriter out, OrderCancelSuccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCancelSuccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderCancelSuccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderCancelSuccess
   * @throws IOException if the JSON string is invalid with respect to OrderCancelSuccess
   */
  public static OrderCancelSuccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCancelSuccess.class);
  }

  /**
   * Convert an instance of OrderCancelSuccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

