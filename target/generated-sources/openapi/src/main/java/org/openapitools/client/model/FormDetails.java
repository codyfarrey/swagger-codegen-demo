/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FormPayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class FormDetails {
  public static final String SERIALIZED_NAME_FORM_NUMBER = "formNumber";
  @SerializedName(SERIALIZED_NAME_FORM_NUMBER)
  @javax.annotation.Nullable
  private Integer formNumber;

  public static final String SERIALIZED_NAME_SHA1_CHECKSUM = "sha1Checksum";
  @SerializedName(SERIALIZED_NAME_SHA1_CHECKSUM)
  @javax.annotation.Nullable
  private String sha1Checksum;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  @javax.annotation.Nullable
  private String fileName;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  @javax.annotation.Nullable
  private FormPayload payload;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private ErrorResponse error;

  public static final String SERIALIZED_NAME_HAS_ERROR = "hasError";
  @SerializedName(SERIALIZED_NAME_HAS_ERROR)
  @javax.annotation.Nullable
  private Boolean hasError;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  @javax.annotation.Nullable
  private String errorDescription;

  public static final String SERIALIZED_NAME_FILE_LENGTH = "fileLength";
  @SerializedName(SERIALIZED_NAME_FILE_LENGTH)
  @javax.annotation.Nullable
  private Long fileLength;

  public FormDetails() {
  }

  public FormDetails formNumber(@javax.annotation.Nullable Integer formNumber) {
    this.formNumber = formNumber;
    return this;
  }

  /**
   * Get formNumber
   * @return formNumber
   */
  @javax.annotation.Nullable
  public Integer getFormNumber() {
    return formNumber;
  }

  public void setFormNumber(@javax.annotation.Nullable Integer formNumber) {
    this.formNumber = formNumber;
  }


  public FormDetails sha1Checksum(@javax.annotation.Nullable String sha1Checksum) {
    this.sha1Checksum = sha1Checksum;
    return this;
  }

  /**
   * Get sha1Checksum
   * @return sha1Checksum
   */
  @javax.annotation.Nullable
  public String getSha1Checksum() {
    return sha1Checksum;
  }

  public void setSha1Checksum(@javax.annotation.Nullable String sha1Checksum) {
    this.sha1Checksum = sha1Checksum;
  }


  public FormDetails dateModified(@javax.annotation.Nullable OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public FormDetails fileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(@javax.annotation.Nullable String fileName) {
    this.fileName = fileName;
  }


  public FormDetails language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public FormDetails formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Get formName
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public FormDetails payload(@javax.annotation.Nullable FormPayload payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nullable
  public FormPayload getPayload() {
    return payload;
  }

  public void setPayload(@javax.annotation.Nullable FormPayload payload) {
    this.payload = payload;
  }


  public FormDetails error(@javax.annotation.Nullable ErrorResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ErrorResponse getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable ErrorResponse error) {
    this.error = error;
  }


  public FormDetails hasError(@javax.annotation.Nullable Boolean hasError) {
    this.hasError = hasError;
    return this;
  }

  /**
   * Get hasError
   * @return hasError
   */
  @javax.annotation.Nullable
  public Boolean getHasError() {
    return hasError;
  }

  public void setHasError(@javax.annotation.Nullable Boolean hasError) {
    this.hasError = hasError;
  }


  public FormDetails errorDescription(@javax.annotation.Nullable String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * Get errorDescription
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(@javax.annotation.Nullable String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public FormDetails fileLength(@javax.annotation.Nullable Long fileLength) {
    this.fileLength = fileLength;
    return this;
  }

  /**
   * Get fileLength
   * @return fileLength
   */
  @javax.annotation.Nullable
  public Long getFileLength() {
    return fileLength;
  }

  public void setFileLength(@javax.annotation.Nullable Long fileLength) {
    this.fileLength = fileLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormDetails formDetails = (FormDetails) o;
    return Objects.equals(this.formNumber, formDetails.formNumber) &&
        Objects.equals(this.sha1Checksum, formDetails.sha1Checksum) &&
        Objects.equals(this.dateModified, formDetails.dateModified) &&
        Objects.equals(this.fileName, formDetails.fileName) &&
        Objects.equals(this.language, formDetails.language) &&
        Objects.equals(this.formName, formDetails.formName) &&
        Objects.equals(this.payload, formDetails.payload) &&
        Objects.equals(this.error, formDetails.error) &&
        Objects.equals(this.hasError, formDetails.hasError) &&
        Objects.equals(this.errorDescription, formDetails.errorDescription) &&
        Objects.equals(this.fileLength, formDetails.fileLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formNumber, sha1Checksum, dateModified, fileName, language, formName, payload, error, hasError, errorDescription, fileLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormDetails {\n");
    sb.append("    formNumber: ").append(toIndentedString(formNumber)).append("\n");
    sb.append("    sha1Checksum: ").append(toIndentedString(sha1Checksum)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hasError: ").append(toIndentedString(hasError)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formNumber");
    openapiFields.add("sha1Checksum");
    openapiFields.add("dateModified");
    openapiFields.add("fileName");
    openapiFields.add("language");
    openapiFields.add("formName");
    openapiFields.add("payload");
    openapiFields.add("error");
    openapiFields.add("hasError");
    openapiFields.add("errorDescription");
    openapiFields.add("fileLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormDetails is not found in the empty JSON string", FormDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sha1Checksum") != null && !jsonObj.get("sha1Checksum").isJsonNull()) && !jsonObj.get("sha1Checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha1Checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha1Checksum").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        FormPayload.validateJsonElement(jsonObj.get("payload"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ErrorResponse.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("errorDescription") != null && !jsonObj.get("errorDescription").isJsonNull()) && !jsonObj.get("errorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FormDetails>() {
           @Override
           public void write(JsonWriter out, FormDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormDetails
   * @throws IOException if the JSON string is invalid with respect to FormDetails
   */
  public static FormDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormDetails.class);
  }

  /**
   * Convert an instance of FormDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

