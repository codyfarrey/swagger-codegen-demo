/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertCondition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AlertCondition {
  public static final String SERIALIZED_NAME_CONDITION_TYPE = "condition_type";
  @SerializedName(SERIALIZED_NAME_CONDITION_TYPE)
  @javax.annotation.Nullable
  private Integer conditionType;

  public static final String SERIALIZED_NAME_CONIDEX = "conidex";
  @SerializedName(SERIALIZED_NAME_CONIDEX)
  @javax.annotation.Nullable
  private String conidex;

  public static final String SERIALIZED_NAME_CONTRACT_DESCRIPTION1 = "contract_description_1";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESCRIPTION1)
  @javax.annotation.Nullable
  private String contractDescription1;

  public static final String SERIALIZED_NAME_CONDITION_OPERATOR = "condition_operator";
  @SerializedName(SERIALIZED_NAME_CONDITION_OPERATOR)
  @javax.annotation.Nullable
  private String conditionOperator;

  public static final String SERIALIZED_NAME_CONDITION_TRIGGER_METHOD = "condition_trigger_method";
  @SerializedName(SERIALIZED_NAME_CONDITION_TRIGGER_METHOD)
  @javax.annotation.Nullable
  private Integer conditionTriggerMethod;

  public static final String SERIALIZED_NAME_CONDITION_VALUE = "condition_value";
  @SerializedName(SERIALIZED_NAME_CONDITION_VALUE)
  @javax.annotation.Nullable
  private String conditionValue;

  public static final String SERIALIZED_NAME_CONDITION_LOGIC_BIND = "condition_logic_bind";
  @SerializedName(SERIALIZED_NAME_CONDITION_LOGIC_BIND)
  @javax.annotation.Nullable
  private Boolean conditionLogicBind;

  public static final String SERIALIZED_NAME_CONDITION_TIME_ZONE = "condition_time_zone";
  @SerializedName(SERIALIZED_NAME_CONDITION_TIME_ZONE)
  @javax.annotation.Nullable
  private String conditionTimeZone;

  public AlertCondition() {
  }

  public AlertCondition conditionType(@javax.annotation.Nullable Integer conditionType) {
    this.conditionType = conditionType;
    return this;
  }

  /**
   * The type of condition set.
   * @return conditionType
   */
  @javax.annotation.Nullable
  public Integer getConditionType() {
    return conditionType;
  }

  public void setConditionType(@javax.annotation.Nullable Integer conditionType) {
    this.conditionType = conditionType;
  }


  public AlertCondition conidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
    return this;
  }

  /**
   * Returns conid and exchange in the format “conid@exchange”
   * @return conidex
   */
  @javax.annotation.Nullable
  public String getConidex() {
    return conidex;
  }

  public void setConidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
  }


  public AlertCondition contractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
    return this;
  }

  /**
   * Includes relevant descriptions (if applicable).
   * @return contractDescription1
   */
  @javax.annotation.Nullable
  public String getContractDescription1() {
    return contractDescription1;
  }

  public void setContractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
  }


  public AlertCondition conditionOperator(@javax.annotation.Nullable String conditionOperator) {
    this.conditionOperator = conditionOperator;
    return this;
  }

  /**
   * Condition operator set for alert.
   * @return conditionOperator
   */
  @javax.annotation.Nullable
  public String getConditionOperator() {
    return conditionOperator;
  }

  public void setConditionOperator(@javax.annotation.Nullable String conditionOperator) {
    this.conditionOperator = conditionOperator;
  }


  public AlertCondition conditionTriggerMethod(@javax.annotation.Nullable Integer conditionTriggerMethod) {
    this.conditionTriggerMethod = conditionTriggerMethod;
    return this;
  }

  /**
   * TriggerMethod value set.
   * @return conditionTriggerMethod
   */
  @javax.annotation.Nullable
  public Integer getConditionTriggerMethod() {
    return conditionTriggerMethod;
  }

  public void setConditionTriggerMethod(@javax.annotation.Nullable Integer conditionTriggerMethod) {
    this.conditionTriggerMethod = conditionTriggerMethod;
  }


  public AlertCondition conditionValue(@javax.annotation.Nullable String conditionValue) {
    this.conditionValue = conditionValue;
    return this;
  }

  /**
   * Condition value set.
   * @return conditionValue
   */
  @javax.annotation.Nullable
  public String getConditionValue() {
    return conditionValue;
  }

  public void setConditionValue(@javax.annotation.Nullable String conditionValue) {
    this.conditionValue = conditionValue;
  }


  public AlertCondition conditionLogicBind(@javax.annotation.Nullable Boolean conditionLogicBind) {
    this.conditionLogicBind = conditionLogicBind;
    return this;
  }

  /**
   * Condition logic_bind value set.
   * @return conditionLogicBind
   */
  @javax.annotation.Nullable
  public Boolean getConditionLogicBind() {
    return conditionLogicBind;
  }

  public void setConditionLogicBind(@javax.annotation.Nullable Boolean conditionLogicBind) {
    this.conditionLogicBind = conditionLogicBind;
  }


  public AlertCondition conditionTimeZone(@javax.annotation.Nullable String conditionTimeZone) {
    this.conditionTimeZone = conditionTimeZone;
    return this;
  }

  /**
   * Condition timeZone value set.
   * @return conditionTimeZone
   */
  @javax.annotation.Nullable
  public String getConditionTimeZone() {
    return conditionTimeZone;
  }

  public void setConditionTimeZone(@javax.annotation.Nullable String conditionTimeZone) {
    this.conditionTimeZone = conditionTimeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertCondition alertCondition = (AlertCondition) o;
    return Objects.equals(this.conditionType, alertCondition.conditionType) &&
        Objects.equals(this.conidex, alertCondition.conidex) &&
        Objects.equals(this.contractDescription1, alertCondition.contractDescription1) &&
        Objects.equals(this.conditionOperator, alertCondition.conditionOperator) &&
        Objects.equals(this.conditionTriggerMethod, alertCondition.conditionTriggerMethod) &&
        Objects.equals(this.conditionValue, alertCondition.conditionValue) &&
        Objects.equals(this.conditionLogicBind, alertCondition.conditionLogicBind) &&
        Objects.equals(this.conditionTimeZone, alertCondition.conditionTimeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionType, conidex, contractDescription1, conditionOperator, conditionTriggerMethod, conditionValue, conditionLogicBind, conditionTimeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertCondition {\n");
    sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
    sb.append("    conidex: ").append(toIndentedString(conidex)).append("\n");
    sb.append("    contractDescription1: ").append(toIndentedString(contractDescription1)).append("\n");
    sb.append("    conditionOperator: ").append(toIndentedString(conditionOperator)).append("\n");
    sb.append("    conditionTriggerMethod: ").append(toIndentedString(conditionTriggerMethod)).append("\n");
    sb.append("    conditionValue: ").append(toIndentedString(conditionValue)).append("\n");
    sb.append("    conditionLogicBind: ").append(toIndentedString(conditionLogicBind)).append("\n");
    sb.append("    conditionTimeZone: ").append(toIndentedString(conditionTimeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition_type");
    openapiFields.add("conidex");
    openapiFields.add("contract_description_1");
    openapiFields.add("condition_operator");
    openapiFields.add("condition_trigger_method");
    openapiFields.add("condition_value");
    openapiFields.add("condition_logic_bind");
    openapiFields.add("condition_time_zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertCondition is not found in the empty JSON string", AlertCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conidex") != null && !jsonObj.get("conidex").isJsonNull()) && !jsonObj.get("conidex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidex").toString()));
      }
      if ((jsonObj.get("contract_description_1") != null && !jsonObj.get("contract_description_1").isJsonNull()) && !jsonObj.get("contract_description_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_description_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_description_1").toString()));
      }
      if ((jsonObj.get("condition_operator") != null && !jsonObj.get("condition_operator").isJsonNull()) && !jsonObj.get("condition_operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_operator").toString()));
      }
      if ((jsonObj.get("condition_value") != null && !jsonObj.get("condition_value").isJsonNull()) && !jsonObj.get("condition_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_value").toString()));
      }
      if ((jsonObj.get("condition_time_zone") != null && !jsonObj.get("condition_time_zone").isJsonNull()) && !jsonObj.get("condition_time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_time_zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertCondition>() {
           @Override
           public void write(JsonWriter out, AlertCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertCondition
   * @throws IOException if the JSON string is invalid with respect to AlertCondition
   */
  public static AlertCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertCondition.class);
  }

  /**
   * Convert an instance of AlertCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

