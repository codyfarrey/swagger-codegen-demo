/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateWithholdingStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class UpdateWithholdingStatement {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  /**
   * Gets or Sets fatcaCompliantType
   */
  @JsonAdapter(FatcaCompliantTypeEnum.Adapter.class)
  public enum FatcaCompliantTypeEnum {
    FATCA_COMPLIANT("FATCA_COMPLIANT"),
    
    NON_CONSENTING_US_ACCOUNT("NON_CONSENTING_US_ACCOUNT"),
    
    NON_COOPERATIVE_ACCOUNT("NON_COOPERATIVE_ACCOUNT");

    private String value;

    FatcaCompliantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FatcaCompliantTypeEnum fromValue(String value) {
      for (FatcaCompliantTypeEnum b : FatcaCompliantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FatcaCompliantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FatcaCompliantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FatcaCompliantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FatcaCompliantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FatcaCompliantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FATCA_COMPLIANT_TYPE = "fatcaCompliantType";
  @SerializedName(SERIALIZED_NAME_FATCA_COMPLIANT_TYPE)
  @javax.annotation.Nullable
  private FatcaCompliantTypeEnum fatcaCompliantType;

  public static final String SERIALIZED_NAME_US_INCOME_TAX = "usIncomeTax";
  @SerializedName(SERIALIZED_NAME_US_INCOME_TAX)
  @javax.annotation.Nullable
  private Boolean usIncomeTax;

  public static final String SERIALIZED_NAME_TREATY_COUNTRY = "treatyCountry";
  @SerializedName(SERIALIZED_NAME_TREATY_COUNTRY)
  @javax.annotation.Nullable
  private String treatyCountry;

  public static final String SERIALIZED_NAME_CERT_W8_IMY = "certW8Imy";
  @SerializedName(SERIALIZED_NAME_CERT_W8_IMY)
  @javax.annotation.Nullable
  private Boolean certW8Imy;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  @javax.annotation.Nullable
  private LocalDate effectiveDate;

  public UpdateWithholdingStatement() {
  }

  public UpdateWithholdingStatement accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public UpdateWithholdingStatement fatcaCompliantType(@javax.annotation.Nullable FatcaCompliantTypeEnum fatcaCompliantType) {
    this.fatcaCompliantType = fatcaCompliantType;
    return this;
  }

  /**
   * Get fatcaCompliantType
   * @return fatcaCompliantType
   */
  @javax.annotation.Nullable
  public FatcaCompliantTypeEnum getFatcaCompliantType() {
    return fatcaCompliantType;
  }

  public void setFatcaCompliantType(@javax.annotation.Nullable FatcaCompliantTypeEnum fatcaCompliantType) {
    this.fatcaCompliantType = fatcaCompliantType;
  }


  public UpdateWithholdingStatement usIncomeTax(@javax.annotation.Nullable Boolean usIncomeTax) {
    this.usIncomeTax = usIncomeTax;
    return this;
  }

  /**
   * Get usIncomeTax
   * @return usIncomeTax
   */
  @javax.annotation.Nullable
  public Boolean getUsIncomeTax() {
    return usIncomeTax;
  }

  public void setUsIncomeTax(@javax.annotation.Nullable Boolean usIncomeTax) {
    this.usIncomeTax = usIncomeTax;
  }


  public UpdateWithholdingStatement treatyCountry(@javax.annotation.Nullable String treatyCountry) {
    this.treatyCountry = treatyCountry;
    return this;
  }

  /**
   * Get treatyCountry
   * @return treatyCountry
   */
  @javax.annotation.Nullable
  public String getTreatyCountry() {
    return treatyCountry;
  }

  public void setTreatyCountry(@javax.annotation.Nullable String treatyCountry) {
    this.treatyCountry = treatyCountry;
  }


  public UpdateWithholdingStatement certW8Imy(@javax.annotation.Nullable Boolean certW8Imy) {
    this.certW8Imy = certW8Imy;
    return this;
  }

  /**
   * Get certW8Imy
   * @return certW8Imy
   */
  @javax.annotation.Nullable
  public Boolean getCertW8Imy() {
    return certW8Imy;
  }

  public void setCertW8Imy(@javax.annotation.Nullable Boolean certW8Imy) {
    this.certW8Imy = certW8Imy;
  }


  public UpdateWithholdingStatement effectiveDate(@javax.annotation.Nullable LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Get effectiveDate
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(@javax.annotation.Nullable LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWithholdingStatement updateWithholdingStatement = (UpdateWithholdingStatement) o;
    return Objects.equals(this.accountId, updateWithholdingStatement.accountId) &&
        Objects.equals(this.fatcaCompliantType, updateWithholdingStatement.fatcaCompliantType) &&
        Objects.equals(this.usIncomeTax, updateWithholdingStatement.usIncomeTax) &&
        Objects.equals(this.treatyCountry, updateWithholdingStatement.treatyCountry) &&
        Objects.equals(this.certW8Imy, updateWithholdingStatement.certW8Imy) &&
        Objects.equals(this.effectiveDate, updateWithholdingStatement.effectiveDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, fatcaCompliantType, usIncomeTax, treatyCountry, certW8Imy, effectiveDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWithholdingStatement {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    fatcaCompliantType: ").append(toIndentedString(fatcaCompliantType)).append("\n");
    sb.append("    usIncomeTax: ").append(toIndentedString(usIncomeTax)).append("\n");
    sb.append("    treatyCountry: ").append(toIndentedString(treatyCountry)).append("\n");
    sb.append("    certW8Imy: ").append(toIndentedString(certW8Imy)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("fatcaCompliantType");
    openapiFields.add("usIncomeTax");
    openapiFields.add("treatyCountry");
    openapiFields.add("certW8Imy");
    openapiFields.add("effectiveDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateWithholdingStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateWithholdingStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateWithholdingStatement is not found in the empty JSON string", UpdateWithholdingStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateWithholdingStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateWithholdingStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("fatcaCompliantType") != null && !jsonObj.get("fatcaCompliantType").isJsonNull()) && !jsonObj.get("fatcaCompliantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fatcaCompliantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fatcaCompliantType").toString()));
      }
      // validate the optional field `fatcaCompliantType`
      if (jsonObj.get("fatcaCompliantType") != null && !jsonObj.get("fatcaCompliantType").isJsonNull()) {
        FatcaCompliantTypeEnum.validateJsonElement(jsonObj.get("fatcaCompliantType"));
      }
      if ((jsonObj.get("treatyCountry") != null && !jsonObj.get("treatyCountry").isJsonNull()) && !jsonObj.get("treatyCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatyCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatyCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateWithholdingStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateWithholdingStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateWithholdingStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateWithholdingStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateWithholdingStatement>() {
           @Override
           public void write(JsonWriter out, UpdateWithholdingStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateWithholdingStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateWithholdingStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateWithholdingStatement
   * @throws IOException if the JSON string is invalid with respect to UpdateWithholdingStatement
   */
  public static UpdateWithholdingStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateWithholdingStatement.class);
  }

  /**
   * Convert an instance of UpdateWithholdingStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

