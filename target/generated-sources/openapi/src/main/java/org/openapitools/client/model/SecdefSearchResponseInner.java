/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SecdefSearchResponseInnerIssuersInner;
import org.openapitools.client.model.SecdefSearchResponseInnerSectionsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecdefSearchResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SecdefSearchResponseInner {
  public static final String SERIALIZED_NAME_BONDID = "bondid";
  @SerializedName(SERIALIZED_NAME_BONDID)
  @javax.annotation.Nullable
  private Integer bondid;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public static final String SERIALIZED_NAME_COMPANY_HEADER = "companyHeader";
  @SerializedName(SERIALIZED_NAME_COMPANY_HEADER)
  @javax.annotation.Nullable
  private String companyHeader;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_RESTRICTED = "restricted";
  @SerializedName(SERIALIZED_NAME_RESTRICTED)
  @javax.annotation.Nullable
  private Boolean restricted;

  public static final String SERIALIZED_NAME_FOP = "fop";
  @SerializedName(SERIALIZED_NAME_FOP)
  @javax.annotation.Nullable
  private String fop;

  public static final String SERIALIZED_NAME_OPT = "opt";
  @SerializedName(SERIALIZED_NAME_OPT)
  @javax.annotation.Nullable
  private String opt;

  public static final String SERIALIZED_NAME_WAR = "war";
  @SerializedName(SERIALIZED_NAME_WAR)
  @javax.annotation.Nullable
  private String war;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  @javax.annotation.Nullable
  private List<SecdefSearchResponseInnerSectionsInner> sections = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUERS = "issuers";
  @SerializedName(SERIALIZED_NAME_ISSUERS)
  @javax.annotation.Nullable
  private List<SecdefSearchResponseInnerIssuersInner> issuers = new ArrayList<>();

  public SecdefSearchResponseInner() {
  }

  public SecdefSearchResponseInner bondid(@javax.annotation.Nullable Integer bondid) {
    this.bondid = bondid;
    return this;
  }

  /**
   * applicable for bonds
   * @return bondid
   */
  @javax.annotation.Nullable
  public Integer getBondid() {
    return bondid;
  }

  public void setBondid(@javax.annotation.Nullable Integer bondid) {
    this.bondid = bondid;
  }


  public SecdefSearchResponseInner conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Contract identifier for the unique contract.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }


  public SecdefSearchResponseInner companyHeader(@javax.annotation.Nullable String companyHeader) {
    this.companyHeader = companyHeader;
    return this;
  }

  /**
   * Company Name - Exchange
   * @return companyHeader
   */
  @javax.annotation.Nullable
  public String getCompanyHeader() {
    return companyHeader;
  }

  public void setCompanyHeader(@javax.annotation.Nullable String companyHeader) {
    this.companyHeader = companyHeader;
  }


  public SecdefSearchResponseInner companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Formal name of the company.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public SecdefSearchResponseInner symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Underlying ticker symbol.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public SecdefSearchResponseInner description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Primary exchange of the contract
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public SecdefSearchResponseInner restricted(@javax.annotation.Nullable Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

  /**
   * Returns if the contract is available for trading.
   * @return restricted
   */
  @javax.annotation.Nullable
  public Boolean getRestricted() {
    return restricted;
  }

  public void setRestricted(@javax.annotation.Nullable Boolean restricted) {
    this.restricted = restricted;
  }


  public SecdefSearchResponseInner fop(@javax.annotation.Nullable String fop) {
    this.fop = fop;
    return this;
  }

  /**
   * Returns a string of dates, separated by semicolons.
   * @return fop
   */
  @javax.annotation.Nullable
  public String getFop() {
    return fop;
  }

  public void setFop(@javax.annotation.Nullable String fop) {
    this.fop = fop;
  }


  public SecdefSearchResponseInner opt(@javax.annotation.Nullable String opt) {
    this.opt = opt;
    return this;
  }

  /**
   * Returns a string of dates, separated by semicolons.
   * @return opt
   */
  @javax.annotation.Nullable
  public String getOpt() {
    return opt;
  }

  public void setOpt(@javax.annotation.Nullable String opt) {
    this.opt = opt;
  }


  public SecdefSearchResponseInner war(@javax.annotation.Nullable String war) {
    this.war = war;
    return this;
  }

  /**
   * Returns a string of dates, separated by semicolons.
   * @return war
   */
  @javax.annotation.Nullable
  public String getWar() {
    return war;
  }

  public void setWar(@javax.annotation.Nullable String war) {
    this.war = war;
  }


  public SecdefSearchResponseInner sections(@javax.annotation.Nullable List<SecdefSearchResponseInnerSectionsInner> sections) {
    this.sections = sections;
    return this;
  }

  public SecdefSearchResponseInner addSectionsItem(SecdefSearchResponseInnerSectionsInner sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * Get sections
   * @return sections
   */
  @javax.annotation.Nullable
  public List<SecdefSearchResponseInnerSectionsInner> getSections() {
    return sections;
  }

  public void setSections(@javax.annotation.Nullable List<SecdefSearchResponseInnerSectionsInner> sections) {
    this.sections = sections;
  }


  public SecdefSearchResponseInner issuers(@javax.annotation.Nullable List<SecdefSearchResponseInnerIssuersInner> issuers) {
    this.issuers = issuers;
    return this;
  }

  public SecdefSearchResponseInner addIssuersItem(SecdefSearchResponseInnerIssuersInner issuersItem) {
    if (this.issuers == null) {
      this.issuers = new ArrayList<>();
    }
    this.issuers.add(issuersItem);
    return this;
  }

  /**
   * Get issuers
   * @return issuers
   */
  @javax.annotation.Nullable
  public List<SecdefSearchResponseInnerIssuersInner> getIssuers() {
    return issuers;
  }

  public void setIssuers(@javax.annotation.Nullable List<SecdefSearchResponseInnerIssuersInner> issuers) {
    this.issuers = issuers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecdefSearchResponseInner secdefSearchResponseInner = (SecdefSearchResponseInner) o;
    return Objects.equals(this.bondid, secdefSearchResponseInner.bondid) &&
        Objects.equals(this.conid, secdefSearchResponseInner.conid) &&
        Objects.equals(this.companyHeader, secdefSearchResponseInner.companyHeader) &&
        Objects.equals(this.companyName, secdefSearchResponseInner.companyName) &&
        Objects.equals(this.symbol, secdefSearchResponseInner.symbol) &&
        Objects.equals(this.description, secdefSearchResponseInner.description) &&
        Objects.equals(this.restricted, secdefSearchResponseInner.restricted) &&
        Objects.equals(this.fop, secdefSearchResponseInner.fop) &&
        Objects.equals(this.opt, secdefSearchResponseInner.opt) &&
        Objects.equals(this.war, secdefSearchResponseInner.war) &&
        Objects.equals(this.sections, secdefSearchResponseInner.sections) &&
        Objects.equals(this.issuers, secdefSearchResponseInner.issuers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bondid, conid, companyHeader, companyName, symbol, description, restricted, fop, opt, war, sections, issuers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecdefSearchResponseInner {\n");
    sb.append("    bondid: ").append(toIndentedString(bondid)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    companyHeader: ").append(toIndentedString(companyHeader)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    fop: ").append(toIndentedString(fop)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    war: ").append(toIndentedString(war)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    issuers: ").append(toIndentedString(issuers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bondid");
    openapiFields.add("conid");
    openapiFields.add("companyHeader");
    openapiFields.add("companyName");
    openapiFields.add("symbol");
    openapiFields.add("description");
    openapiFields.add("restricted");
    openapiFields.add("fop");
    openapiFields.add("opt");
    openapiFields.add("war");
    openapiFields.add("sections");
    openapiFields.add("issuers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecdefSearchResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecdefSearchResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecdefSearchResponseInner is not found in the empty JSON string", SecdefSearchResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecdefSearchResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecdefSearchResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
      if ((jsonObj.get("companyHeader") != null && !jsonObj.get("companyHeader").isJsonNull()) && !jsonObj.get("companyHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyHeader").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fop") != null && !jsonObj.get("fop").isJsonNull()) && !jsonObj.get("fop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fop").toString()));
      }
      if ((jsonObj.get("opt") != null && !jsonObj.get("opt").isJsonNull()) && !jsonObj.get("opt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opt").toString()));
      }
      if ((jsonObj.get("war") != null && !jsonObj.get("war").isJsonNull()) && !jsonObj.get("war").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `war` to be a primitive type in the JSON string but got `%s`", jsonObj.get("war").toString()));
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            SecdefSearchResponseInnerSectionsInner.validateJsonElement(jsonArraysections.get(i));
          };
        }
      }
      if (jsonObj.get("issuers") != null && !jsonObj.get("issuers").isJsonNull()) {
        JsonArray jsonArrayissuers = jsonObj.getAsJsonArray("issuers");
        if (jsonArrayissuers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issuers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issuers` to be an array in the JSON string but got `%s`", jsonObj.get("issuers").toString()));
          }

          // validate the optional field `issuers` (array)
          for (int i = 0; i < jsonArrayissuers.size(); i++) {
            SecdefSearchResponseInnerIssuersInner.validateJsonElement(jsonArrayissuers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecdefSearchResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecdefSearchResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecdefSearchResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecdefSearchResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SecdefSearchResponseInner>() {
           @Override
           public void write(JsonWriter out, SecdefSearchResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecdefSearchResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecdefSearchResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecdefSearchResponseInner
   * @throws IOException if the JSON string is invalid with respect to SecdefSearchResponseInner
   */
  public static SecdefSearchResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecdefSearchResponseInner.class);
  }

  /**
   * Convert an instance of SecdefSearchResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

