/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IserverScannerParamsFilterListInner;
import org.openapitools.client.model.IserverScannerParamsInstrumentListInner;
import org.openapitools.client.model.IserverScannerParamsLocationTreeInner;
import org.openapitools.client.model.IserverScannerParamsScanTypeListInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IserverScannerParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IserverScannerParams {
  public static final String SERIALIZED_NAME_SCAN_TYPE_LIST = "scan_type_list";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE_LIST)
  @javax.annotation.Nullable
  private List<IserverScannerParamsScanTypeListInner> scanTypeList = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUMENT_LIST = "instrument_list";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_LIST)
  @javax.annotation.Nullable
  private List<IserverScannerParamsInstrumentListInner> instrumentList = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_LIST = "filter_list";
  @SerializedName(SERIALIZED_NAME_FILTER_LIST)
  @javax.annotation.Nullable
  private List<IserverScannerParamsFilterListInner> filterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_TREE = "location_tree";
  @SerializedName(SERIALIZED_NAME_LOCATION_TREE)
  @javax.annotation.Nullable
  private List<IserverScannerParamsLocationTreeInner> locationTree = new ArrayList<>();

  public IserverScannerParams() {
  }

  public IserverScannerParams scanTypeList(@javax.annotation.Nullable List<IserverScannerParamsScanTypeListInner> scanTypeList) {
    this.scanTypeList = scanTypeList;
    return this;
  }

  public IserverScannerParams addScanTypeListItem(IserverScannerParamsScanTypeListInner scanTypeListItem) {
    if (this.scanTypeList == null) {
      this.scanTypeList = new ArrayList<>();
    }
    this.scanTypeList.add(scanTypeListItem);
    return this;
  }

  /**
   * Contains all values used as the scanner “type” in the request.
   * @return scanTypeList
   */
  @javax.annotation.Nullable
  public List<IserverScannerParamsScanTypeListInner> getScanTypeList() {
    return scanTypeList;
  }

  public void setScanTypeList(@javax.annotation.Nullable List<IserverScannerParamsScanTypeListInner> scanTypeList) {
    this.scanTypeList = scanTypeList;
  }


  public IserverScannerParams instrumentList(@javax.annotation.Nullable List<IserverScannerParamsInstrumentListInner> instrumentList) {
    this.instrumentList = instrumentList;
    return this;
  }

  public IserverScannerParams addInstrumentListItem(IserverScannerParamsInstrumentListInner instrumentListItem) {
    if (this.instrumentList == null) {
      this.instrumentList = new ArrayList<>();
    }
    this.instrumentList.add(instrumentListItem);
    return this;
  }

  /**
   * Contains all values relevant to the scanner “instrument” request field.
   * @return instrumentList
   */
  @javax.annotation.Nullable
  public List<IserverScannerParamsInstrumentListInner> getInstrumentList() {
    return instrumentList;
  }

  public void setInstrumentList(@javax.annotation.Nullable List<IserverScannerParamsInstrumentListInner> instrumentList) {
    this.instrumentList = instrumentList;
  }


  public IserverScannerParams filterList(@javax.annotation.Nullable List<IserverScannerParamsFilterListInner> filterList) {
    this.filterList = filterList;
    return this;
  }

  public IserverScannerParams addFilterListItem(IserverScannerParamsFilterListInner filterListItem) {
    if (this.filterList == null) {
      this.filterList = new ArrayList<>();
    }
    this.filterList.add(filterListItem);
    return this;
  }

  /**
   * Get filterList
   * @return filterList
   */
  @javax.annotation.Nullable
  public List<IserverScannerParamsFilterListInner> getFilterList() {
    return filterList;
  }

  public void setFilterList(@javax.annotation.Nullable List<IserverScannerParamsFilterListInner> filterList) {
    this.filterList = filterList;
  }


  public IserverScannerParams locationTree(@javax.annotation.Nullable List<IserverScannerParamsLocationTreeInner> locationTree) {
    this.locationTree = locationTree;
    return this;
  }

  public IserverScannerParams addLocationTreeItem(IserverScannerParamsLocationTreeInner locationTreeItem) {
    if (this.locationTree == null) {
      this.locationTree = new ArrayList<>();
    }
    this.locationTree.add(locationTreeItem);
    return this;
  }

  /**
   * Contains all values relevant to the location field of the market scanner request.
   * @return locationTree
   */
  @javax.annotation.Nullable
  public List<IserverScannerParamsLocationTreeInner> getLocationTree() {
    return locationTree;
  }

  public void setLocationTree(@javax.annotation.Nullable List<IserverScannerParamsLocationTreeInner> locationTree) {
    this.locationTree = locationTree;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IserverScannerParams iserverScannerParams = (IserverScannerParams) o;
    return Objects.equals(this.scanTypeList, iserverScannerParams.scanTypeList) &&
        Objects.equals(this.instrumentList, iserverScannerParams.instrumentList) &&
        Objects.equals(this.filterList, iserverScannerParams.filterList) &&
        Objects.equals(this.locationTree, iserverScannerParams.locationTree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scanTypeList, instrumentList, filterList, locationTree);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IserverScannerParams {\n");
    sb.append("    scanTypeList: ").append(toIndentedString(scanTypeList)).append("\n");
    sb.append("    instrumentList: ").append(toIndentedString(instrumentList)).append("\n");
    sb.append("    filterList: ").append(toIndentedString(filterList)).append("\n");
    sb.append("    locationTree: ").append(toIndentedString(locationTree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scan_type_list");
    openapiFields.add("instrument_list");
    openapiFields.add("filter_list");
    openapiFields.add("location_tree");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IserverScannerParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IserverScannerParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IserverScannerParams is not found in the empty JSON string", IserverScannerParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IserverScannerParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IserverScannerParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("scan_type_list") != null && !jsonObj.get("scan_type_list").isJsonNull()) {
        JsonArray jsonArrayscanTypeList = jsonObj.getAsJsonArray("scan_type_list");
        if (jsonArrayscanTypeList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scan_type_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scan_type_list` to be an array in the JSON string but got `%s`", jsonObj.get("scan_type_list").toString()));
          }

          // validate the optional field `scan_type_list` (array)
          for (int i = 0; i < jsonArrayscanTypeList.size(); i++) {
            IserverScannerParamsScanTypeListInner.validateJsonElement(jsonArrayscanTypeList.get(i));
          };
        }
      }
      if (jsonObj.get("instrument_list") != null && !jsonObj.get("instrument_list").isJsonNull()) {
        JsonArray jsonArrayinstrumentList = jsonObj.getAsJsonArray("instrument_list");
        if (jsonArrayinstrumentList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instrument_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instrument_list` to be an array in the JSON string but got `%s`", jsonObj.get("instrument_list").toString()));
          }

          // validate the optional field `instrument_list` (array)
          for (int i = 0; i < jsonArrayinstrumentList.size(); i++) {
            IserverScannerParamsInstrumentListInner.validateJsonElement(jsonArrayinstrumentList.get(i));
          };
        }
      }
      if (jsonObj.get("filter_list") != null && !jsonObj.get("filter_list").isJsonNull()) {
        JsonArray jsonArrayfilterList = jsonObj.getAsJsonArray("filter_list");
        if (jsonArrayfilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filter_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filter_list` to be an array in the JSON string but got `%s`", jsonObj.get("filter_list").toString()));
          }

          // validate the optional field `filter_list` (array)
          for (int i = 0; i < jsonArrayfilterList.size(); i++) {
            IserverScannerParamsFilterListInner.validateJsonElement(jsonArrayfilterList.get(i));
          };
        }
      }
      if (jsonObj.get("location_tree") != null && !jsonObj.get("location_tree").isJsonNull()) {
        JsonArray jsonArraylocationTree = jsonObj.getAsJsonArray("location_tree");
        if (jsonArraylocationTree != null) {
          // ensure the json data is an array
          if (!jsonObj.get("location_tree").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `location_tree` to be an array in the JSON string but got `%s`", jsonObj.get("location_tree").toString()));
          }

          // validate the optional field `location_tree` (array)
          for (int i = 0; i < jsonArraylocationTree.size(); i++) {
            IserverScannerParamsLocationTreeInner.validateJsonElement(jsonArraylocationTree.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IserverScannerParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IserverScannerParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IserverScannerParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IserverScannerParams.class));

       return (TypeAdapter<T>) new TypeAdapter<IserverScannerParams>() {
           @Override
           public void write(JsonWriter out, IserverScannerParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IserverScannerParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IserverScannerParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IserverScannerParams
   * @throws IOException if the JSON string is invalid with respect to IserverScannerParams
   */
  public static IserverScannerParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IserverScannerParams.class);
  }

  /**
   * Convert an instance of IserverScannerParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

