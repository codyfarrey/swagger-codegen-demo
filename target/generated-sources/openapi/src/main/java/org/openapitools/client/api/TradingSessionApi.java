/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BrokerageSessionInitRequest;
import org.openapitools.client.model.BrokerageSessionStatus;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IserverReauthenticateGet200Response;
import org.openapitools.client.model.LogoutPost200Response;
import org.openapitools.client.model.SsoValidateResponse;
import org.openapitools.client.model.TickleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingSessionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingSessionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingSessionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iserverAuthSsodhInitPost
     * @param brokerageSessionInitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAuthSsodhInitPostCall(BrokerageSessionInitRequest brokerageSessionInitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brokerageSessionInitRequest;

        // create path and map variables
        String localVarPath = "/iserver/auth/ssodh/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAuthSsodhInitPostValidateBeforeCall(BrokerageSessionInitRequest brokerageSessionInitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brokerageSessionInitRequest' is set
        if (brokerageSessionInitRequest == null) {
            throw new ApiException("Missing the required parameter 'brokerageSessionInitRequest' when calling iserverAuthSsodhInitPost(Async)");
        }

        return iserverAuthSsodhInitPostCall(brokerageSessionInitRequest, _callback);

    }

    /**
     * Initialize Brokerage Session.
     * After retrieving the access token and subsequent Live Session Token, customers can initialize their brokerage session with the ssodh/init endpoint.
     * @param brokerageSessionInitRequest  (required)
     * @return BrokerageSessionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public BrokerageSessionStatus iserverAuthSsodhInitPost(BrokerageSessionInitRequest brokerageSessionInitRequest) throws ApiException {
        ApiResponse<BrokerageSessionStatus> localVarResp = iserverAuthSsodhInitPostWithHttpInfo(brokerageSessionInitRequest);
        return localVarResp.getData();
    }

    /**
     * Initialize Brokerage Session.
     * After retrieving the access token and subsequent Live Session Token, customers can initialize their brokerage session with the ssodh/init endpoint.
     * @param brokerageSessionInitRequest  (required)
     * @return ApiResponse&lt;BrokerageSessionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrokerageSessionStatus> iserverAuthSsodhInitPostWithHttpInfo(BrokerageSessionInitRequest brokerageSessionInitRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAuthSsodhInitPostValidateBeforeCall(brokerageSessionInitRequest, null);
        Type localVarReturnType = new TypeToken<BrokerageSessionStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Brokerage Session. (asynchronously)
     * After retrieving the access token and subsequent Live Session Token, customers can initialize their brokerage session with the ssodh/init endpoint.
     * @param brokerageSessionInitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAuthSsodhInitPostAsync(BrokerageSessionInitRequest brokerageSessionInitRequest, final ApiCallback<BrokerageSessionStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAuthSsodhInitPostValidateBeforeCall(brokerageSessionInitRequest, _callback);
        Type localVarReturnType = new TypeToken<BrokerageSessionStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAuthStatusPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed status of the Brokerage session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAuthStatusPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/auth/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAuthStatusPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverAuthStatusPostCall(_callback);

    }

    /**
     * Brokerage Session Auth Status
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated.
     * @return BrokerageSessionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed status of the Brokerage session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public BrokerageSessionStatus iserverAuthStatusPost() throws ApiException {
        ApiResponse<BrokerageSessionStatus> localVarResp = iserverAuthStatusPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Brokerage Session Auth Status
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated.
     * @return ApiResponse&lt;BrokerageSessionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed status of the Brokerage session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrokerageSessionStatus> iserverAuthStatusPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverAuthStatusPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BrokerageSessionStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Brokerage Session Auth Status (asynchronously)
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detailed status of the Brokerage session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAuthStatusPostAsync(final ApiCallback<BrokerageSessionStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAuthStatusPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BrokerageSessionStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverReauthenticateGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call iserverReauthenticateGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/reauthenticate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverReauthenticateGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverReauthenticateGetCall(_callback);

    }

    /**
     * Re-authenticate The Brokerage Session
     * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid brokerage session.
     * @return IserverReauthenticateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public IserverReauthenticateGet200Response iserverReauthenticateGet() throws ApiException {
        ApiResponse<IserverReauthenticateGet200Response> localVarResp = iserverReauthenticateGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Re-authenticate The Brokerage Session
     * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid brokerage session.
     * @return ApiResponse&lt;IserverReauthenticateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<IserverReauthenticateGet200Response> iserverReauthenticateGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverReauthenticateGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IserverReauthenticateGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-authenticate The Brokerage Session (asynchronously)
     * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid brokerage session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call iserverReauthenticateGetAsync(final ApiCallback<IserverReauthenticateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverReauthenticateGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IserverReauthenticateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutPostCall(_callback);

    }

    /**
     * Logout Of The Current Session.
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     * @return LogoutPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public LogoutPost200Response logoutPost() throws ApiException {
        ApiResponse<LogoutPost200Response> localVarResp = logoutPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Logout Of The Current Session.
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     * @return ApiResponse&lt;LogoutPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutPost200Response> logoutPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogoutPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout Of The Current Session. (asynchronously)
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutPostAsync(final ApiCallback<LogoutPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogoutPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ssoValidateGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssoValidateGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sso/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ssoValidateGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return ssoValidateGetCall(_callback);

    }

    /**
     * Validate SSO
     * Validates the current session for the SSO user.
     * @return SsoValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public SsoValidateResponse ssoValidateGet() throws ApiException {
        ApiResponse<SsoValidateResponse> localVarResp = ssoValidateGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Validate SSO
     * Validates the current session for the SSO user.
     * @return ApiResponse&lt;SsoValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SsoValidateResponse> ssoValidateGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ssoValidateGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SsoValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate SSO (asynchronously)
     * Validates the current session for the SSO user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ssoValidateGetAsync(final ApiCallback<SsoValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ssoValidateGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SsoValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ticklePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticklePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tickle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ticklePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return ticklePostCall(_callback);

    }

    /**
     * Server Ping.
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending. It is expected to call this endpoint approximately every 60 seconds to maintain the connection to the brokerage session.
     * @return TickleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public TickleResponse ticklePost() throws ApiException {
        ApiResponse<TickleResponse> localVarResp = ticklePostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Server Ping.
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending. It is expected to call this endpoint approximately every 60 seconds to maintain the connection to the brokerage session.
     * @return ApiResponse&lt;TickleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TickleResponse> ticklePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = ticklePostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TickleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Server Ping. (asynchronously)
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending. It is expected to call this endpoint approximately every 60 seconds to maintain the connection to the brokerage session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ticklePostAsync(final ApiCallback<TickleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ticklePostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TickleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
