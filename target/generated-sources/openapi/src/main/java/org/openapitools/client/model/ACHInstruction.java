/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ACHInstruction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class ACHInstruction {
  public static final String SERIALIZED_NAME_CUST_INIT_ACH = "custInitAch";
  @SerializedName(SERIALIZED_NAME_CUST_INIT_ACH)
  @javax.annotation.Nullable
  private Boolean custInitAch;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CREDIT("CREDIT"),
    
    DEBIT("DEBIT"),
    
    DEBIT_CREDIT("DEBIT_CREDIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  @javax.annotation.Nullable
  private String bankName;

  public static final String SERIALIZED_NAME_IB_ACCOUNT = "ibAccount";
  @SerializedName(SERIALIZED_NAME_IB_ACCOUNT)
  @javax.annotation.Nullable
  private String ibAccount;

  public static final String SERIALIZED_NAME_BANK_COUNTRY = "bankCountry";
  @SerializedName(SERIALIZED_NAME_BANK_COUNTRY)
  @javax.annotation.Nullable
  private String bankCountry;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    USD("USD"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    CAD("CAD"),
    
    JPY("JPY"),
    
    HKD("HKD"),
    
    AUD("AUD"),
    
    CHF("CHF"),
    
    MXN("MXN"),
    
    SEK("SEK"),
    
    NZD("NZD"),
    
    HUF("HUF"),
    
    CZK("CZK"),
    
    CNH("CNH"),
    
    DKK("DKK"),
    
    RUB("RUB"),
    
    ILS("ILS"),
    
    NOK("NOK"),
    
    SGD("SGD"),
    
    PLN("PLN"),
    
    ZAR("ZAR"),
    
    AED("AED"),
    
    KRW("KRW"),
    
    SAR("SAR"),
    
    TRY("TRY");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  @javax.annotation.Nullable
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  @javax.annotation.Nullable
  private String accountNumber;

  /**
   * Gets or Sets accountType
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    SAVINGS("savings"),
    
    CHECKING("checking");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  @javax.annotation.Nullable
  private AccountTypeEnum accountType;

  public ACHInstruction() {
  }

  public ACHInstruction custInitAch(@javax.annotation.Nullable Boolean custInitAch) {
    this.custInitAch = custInitAch;
    return this;
  }

  /**
   * Get custInitAch
   * @return custInitAch
   */
  @javax.annotation.Nullable
  public Boolean getCustInitAch() {
    return custInitAch;
  }

  public void setCustInitAch(@javax.annotation.Nullable Boolean custInitAch) {
    this.custInitAch = custInitAch;
  }


  public ACHInstruction type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public ACHInstruction name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ACHInstruction bankName(@javax.annotation.Nullable String bankName) {
    this.bankName = bankName;
    return this;
  }

  /**
   * Get bankName
   * @return bankName
   */
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }

  public void setBankName(@javax.annotation.Nullable String bankName) {
    this.bankName = bankName;
  }


  public ACHInstruction ibAccount(@javax.annotation.Nullable String ibAccount) {
    this.ibAccount = ibAccount;
    return this;
  }

  /**
   * Get ibAccount
   * @return ibAccount
   */
  @javax.annotation.Nullable
  public String getIbAccount() {
    return ibAccount;
  }

  public void setIbAccount(@javax.annotation.Nullable String ibAccount) {
    this.ibAccount = ibAccount;
  }


  public ACHInstruction bankCountry(@javax.annotation.Nullable String bankCountry) {
    this.bankCountry = bankCountry;
    return this;
  }

  /**
   * Get bankCountry
   * @return bankCountry
   */
  @javax.annotation.Nullable
  public String getBankCountry() {
    return bankCountry;
  }

  public void setBankCountry(@javax.annotation.Nullable String bankCountry) {
    this.bankCountry = bankCountry;
  }


  public ACHInstruction currency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
  }


  public ACHInstruction routingNumber(@javax.annotation.Nullable String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * Get routingNumber
   * @return routingNumber
   */
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(@javax.annotation.Nullable String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public ACHInstruction accountNumber(@javax.annotation.Nullable String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Get accountNumber
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(@javax.annotation.Nullable String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public ACHInstruction accountType(@javax.annotation.Nullable AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(@javax.annotation.Nullable AccountTypeEnum accountType) {
    this.accountType = accountType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ACHInstruction acHInstruction = (ACHInstruction) o;
    return Objects.equals(this.custInitAch, acHInstruction.custInitAch) &&
        Objects.equals(this.type, acHInstruction.type) &&
        Objects.equals(this.name, acHInstruction.name) &&
        Objects.equals(this.bankName, acHInstruction.bankName) &&
        Objects.equals(this.ibAccount, acHInstruction.ibAccount) &&
        Objects.equals(this.bankCountry, acHInstruction.bankCountry) &&
        Objects.equals(this.currency, acHInstruction.currency) &&
        Objects.equals(this.routingNumber, acHInstruction.routingNumber) &&
        Objects.equals(this.accountNumber, acHInstruction.accountNumber) &&
        Objects.equals(this.accountType, acHInstruction.accountType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(custInitAch, type, name, bankName, ibAccount, bankCountry, currency, routingNumber, accountNumber, accountType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ACHInstruction {\n");
    sb.append("    custInitAch: ").append(toIndentedString(custInitAch)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    ibAccount: ").append(toIndentedString(ibAccount)).append("\n");
    sb.append("    bankCountry: ").append(toIndentedString(bankCountry)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custInitAch");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("bankName");
    openapiFields.add("ibAccount");
    openapiFields.add("bankCountry");
    openapiFields.add("currency");
    openapiFields.add("routingNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("accountType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ACHInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ACHInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ACHInstruction is not found in the empty JSON string", ACHInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ACHInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ACHInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("ibAccount") != null && !jsonObj.get("ibAccount").isJsonNull()) && !jsonObj.get("ibAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibAccount").toString()));
      }
      if ((jsonObj.get("bankCountry") != null && !jsonObj.get("bankCountry").isJsonNull()) && !jsonObj.get("bankCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCountry").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field `accountType`
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) {
        AccountTypeEnum.validateJsonElement(jsonObj.get("accountType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ACHInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ACHInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ACHInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ACHInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<ACHInstruction>() {
           @Override
           public void write(JsonWriter out, ACHInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ACHInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ACHInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ACHInstruction
   * @throws IOException if the JSON string is invalid with respect to ACHInstruction
   */
  public static ACHInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ACHInstruction.class);
  }

  /**
   * Convert an instance of ACHInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

