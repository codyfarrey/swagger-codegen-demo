/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class NotificationsInner {
  public static final String SERIALIZED_NAME_D = "D";
  @SerializedName(SERIALIZED_NAME_D)
  @javax.annotation.Nullable
  private String D;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  @javax.annotation.Nullable
  private String ID;

  public static final String SERIALIZED_NAME_F_C = "FC";
  @SerializedName(SERIALIZED_NAME_F_C)
  @javax.annotation.Nullable
  private String FC;

  public static final String SERIALIZED_NAME_M_D = "MD";
  @SerializedName(SERIALIZED_NAME_M_D)
  @javax.annotation.Nullable
  private String MD;

  public static final String SERIALIZED_NAME_M_S = "MS";
  @SerializedName(SERIALIZED_NAME_M_S)
  @javax.annotation.Nullable
  private String MS;

  public static final String SERIALIZED_NAME_R = "R";
  @SerializedName(SERIALIZED_NAME_R)
  @javax.annotation.Nullable
  private String R;

  public NotificationsInner() {
  }

  public NotificationsInner D(@javax.annotation.Nullable String D) {
    this.D = D;
    return this;
  }

  /**
   * Notification date as an epoch string.
   * @return D
   */
  @javax.annotation.Nullable
  public String getD() {
    return D;
  }

  public void setD(@javax.annotation.Nullable String D) {
    this.D = D;
  }


  public NotificationsInner ID(@javax.annotation.Nullable String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Unique way to reference the notification.
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(@javax.annotation.Nullable String ID) {
    this.ID = ID;
  }


  public NotificationsInner FC(@javax.annotation.Nullable String FC) {
    this.FC = FC;
    return this;
  }

  /**
   * FYI code, we can use it to find whether the disclaimer is accepted or not in settings
   * @return FC
   */
  @javax.annotation.Nullable
  public String getFC() {
    return FC;
  }

  public void setFC(@javax.annotation.Nullable String FC) {
    this.FC = FC;
  }


  public NotificationsInner MD(@javax.annotation.Nullable String MD) {
    this.MD = MD;
    return this;
  }

  /**
   * Content of notification.
   * @return MD
   */
  @javax.annotation.Nullable
  public String getMD() {
    return MD;
  }

  public void setMD(@javax.annotation.Nullable String MD) {
    this.MD = MD;
  }


  public NotificationsInner MS(@javax.annotation.Nullable String MS) {
    this.MS = MS;
    return this;
  }

  /**
   * Title of notification.
   * @return MS
   */
  @javax.annotation.Nullable
  public String getMS() {
    return MS;
  }

  public void setMS(@javax.annotation.Nullable String MS) {
    this.MS = MS;
  }


  public NotificationsInner R(@javax.annotation.Nullable String R) {
    this.R = R;
    return this;
  }

  /**
   * Return if the notification was read or not. Value Format: 0: Disabled; 1: Enabled. 
   * @return R
   */
  @javax.annotation.Nullable
  public String getR() {
    return R;
  }

  public void setR(@javax.annotation.Nullable String R) {
    this.R = R;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationsInner notificationsInner = (NotificationsInner) o;
    return Objects.equals(this.D, notificationsInner.D) &&
        Objects.equals(this.ID, notificationsInner.ID) &&
        Objects.equals(this.FC, notificationsInner.FC) &&
        Objects.equals(this.MD, notificationsInner.MD) &&
        Objects.equals(this.MS, notificationsInner.MS) &&
        Objects.equals(this.R, notificationsInner.R);
  }

  @Override
  public int hashCode() {
    return Objects.hash(D, ID, FC, MD, MS, R);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationsInner {\n");
    sb.append("    D: ").append(toIndentedString(D)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    FC: ").append(toIndentedString(FC)).append("\n");
    sb.append("    MD: ").append(toIndentedString(MD)).append("\n");
    sb.append("    MS: ").append(toIndentedString(MS)).append("\n");
    sb.append("    R: ").append(toIndentedString(R)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("D");
    openapiFields.add("ID");
    openapiFields.add("FC");
    openapiFields.add("MD");
    openapiFields.add("MS");
    openapiFields.add("R");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationsInner is not found in the empty JSON string", NotificationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("D") != null && !jsonObj.get("D").isJsonNull()) && !jsonObj.get("D").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `D` to be a primitive type in the JSON string but got `%s`", jsonObj.get("D").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("FC") != null && !jsonObj.get("FC").isJsonNull()) && !jsonObj.get("FC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FC").toString()));
      }
      if ((jsonObj.get("MD") != null && !jsonObj.get("MD").isJsonNull()) && !jsonObj.get("MD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MD").toString()));
      }
      if ((jsonObj.get("MS") != null && !jsonObj.get("MS").isJsonNull()) && !jsonObj.get("MS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MS").toString()));
      }
      if ((jsonObj.get("R") != null && !jsonObj.get("R").isJsonNull()) && !jsonObj.get("R").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `R` to be a primitive type in the JSON string but got `%s`", jsonObj.get("R").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationsInner>() {
           @Override
           public void write(JsonWriter out, NotificationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationsInner
   * @throws IOException if the JSON string is invalid with respect to NotificationsInner
   */
  public static NotificationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationsInner.class);
  }

  /**
   * Convert an instance of NotificationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

