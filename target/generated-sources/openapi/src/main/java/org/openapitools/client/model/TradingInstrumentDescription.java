/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TradingInstrumentDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TradingInstrumentDescription {
  /**
   * Gets or Sets securityIdType
   */
  @JsonAdapter(SecurityIdTypeEnum.Adapter.class)
  public enum SecurityIdTypeEnum {
    CUSIP("CUSIP"),
    
    ISIN("ISIN"),
    
    CASH("CASH");

    private String value;

    SecurityIdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityIdTypeEnum fromValue(String value) {
      for (SecurityIdTypeEnum b : SecurityIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityIdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityIdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityIdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityIdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecurityIdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_ID_TYPE = "securityIdType";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID_TYPE)
  @javax.annotation.Nonnull
  private SecurityIdTypeEnum securityIdType;

  public static final String SERIALIZED_NAME_SECURITY_ID = "securityId";
  @SerializedName(SERIALIZED_NAME_SECURITY_ID)
  @javax.annotation.Nonnull
  private String securityId;

  /**
   * Gets or Sets assetType
   */
  @JsonAdapter(AssetTypeEnum.Adapter.class)
  public enum AssetTypeEnum {
    STK("STK"),
    
    CASH("CASH"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetTypeEnum fromValue(String value) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  @javax.annotation.Nonnull
  private AssetTypeEnum assetType;

  public TradingInstrumentDescription() {
  }

  public TradingInstrumentDescription securityIdType(@javax.annotation.Nonnull SecurityIdTypeEnum securityIdType) {
    this.securityIdType = securityIdType;
    return this;
  }

  /**
   * Get securityIdType
   * @return securityIdType
   */
  @javax.annotation.Nonnull
  public SecurityIdTypeEnum getSecurityIdType() {
    return securityIdType;
  }

  public void setSecurityIdType(@javax.annotation.Nonnull SecurityIdTypeEnum securityIdType) {
    this.securityIdType = securityIdType;
  }


  public TradingInstrumentDescription securityId(@javax.annotation.Nonnull String securityId) {
    this.securityId = securityId;
    return this;
  }

  /**
   * Get securityId
   * @return securityId
   */
  @javax.annotation.Nonnull
  public String getSecurityId() {
    return securityId;
  }

  public void setSecurityId(@javax.annotation.Nonnull String securityId) {
    this.securityId = securityId;
  }


  public TradingInstrumentDescription assetType(@javax.annotation.Nonnull AssetTypeEnum assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Get assetType
   * @return assetType
   */
  @javax.annotation.Nonnull
  public AssetTypeEnum getAssetType() {
    return assetType;
  }

  public void setAssetType(@javax.annotation.Nonnull AssetTypeEnum assetType) {
    this.assetType = assetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradingInstrumentDescription tradingInstrumentDescription = (TradingInstrumentDescription) o;
    return Objects.equals(this.securityIdType, tradingInstrumentDescription.securityIdType) &&
        Objects.equals(this.securityId, tradingInstrumentDescription.securityId) &&
        Objects.equals(this.assetType, tradingInstrumentDescription.assetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(securityIdType, securityId, assetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradingInstrumentDescription {\n");
    sb.append("    securityIdType: ").append(toIndentedString(securityIdType)).append("\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("securityIdType");
    openapiFields.add("securityId");
    openapiFields.add("assetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("securityIdType");
    openapiRequiredFields.add("securityId");
    openapiRequiredFields.add("assetType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TradingInstrumentDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradingInstrumentDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradingInstrumentDescription is not found in the empty JSON string", TradingInstrumentDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradingInstrumentDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradingInstrumentDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TradingInstrumentDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("securityIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityIdType").toString()));
      }
      // validate the required field `securityIdType`
      SecurityIdTypeEnum.validateJsonElement(jsonObj.get("securityIdType"));
      if (!jsonObj.get("securityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityId").toString()));
      }
      if (!jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      // validate the required field `assetType`
      AssetTypeEnum.validateJsonElement(jsonObj.get("assetType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradingInstrumentDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradingInstrumentDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradingInstrumentDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradingInstrumentDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<TradingInstrumentDescription>() {
           @Override
           public void write(JsonWriter out, TradingInstrumentDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradingInstrumentDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TradingInstrumentDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TradingInstrumentDescription
   * @throws IOException if the JSON string is invalid with respect to TradingInstrumentDescription
   */
  public static TradingInstrumentDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradingInstrumentDescription.class);
  }

  /**
   * Convert an instance of TradingInstrumentDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

