/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountDetailsResponse;
import org.openapitools.client.model.AccountManagementRequestsPayload;
import org.openapitools.client.model.AccountStatusBulkResponse;
import org.openapitools.client.model.AccountStatusRequest;
import org.openapitools.client.model.AccountStatusResponse;
import org.openapitools.client.model.ApplicationPayload;
import org.openapitools.client.model.Au10TixDetailResponse;
import org.openapitools.client.model.BusinessRejectResponse;
import org.openapitools.client.model.ForbiddenRequestResponse;
import org.openapitools.client.model.GwApiV1AccountsAccountIdTasksGet200Response;
import org.openapitools.client.model.GwApiV1AccountsClosePostRequest;
import org.openapitools.client.model.GwApiV1AccountsGet200Response;
import org.openapitools.client.model.InstructionResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.LoginMessageRequest;
import org.openapitools.client.model.LoginMessageResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.ProblemDetailResponse;
import org.openapitools.client.model.ProcessDocuments;
import org.openapitools.client.model.RequestInfoResponse;
import org.openapitools.client.model.StatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountManagementAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountManagementAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountManagementAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gwApiV1AccountsAccountIdDetailsGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> View information associated with account including contact data, financial information and trading configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdDetailsGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/{accountId}/details"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsAccountIdDetailsGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1AccountsAccountIdDetailsGet(Async)");
        }

        return gwApiV1AccountsAccountIdDetailsGetCall(accountId, _callback);

    }

    /**
     * Get Account Information
     * &lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return AccountDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> View information associated with account including contact data, financial information and trading configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public AccountDetailsResponse gwApiV1AccountsAccountIdDetailsGet(String accountId) throws ApiException {
        ApiResponse<AccountDetailsResponse> localVarResp = gwApiV1AccountsAccountIdDetailsGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Account Information
     * &lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return ApiResponse&lt;AccountDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> View information associated with account including contact data, financial information and trading configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDetailsResponse> gwApiV1AccountsAccountIdDetailsGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdDetailsGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Information (asynchronously)
     * &lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> View information associated with account including contact data, financial information and trading configuration. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdDetailsGetAsync(String accountId, final ApiCallback<AccountDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdDetailsGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsAccountIdKycGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Generate URL address to complete real-time KYC verification using Au10Tix </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdKycGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/{accountId}/kyc"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsAccountIdKycGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1AccountsAccountIdKycGet(Async)");
        }

        return gwApiV1AccountsAccountIdKycGetCall(accountId, _callback);

    }

    /**
     * Retrieve Au10Tix URL
     * Generate URL address to complete real-time KYC verification using Au10Tix&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return Au10TixDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Generate URL address to complete real-time KYC verification using Au10Tix </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public Au10TixDetailResponse gwApiV1AccountsAccountIdKycGet(String accountId) throws ApiException {
        ApiResponse<Au10TixDetailResponse> localVarResp = gwApiV1AccountsAccountIdKycGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Au10Tix URL
     * Generate URL address to complete real-time KYC verification using Au10Tix&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return ApiResponse&lt;Au10TixDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Generate URL address to complete real-time KYC verification using Au10Tix </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Au10TixDetailResponse> gwApiV1AccountsAccountIdKycGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdKycGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Au10TixDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Au10Tix URL (asynchronously)
     * Generate URL address to complete real-time KYC verification using Au10Tix&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Generate URL address to complete real-time KYC verification using Au10Tix </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdKycGetAsync(String accountId, final ApiCallback<Au10TixDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdKycGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Au10TixDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsAccountIdLoginMessagesGet
     * @param accountId  (required)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query login messages assigned by accountId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdLoginMessagesGetCall(String accountId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/{accountId}/login-messages"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsAccountIdLoginMessagesGetValidateBeforeCall(String accountId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1AccountsAccountIdLoginMessagesGet(Async)");
        }

        return gwApiV1AccountsAccountIdLoginMessagesGetCall(accountId, type, _callback);

    }

    /**
     * Get Login Message By Account
     * Query login messages assigned by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional)
     * @return LoginMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query login messages assigned by accountId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public LoginMessageResponse gwApiV1AccountsAccountIdLoginMessagesGet(String accountId, String type) throws ApiException {
        ApiResponse<LoginMessageResponse> localVarResp = gwApiV1AccountsAccountIdLoginMessagesGetWithHttpInfo(accountId, type);
        return localVarResp.getData();
    }

    /**
     * Get Login Message By Account
     * Query login messages assigned by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional)
     * @return ApiResponse&lt;LoginMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query login messages assigned by accountId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginMessageResponse> gwApiV1AccountsAccountIdLoginMessagesGetWithHttpInfo(String accountId, String type) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdLoginMessagesGetValidateBeforeCall(accountId, type, null);
        Type localVarReturnType = new TypeToken<LoginMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login Message By Account (asynchronously)
     * Query login messages assigned by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query login messages assigned by accountId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdLoginMessagesGetAsync(String accountId, String type, final ApiCallback<LoginMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdLoginMessagesGetValidateBeforeCall(accountId, type, _callback);
        Type localVarReturnType = new TypeToken<LoginMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsAccountIdStatusGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of account by accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdStatusGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/{accountId}/status"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsAccountIdStatusGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1AccountsAccountIdStatusGet(Async)");
        }

        return gwApiV1AccountsAccountIdStatusGetCall(accountId, _callback);

    }

    /**
     * Get Status By Account
     * Query status of account by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return AccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of account by accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public AccountStatusResponse gwApiV1AccountsAccountIdStatusGet(String accountId) throws ApiException {
        ApiResponse<AccountStatusResponse> localVarResp = gwApiV1AccountsAccountIdStatusGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Status By Account
     * Query status of account by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @return ApiResponse&lt;AccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of account by accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStatusResponse> gwApiV1AccountsAccountIdStatusGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdStatusGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status By Account (asynchronously)
     * Query status of account by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of account by accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdStatusGetAsync(String accountId, final ApiCallback<AccountStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdStatusGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsAccountIdTasksGet
     * @param accountId  (required)
     * @param type  (optional, default to registration)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query registration tasks assigned to account and pending tasks that are required for account approval </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdTasksGetCall(String accountId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/{accountId}/tasks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsAccountIdTasksGetValidateBeforeCall(String accountId, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling gwApiV1AccountsAccountIdTasksGet(Async)");
        }

        return gwApiV1AccountsAccountIdTasksGetCall(accountId, type, _callback);

    }

    /**
     * Get Registration Tasks
     * Query registration tasks assigned to account and pending tasks that are required for account approval&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional, default to registration)
     * @return GwApiV1AccountsAccountIdTasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query registration tasks assigned to account and pending tasks that are required for account approval </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1AccountsAccountIdTasksGet200Response gwApiV1AccountsAccountIdTasksGet(String accountId, String type) throws ApiException {
        ApiResponse<GwApiV1AccountsAccountIdTasksGet200Response> localVarResp = gwApiV1AccountsAccountIdTasksGetWithHttpInfo(accountId, type);
        return localVarResp.getData();
    }

    /**
     * Get Registration Tasks
     * Query registration tasks assigned to account and pending tasks that are required for account approval&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional, default to registration)
     * @return ApiResponse&lt;GwApiV1AccountsAccountIdTasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query registration tasks assigned to account and pending tasks that are required for account approval </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1AccountsAccountIdTasksGet200Response> gwApiV1AccountsAccountIdTasksGetWithHttpInfo(String accountId, String type) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdTasksGetValidateBeforeCall(accountId, type, null);
        Type localVarReturnType = new TypeToken<GwApiV1AccountsAccountIdTasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Registration Tasks (asynchronously)
     * Query registration tasks assigned to account and pending tasks that are required for account approval&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (required)
     * @param type  (optional, default to registration)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query registration tasks assigned to account and pending tasks that are required for account approval </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsAccountIdTasksGetAsync(String accountId, String type, final ApiCallback<GwApiV1AccountsAccountIdTasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsAccountIdTasksGetValidateBeforeCall(accountId, type, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1AccountsAccountIdTasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsClosePost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1AccountsClosePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsClosePostCall(String clientId, GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1AccountsClosePostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/close"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsClosePostValidateBeforeCall(String clientId, GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1AccountsClosePost(Async)");
        }

        // verify the required parameter 'gwApiV1AccountsClosePostRequest' is set
        if (gwApiV1AccountsClosePostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1AccountsClosePostRequest' when calling gwApiV1AccountsClosePost(Async)");
        }

        return gwApiV1AccountsClosePostCall(clientId, gwApiV1AccountsClosePostRequest, _callback);

    }

    /**
     * Close Account
     * Submit request to close account that is opened.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1AccountsClosePostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1AccountsClosePost(String clientId, GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1AccountsClosePostWithHttpInfo(clientId, gwApiV1AccountsClosePostRequest);
        return localVarResp.getData();
    }

    /**
     * Close Account
     * Submit request to close account that is opened.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1AccountsClosePostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1AccountsClosePostWithHttpInfo(String clientId, GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsClosePostValidateBeforeCall(clientId, gwApiV1AccountsClosePostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Close Account (asynchronously)
     * Submit request to close account that is opened.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1AccountsClosePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsClosePostAsync(String clientId, GwApiV1AccountsClosePostRequest gwApiV1AccountsClosePostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsClosePostValidateBeforeCall(clientId, gwApiV1AccountsClosePostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsDocumentsPost
     * @param processDocuments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit standard agreements and disclosures </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsDocumentsPostCall(ProcessDocuments processDocuments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processDocuments;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsDocumentsPostValidateBeforeCall(ProcessDocuments processDocuments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processDocuments' is set
        if (processDocuments == null) {
            throw new ApiException("Missing the required parameter 'processDocuments' when calling gwApiV1AccountsDocumentsPost(Async)");
        }

        return gwApiV1AccountsDocumentsPostCall(processDocuments, _callback);

    }

    /**
     * Submit General Agreements And Disclosures
     * Provides mechanism to submit Agreements and Disclosures to IBKR once a day instead of with each application. We store these documents on the servers and will use them for new application requests submitted that day.&lt;ul&gt;&lt;li&gt;Documents will need to be submitted once a day (before the Applications are submitted). PDFs will be displayed and submitted as is- no changes/edits will be made to the actual PDF files.&lt;/li&gt;&lt;li&gt;This end-point will not process any Tax Form Documents. Tax Form document should be submitted with every application&lt;/li&gt;&lt;li&gt;If submitted in the morning, you only need to include the Tax Form attachment for each applicant. Otherwise, you will need to include PDFs with each application (Create Account).&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param processDocuments  (required)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit standard agreements and disclosures </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse gwApiV1AccountsDocumentsPost(ProcessDocuments processDocuments) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = gwApiV1AccountsDocumentsPostWithHttpInfo(processDocuments);
        return localVarResp.getData();
    }

    /**
     * Submit General Agreements And Disclosures
     * Provides mechanism to submit Agreements and Disclosures to IBKR once a day instead of with each application. We store these documents on the servers and will use them for new application requests submitted that day.&lt;ul&gt;&lt;li&gt;Documents will need to be submitted once a day (before the Applications are submitted). PDFs will be displayed and submitted as is- no changes/edits will be made to the actual PDF files.&lt;/li&gt;&lt;li&gt;This end-point will not process any Tax Form Documents. Tax Form document should be submitted with every application&lt;/li&gt;&lt;li&gt;If submitted in the morning, you only need to include the Tax Form attachment for each applicant. Otherwise, you will need to include PDFs with each application (Create Account).&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param processDocuments  (required)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit standard agreements and disclosures </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> gwApiV1AccountsDocumentsPostWithHttpInfo(ProcessDocuments processDocuments) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsDocumentsPostValidateBeforeCall(processDocuments, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit General Agreements And Disclosures (asynchronously)
     * Provides mechanism to submit Agreements and Disclosures to IBKR once a day instead of with each application. We store these documents on the servers and will use them for new application requests submitted that day.&lt;ul&gt;&lt;li&gt;Documents will need to be submitted once a day (before the Applications are submitted). PDFs will be displayed and submitted as is- no changes/edits will be made to the actual PDF files.&lt;/li&gt;&lt;li&gt;This end-point will not process any Tax Form Documents. Tax Form document should be submitted with every application&lt;/li&gt;&lt;li&gt;If submitted in the morning, you only need to include the Tax Form attachment for each applicant. Otherwise, you will need to include PDFs with each application (Create Account).&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param processDocuments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit standard agreements and disclosures </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsDocumentsPostAsync(ProcessDocuments processDocuments, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsDocumentsPostValidateBeforeCall(processDocuments, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsGet
     * @param accountId  (optional)
     * @param externalId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsGetCall(String accountId, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalId", externalId));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsGetValidateBeforeCall(String accountId, String externalId, final ApiCallback _callback) throws ApiException {
        return gwApiV1AccountsGetCall(accountId, externalId, _callback);

    }

    /**
     * Retrieve Processed Application
     * Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (optional)
     * @param externalId  (optional)
     * @return GwApiV1AccountsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1AccountsGet200Response gwApiV1AccountsGet(String accountId, String externalId) throws ApiException {
        ApiResponse<GwApiV1AccountsGet200Response> localVarResp = gwApiV1AccountsGetWithHttpInfo(accountId, externalId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Processed Application
     * Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (optional)
     * @param externalId  (optional)
     * @return ApiResponse&lt;GwApiV1AccountsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1AccountsGet200Response> gwApiV1AccountsGetWithHttpInfo(String accountId, String externalId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsGetValidateBeforeCall(accountId, externalId, null);
        Type localVarReturnType = new TypeToken<GwApiV1AccountsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Processed Application (asynchronously)
     * Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountId  (optional)
     * @param externalId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsGetAsync(String accountId, String externalId, final ApiCallback<GwApiV1AccountsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsGetValidateBeforeCall(accountId, externalId, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1AccountsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsLoginMessagesGet
     * @param loginMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query all accounts associated with ‘Client ID’ that have incomplete login message </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsLoginMessagesGetCall(LoginMessageRequest loginMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/login-messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loginMessageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loginMessageRequest", loginMessageRequest));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsLoginMessagesGetValidateBeforeCall(LoginMessageRequest loginMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginMessageRequest' is set
        if (loginMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'loginMessageRequest' when calling gwApiV1AccountsLoginMessagesGet(Async)");
        }

        return gwApiV1AccountsLoginMessagesGetCall(loginMessageRequest, _callback);

    }

    /**
     * Get Login Messages
     * Query all accounts associated with ‘Client ID’ that have incomplete login message&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param loginMessageRequest  (required)
     * @return LoginMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query all accounts associated with ‘Client ID’ that have incomplete login message </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public LoginMessageResponse gwApiV1AccountsLoginMessagesGet(LoginMessageRequest loginMessageRequest) throws ApiException {
        ApiResponse<LoginMessageResponse> localVarResp = gwApiV1AccountsLoginMessagesGetWithHttpInfo(loginMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Get Login Messages
     * Query all accounts associated with ‘Client ID’ that have incomplete login message&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param loginMessageRequest  (required)
     * @return ApiResponse&lt;LoginMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query all accounts associated with ‘Client ID’ that have incomplete login message </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginMessageResponse> gwApiV1AccountsLoginMessagesGetWithHttpInfo(LoginMessageRequest loginMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsLoginMessagesGetValidateBeforeCall(loginMessageRequest, null);
        Type localVarReturnType = new TypeToken<LoginMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login Messages (asynchronously)
     * Query all accounts associated with ‘Client ID’ that have incomplete login message&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param loginMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query all accounts associated with ‘Client ID’ that have incomplete login message </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsLoginMessagesGetAsync(LoginMessageRequest loginMessageRequest, final ApiCallback<LoginMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsLoginMessagesGetValidateBeforeCall(loginMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsPatch
     * @param accountManagementRequestsPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update information for an existing accountId </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Initiate update information for an existing accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsPatchCall(AccountManagementRequestsPayload accountManagementRequestsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountManagementRequestsPayload;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsPatchValidateBeforeCall(AccountManagementRequestsPayload accountManagementRequestsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountManagementRequestsPayload' is set
        if (accountManagementRequestsPayload == null) {
            throw new ApiException("Missing the required parameter 'accountManagementRequestsPayload' when calling gwApiV1AccountsPatch(Async)");
        }

        return gwApiV1AccountsPatchCall(accountManagementRequestsPayload, _callback);

    }

    /**
     * Update Account
     * Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param accountManagementRequestsPayload  (required)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update information for an existing accountId </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Initiate update information for an existing accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse gwApiV1AccountsPatch(AccountManagementRequestsPayload accountManagementRequestsPayload) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = gwApiV1AccountsPatchWithHttpInfo(accountManagementRequestsPayload);
        return localVarResp.getData();
    }

    /**
     * Update Account
     * Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param accountManagementRequestsPayload  (required)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update information for an existing accountId </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Initiate update information for an existing accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> gwApiV1AccountsPatchWithHttpInfo(AccountManagementRequestsPayload accountManagementRequestsPayload) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsPatchValidateBeforeCall(accountManagementRequestsPayload, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account (asynchronously)
     * Update information for an existing accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param accountManagementRequestsPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Update information for an existing accountId </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Initiate update information for an existing accountId. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsPatchAsync(AccountManagementRequestsPayload accountManagementRequestsPayload, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsPatchValidateBeforeCall(accountManagementRequestsPayload, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsPost
     * @param applicationPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit account application. This will create brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Submit account application. This will initiate creation of brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsPostCall(ApplicationPayload applicationPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationPayload;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsPostValidateBeforeCall(ApplicationPayload applicationPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationPayload' is set
        if (applicationPayload == null) {
            throw new ApiException("Missing the required parameter 'applicationPayload' when calling gwApiV1AccountsPost(Async)");
        }

        return gwApiV1AccountsPostCall(applicationPayload, _callback);

    }

    /**
     * Create Account
     * Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param applicationPayload  (required)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit account application. This will create brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Submit account application. This will initiate creation of brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse gwApiV1AccountsPost(ApplicationPayload applicationPayload) throws ApiException {
        ApiResponse<StatusResponse> localVarResp = gwApiV1AccountsPostWithHttpInfo(applicationPayload);
        return localVarResp.getData();
    }

    /**
     * Create Account
     * Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param applicationPayload  (required)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit account application. This will create brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Submit account application. This will initiate creation of brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> gwApiV1AccountsPostWithHttpInfo(ApplicationPayload applicationPayload) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsPostValidateBeforeCall(applicationPayload, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Account (asynchronously)
     * Submit account application. This will create brokerage account for the end user.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param applicationPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Submit account application. This will create brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Submit account application. This will initiate creation of brokerage account for the end user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsPostAsync(ApplicationPayload applicationPayload, final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsPostValidateBeforeCall(applicationPayload, _callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1AccountsStatusGet
     * @param accountStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of all accounts associated with ‘Client ID&#39; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsStatusGetCall(AccountStatusRequest accountStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/accounts/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountStatusRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountStatusRequest", accountStatusRequest));
        }

        final String[] localVarAccepts = {
            "application/problem+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1AccountsStatusGetValidateBeforeCall(AccountStatusRequest accountStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountStatusRequest' is set
        if (accountStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'accountStatusRequest' when calling gwApiV1AccountsStatusGet(Async)");
        }

        return gwApiV1AccountsStatusGetCall(accountStatusRequest, _callback);

    }

    /**
     * Get Status Of Accounts
     * Query status of all accounts associated with ‘Client ID&#39;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountStatusRequest  (required)
     * @return AccountStatusBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of all accounts associated with ‘Client ID&#39; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public AccountStatusBulkResponse gwApiV1AccountsStatusGet(AccountStatusRequest accountStatusRequest) throws ApiException {
        ApiResponse<AccountStatusBulkResponse> localVarResp = gwApiV1AccountsStatusGetWithHttpInfo(accountStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Get Status Of Accounts
     * Query status of all accounts associated with ‘Client ID&#39;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountStatusRequest  (required)
     * @return ApiResponse&lt;AccountStatusBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of all accounts associated with ‘Client ID&#39; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStatusBulkResponse> gwApiV1AccountsStatusGetWithHttpInfo(AccountStatusRequest accountStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1AccountsStatusGetValidateBeforeCall(accountStatusRequest, null);
        Type localVarReturnType = new TypeToken<AccountStatusBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status Of Accounts (asynchronously)
     * Query status of all accounts associated with ‘Client ID&#39;&lt;br&gt;&lt;br&gt;**Scope**: &#x60;accounts.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param accountStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns error description representing internal server error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns error description representing bad request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Query status of all accounts associated with ‘Client ID&#39; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returns error description representing access issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1AccountsStatusGetAsync(AccountStatusRequest accountStatusRequest, final ApiCallback<AccountStatusBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1AccountsStatusGetValidateBeforeCall(accountStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountStatusBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
