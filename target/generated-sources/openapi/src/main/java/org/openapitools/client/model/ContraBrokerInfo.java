/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContraBrokerInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class ContraBrokerInfo {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  @javax.annotation.Nonnull
  private String accountType;

  public static final String SERIALIZED_NAME_BROKER_NAME = "brokerName";
  @SerializedName(SERIALIZED_NAME_BROKER_NAME)
  @javax.annotation.Nonnull
  private String brokerName;

  public static final String SERIALIZED_NAME_DEPOSITORY_ID = "depositoryId";
  @SerializedName(SERIALIZED_NAME_DEPOSITORY_ID)
  @javax.annotation.Nonnull
  private String depositoryId;

  public static final String SERIALIZED_NAME_BROKER_ACCOUNT_ID = "brokerAccountId";
  @SerializedName(SERIALIZED_NAME_BROKER_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String brokerAccountId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nonnull
  private String country;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contactName";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  @javax.annotation.Nullable
  private String contactName;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  @javax.annotation.Nonnull
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_PHONE = "contactPhone";
  @SerializedName(SERIALIZED_NAME_CONTACT_PHONE)
  @javax.annotation.Nonnull
  private BigDecimal contactPhone;

  public ContraBrokerInfo() {
  }

  public ContraBrokerInfo accountType(@javax.annotation.Nonnull String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nonnull
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(@javax.annotation.Nonnull String accountType) {
    this.accountType = accountType;
  }


  public ContraBrokerInfo brokerName(@javax.annotation.Nonnull String brokerName) {
    this.brokerName = brokerName;
    return this;
  }

  /**
   * Get brokerName
   * @return brokerName
   */
  @javax.annotation.Nonnull
  public String getBrokerName() {
    return brokerName;
  }

  public void setBrokerName(@javax.annotation.Nonnull String brokerName) {
    this.brokerName = brokerName;
  }


  public ContraBrokerInfo depositoryId(@javax.annotation.Nonnull String depositoryId) {
    this.depositoryId = depositoryId;
    return this;
  }

  /**
   * Get depositoryId
   * @return depositoryId
   */
  @javax.annotation.Nonnull
  public String getDepositoryId() {
    return depositoryId;
  }

  public void setDepositoryId(@javax.annotation.Nonnull String depositoryId) {
    this.depositoryId = depositoryId;
  }


  public ContraBrokerInfo brokerAccountId(@javax.annotation.Nonnull String brokerAccountId) {
    this.brokerAccountId = brokerAccountId;
    return this;
  }

  /**
   * Get brokerAccountId
   * @return brokerAccountId
   */
  @javax.annotation.Nonnull
  public String getBrokerAccountId() {
    return brokerAccountId;
  }

  public void setBrokerAccountId(@javax.annotation.Nonnull String brokerAccountId) {
    this.brokerAccountId = brokerAccountId;
  }


  public ContraBrokerInfo country(@javax.annotation.Nonnull String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nonnull String country) {
    this.country = country;
  }


  public ContraBrokerInfo contactName(@javax.annotation.Nullable String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Get contactName
   * @return contactName
   */
  @javax.annotation.Nullable
  public String getContactName() {
    return contactName;
  }

  public void setContactName(@javax.annotation.Nullable String contactName) {
    this.contactName = contactName;
  }


  public ContraBrokerInfo contactEmail(@javax.annotation.Nonnull String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Get contactEmail
   * @return contactEmail
   */
  @javax.annotation.Nonnull
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(@javax.annotation.Nonnull String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public ContraBrokerInfo contactPhone(@javax.annotation.Nonnull BigDecimal contactPhone) {
    this.contactPhone = contactPhone;
    return this;
  }

  /**
   * Get contactPhone
   * @return contactPhone
   */
  @javax.annotation.Nonnull
  public BigDecimal getContactPhone() {
    return contactPhone;
  }

  public void setContactPhone(@javax.annotation.Nonnull BigDecimal contactPhone) {
    this.contactPhone = contactPhone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContraBrokerInfo contraBrokerInfo = (ContraBrokerInfo) o;
    return Objects.equals(this.accountType, contraBrokerInfo.accountType) &&
        Objects.equals(this.brokerName, contraBrokerInfo.brokerName) &&
        Objects.equals(this.depositoryId, contraBrokerInfo.depositoryId) &&
        Objects.equals(this.brokerAccountId, contraBrokerInfo.brokerAccountId) &&
        Objects.equals(this.country, contraBrokerInfo.country) &&
        Objects.equals(this.contactName, contraBrokerInfo.contactName) &&
        Objects.equals(this.contactEmail, contraBrokerInfo.contactEmail) &&
        Objects.equals(this.contactPhone, contraBrokerInfo.contactPhone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, brokerName, depositoryId, brokerAccountId, country, contactName, contactEmail, contactPhone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContraBrokerInfo {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    brokerName: ").append(toIndentedString(brokerName)).append("\n");
    sb.append("    depositoryId: ").append(toIndentedString(depositoryId)).append("\n");
    sb.append("    brokerAccountId: ").append(toIndentedString(brokerAccountId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactPhone: ").append(toIndentedString(contactPhone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountType");
    openapiFields.add("brokerName");
    openapiFields.add("depositoryId");
    openapiFields.add("brokerAccountId");
    openapiFields.add("country");
    openapiFields.add("contactName");
    openapiFields.add("contactEmail");
    openapiFields.add("contactPhone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountType");
    openapiRequiredFields.add("brokerName");
    openapiRequiredFields.add("depositoryId");
    openapiRequiredFields.add("brokerAccountId");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("contactEmail");
    openapiRequiredFields.add("contactPhone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContraBrokerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContraBrokerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContraBrokerInfo is not found in the empty JSON string", ContraBrokerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContraBrokerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContraBrokerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContraBrokerInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if (!jsonObj.get("brokerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerName").toString()));
      }
      if (!jsonObj.get("depositoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositoryId").toString()));
      }
      if (!jsonObj.get("brokerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerAccountId").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("contactName") != null && !jsonObj.get("contactName").isJsonNull()) && !jsonObj.get("contactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactName").toString()));
      }
      if (!jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContraBrokerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContraBrokerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContraBrokerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContraBrokerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContraBrokerInfo>() {
           @Override
           public void write(JsonWriter out, ContraBrokerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContraBrokerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContraBrokerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContraBrokerInfo
   * @throws IOException if the JSON string is invalid with respect to ContraBrokerInfo
   */
  public static ContraBrokerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContraBrokerInfo.class);
  }

  /**
   * Convert an instance of ContraBrokerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

