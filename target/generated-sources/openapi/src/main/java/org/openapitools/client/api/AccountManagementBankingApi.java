/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkMultiStatusResponse;
import org.openapitools.client.model.BusinessRejectResponse;
import org.openapitools.client.model.ForbiddenRequestResponse;
import org.openapitools.client.model.GwApiV1BankInstructionsPostRequest;
import org.openapitools.client.model.GwApiV1BankInstructionsQueryPost201Response;
import org.openapitools.client.model.GwApiV1BankInstructionsQueryPostRequest;
import org.openapitools.client.model.GwApiV1ClientInstructionsClientInstructionIdGet200Response;
import org.openapitools.client.model.GwApiV1ExternalAssetTransfersPostRequest;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersPostRequest;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPost201Response;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPost202Response;
import org.openapitools.client.model.GwApiV1ExternalCashTransfersQueryPostRequest;
import org.openapitools.client.model.GwApiV1InstructionsCancelPostRequest;
import org.openapitools.client.model.GwApiV1InstructionsQueryPostRequest;
import org.openapitools.client.model.GwApiV1InternalAssetTransfersPostRequest;
import org.openapitools.client.model.GwApiV1InternalCashTransfersPostRequest;
import org.openapitools.client.model.InstructionResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.MissingRequiredParameterResponse;
import org.openapitools.client.model.NoSuchInstructionResponse;
import org.openapitools.client.model.NoSuchInstructionSetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountManagementBankingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountManagementBankingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountManagementBankingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gwApiV1BankInstructionsPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1BankInstructionsPostCall(String clientId, GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1BankInstructionsPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/bank-instructions"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1BankInstructionsPostValidateBeforeCall(String clientId, GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1BankInstructionsPost(Async)");
        }

        // verify the required parameter 'gwApiV1BankInstructionsPostRequest' is set
        if (gwApiV1BankInstructionsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1BankInstructionsPostRequest' when calling gwApiV1BankInstructionsPost(Async)");
        }

        return gwApiV1BankInstructionsPostCall(clientId, gwApiV1BankInstructionsPostRequest, _callback);

    }

    /**
     * Manage Bank Instructions
     * Create or delete bank instructions by accountId. Only ACH and EDDA are supported for &#39;Create&#39;.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1BankInstructionsPost(String clientId, GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1BankInstructionsPostWithHttpInfo(clientId, gwApiV1BankInstructionsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Manage Bank Instructions
     * Create or delete bank instructions by accountId. Only ACH and EDDA are supported for &#39;Create&#39;.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1BankInstructionsPostWithHttpInfo(String clientId, GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1BankInstructionsPostValidateBeforeCall(clientId, gwApiV1BankInstructionsPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manage Bank Instructions (asynchronously)
     * Create or delete bank instructions by accountId. Only ACH and EDDA are supported for &#39;Create&#39;.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1BankInstructionsPostAsync(String clientId, GwApiV1BankInstructionsPostRequest gwApiV1BankInstructionsPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1BankInstructionsPostValidateBeforeCall(clientId, gwApiV1BankInstructionsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1BankInstructionsQueryPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsQueryPostRequest Create get instruction name request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1BankInstructionsQueryPostCall(String clientId, GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1BankInstructionsQueryPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/bank-instructions/query"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1BankInstructionsQueryPostValidateBeforeCall(String clientId, GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1BankInstructionsQueryPost(Async)");
        }

        // verify the required parameter 'gwApiV1BankInstructionsQueryPostRequest' is set
        if (gwApiV1BankInstructionsQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1BankInstructionsQueryPostRequest' when calling gwApiV1BankInstructionsQueryPost(Async)");
        }

        return gwApiV1BankInstructionsQueryPostCall(clientId, gwApiV1BankInstructionsQueryPostRequest, _callback);

    }

    /**
     * View Bank Instructions
     * View active bank instructions for an accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsQueryPostRequest Create get instruction name request body (required)
     * @return GwApiV1BankInstructionsQueryPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1BankInstructionsQueryPost201Response gwApiV1BankInstructionsQueryPost(String clientId, GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest) throws ApiException {
        ApiResponse<GwApiV1BankInstructionsQueryPost201Response> localVarResp = gwApiV1BankInstructionsQueryPostWithHttpInfo(clientId, gwApiV1BankInstructionsQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * View Bank Instructions
     * View active bank instructions for an accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsQueryPostRequest Create get instruction name request body (required)
     * @return ApiResponse&lt;GwApiV1BankInstructionsQueryPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1BankInstructionsQueryPost201Response> gwApiV1BankInstructionsQueryPostWithHttpInfo(String clientId, GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1BankInstructionsQueryPostValidateBeforeCall(clientId, gwApiV1BankInstructionsQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<GwApiV1BankInstructionsQueryPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View Bank Instructions (asynchronously)
     * View active bank instructions for an accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;bank-instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1BankInstructionsQueryPostRequest Create get instruction name request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1BankInstructionsQueryPostAsync(String clientId, GwApiV1BankInstructionsQueryPostRequest gwApiV1BankInstructionsQueryPostRequest, final ApiCallback<GwApiV1BankInstructionsQueryPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1BankInstructionsQueryPostValidateBeforeCall(clientId, gwApiV1BankInstructionsQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1BankInstructionsQueryPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ClientInstructionsClientInstructionIdGet
     * @param clientId The client&#39;s clientId (required)
     * @param clientInstructionId The target instruction id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ClientInstructionsClientInstructionIdGetCall(String clientId, Integer clientInstructionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/client-instructions/{clientInstructionId}"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "clientInstructionId" + "}", localVarApiClient.escapeString(clientInstructionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ClientInstructionsClientInstructionIdGetValidateBeforeCall(String clientId, Integer clientInstructionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1ClientInstructionsClientInstructionIdGet(Async)");
        }

        // verify the required parameter 'clientInstructionId' is set
        if (clientInstructionId == null) {
            throw new ApiException("Missing the required parameter 'clientInstructionId' when calling gwApiV1ClientInstructionsClientInstructionIdGet(Async)");
        }

        return gwApiV1ClientInstructionsClientInstructionIdGetCall(clientId, clientInstructionId, _callback);

    }

    /**
     * Get Status For ClientInstructionId
     * Retrieve status of request by clientInstructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param clientInstructionId The target instruction id. (required)
     * @return GwApiV1ClientInstructionsClientInstructionIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1ClientInstructionsClientInstructionIdGet200Response gwApiV1ClientInstructionsClientInstructionIdGet(String clientId, Integer clientInstructionId) throws ApiException {
        ApiResponse<GwApiV1ClientInstructionsClientInstructionIdGet200Response> localVarResp = gwApiV1ClientInstructionsClientInstructionIdGetWithHttpInfo(clientId, clientInstructionId);
        return localVarResp.getData();
    }

    /**
     * Get Status For ClientInstructionId
     * Retrieve status of request by clientInstructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param clientInstructionId The target instruction id. (required)
     * @return ApiResponse&lt;GwApiV1ClientInstructionsClientInstructionIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1ClientInstructionsClientInstructionIdGet200Response> gwApiV1ClientInstructionsClientInstructionIdGetWithHttpInfo(String clientId, Integer clientInstructionId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ClientInstructionsClientInstructionIdGetValidateBeforeCall(clientId, clientInstructionId, null);
        Type localVarReturnType = new TypeToken<GwApiV1ClientInstructionsClientInstructionIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status For ClientInstructionId (asynchronously)
     * Retrieve status of request by clientInstructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param clientInstructionId The target instruction id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ClientInstructionsClientInstructionIdGetAsync(String clientId, Integer clientInstructionId, final ApiCallback<GwApiV1ClientInstructionsClientInstructionIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ClientInstructionsClientInstructionIdGetValidateBeforeCall(clientId, clientInstructionId, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1ClientInstructionsClientInstructionIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ExternalAssetTransfersPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalAssetTransfersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalAssetTransfersPostCall(String clientId, GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1ExternalAssetTransfersPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/external-asset-transfers"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ExternalAssetTransfersPostValidateBeforeCall(String clientId, GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1ExternalAssetTransfersPost(Async)");
        }

        // verify the required parameter 'gwApiV1ExternalAssetTransfersPostRequest' is set
        if (gwApiV1ExternalAssetTransfersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1ExternalAssetTransfersPostRequest' when calling gwApiV1ExternalAssetTransfersPost(Async)");
        }

        return gwApiV1ExternalAssetTransfersPostCall(clientId, gwApiV1ExternalAssetTransfersPostRequest, _callback);

    }

    /**
     * Transfer Positions Externally (ACATS, ATON, FOP, DWAC, Complex Asset Transfer)
     * Initiate request to submit external position transfer. Methods- ACATS, ATON, Basic FOP, FOP, DWAC. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers/&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalAssetTransfersPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1ExternalAssetTransfersPost(String clientId, GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1ExternalAssetTransfersPostWithHttpInfo(clientId, gwApiV1ExternalAssetTransfersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer Positions Externally (ACATS, ATON, FOP, DWAC, Complex Asset Transfer)
     * Initiate request to submit external position transfer. Methods- ACATS, ATON, Basic FOP, FOP, DWAC. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers/&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalAssetTransfersPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1ExternalAssetTransfersPostWithHttpInfo(String clientId, GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ExternalAssetTransfersPostValidateBeforeCall(clientId, gwApiV1ExternalAssetTransfersPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Positions Externally (ACATS, ATON, FOP, DWAC, Complex Asset Transfer) (asynchronously)
     * Initiate request to submit external position transfer. Methods- ACATS, ATON, Basic FOP, FOP, DWAC. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers/&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalAssetTransfersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalAssetTransfersPostAsync(String clientId, GwApiV1ExternalAssetTransfersPostRequest gwApiV1ExternalAssetTransfersPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ExternalAssetTransfersPostValidateBeforeCall(clientId, gwApiV1ExternalAssetTransfersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ExternalCashTransfersPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalCashTransfersPostCall(String clientId, GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1ExternalCashTransfersPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/external-cash-transfers"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ExternalCashTransfersPostValidateBeforeCall(String clientId, GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1ExternalCashTransfersPost(Async)");
        }

        // verify the required parameter 'gwApiV1ExternalCashTransfersPostRequest' is set
        if (gwApiV1ExternalCashTransfersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1ExternalCashTransfersPostRequest' when calling gwApiV1ExternalCashTransfersPost(Async)");
        }

        return gwApiV1ExternalCashTransfersPostCall(clientId, gwApiV1ExternalCashTransfersPostRequest, _callback);

    }

    /**
     * Transfer Cash Externally
     * Initiate request to deposit or withdrawal between IBKR account and bank account. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1ExternalCashTransfersPost(String clientId, GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1ExternalCashTransfersPostWithHttpInfo(clientId, gwApiV1ExternalCashTransfersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer Cash Externally
     * Initiate request to deposit or withdrawal between IBKR account and bank account. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1ExternalCashTransfersPostWithHttpInfo(String clientId, GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ExternalCashTransfersPostValidateBeforeCall(clientId, gwApiV1ExternalCashTransfersPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Cash Externally (asynchronously)
     * Initiate request to deposit or withdrawal between IBKR account and bank account. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalCashTransfersPostAsync(String clientId, GwApiV1ExternalCashTransfersPostRequest gwApiV1ExternalCashTransfersPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ExternalCashTransfersPostValidateBeforeCall(clientId, gwApiV1ExternalCashTransfersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1ExternalCashTransfersQueryPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersQueryPostRequest Create an external cash transfer query request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalCashTransfersQueryPostCall(String clientId, GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1ExternalCashTransfersQueryPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/external-cash-transfers/query"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1ExternalCashTransfersQueryPostValidateBeforeCall(String clientId, GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1ExternalCashTransfersQueryPost(Async)");
        }

        // verify the required parameter 'gwApiV1ExternalCashTransfersQueryPostRequest' is set
        if (gwApiV1ExternalCashTransfersQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1ExternalCashTransfersQueryPostRequest' when calling gwApiV1ExternalCashTransfersQueryPost(Async)");
        }

        return gwApiV1ExternalCashTransfersQueryPostCall(clientId, gwApiV1ExternalCashTransfersQueryPostRequest, _callback);

    }

    /**
     * View Cash Balances
     * View available cash for withdrawal with and without margin loan by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersQueryPostRequest Create an external cash transfer query request body (required)
     * @return GwApiV1ExternalCashTransfersQueryPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1ExternalCashTransfersQueryPost201Response gwApiV1ExternalCashTransfersQueryPost(String clientId, GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest) throws ApiException {
        ApiResponse<GwApiV1ExternalCashTransfersQueryPost201Response> localVarResp = gwApiV1ExternalCashTransfersQueryPostWithHttpInfo(clientId, gwApiV1ExternalCashTransfersQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * View Cash Balances
     * View available cash for withdrawal with and without margin loan by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersQueryPostRequest Create an external cash transfer query request body (required)
     * @return ApiResponse&lt;GwApiV1ExternalCashTransfersQueryPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1ExternalCashTransfersQueryPost201Response> gwApiV1ExternalCashTransfersQueryPostWithHttpInfo(String clientId, GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1ExternalCashTransfersQueryPostValidateBeforeCall(clientId, gwApiV1ExternalCashTransfersQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<GwApiV1ExternalCashTransfersQueryPost201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View Cash Balances (asynchronously)
     * View available cash for withdrawal with and without margin loan by accountId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1ExternalCashTransfersQueryPostRequest Create an external cash transfer query request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1ExternalCashTransfersQueryPostAsync(String clientId, GwApiV1ExternalCashTransfersQueryPostRequest gwApiV1ExternalCashTransfersQueryPostRequest, final ApiCallback<GwApiV1ExternalCashTransfersQueryPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1ExternalCashTransfersQueryPostValidateBeforeCall(clientId, gwApiV1ExternalCashTransfersQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1ExternalCashTransfersQueryPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InstructionSetsInstructionSetIdGet
     * @param clientId The client&#39;s clientId (required)
     * @param instructionSetId The target instruction set id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status multiple instructions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionSetsInstructionSetIdGetCall(String clientId, Integer instructionSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/instruction-sets/{instructionSetId}"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "instructionSetId" + "}", localVarApiClient.escapeString(instructionSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InstructionSetsInstructionSetIdGetValidateBeforeCall(String clientId, Integer instructionSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InstructionSetsInstructionSetIdGet(Async)");
        }

        // verify the required parameter 'instructionSetId' is set
        if (instructionSetId == null) {
            throw new ApiException("Missing the required parameter 'instructionSetId' when calling gwApiV1InstructionSetsInstructionSetIdGet(Async)");
        }

        return gwApiV1InstructionSetsInstructionSetIdGetCall(clientId, instructionSetId, _callback);

    }

    /**
     * Get Status For InstructionSetId
     * Retrieve status of all requests associated with instructionSetId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionSetId The target instruction set id. (required)
     * @return BulkMultiStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status multiple instructions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public BulkMultiStatusResponse gwApiV1InstructionSetsInstructionSetIdGet(String clientId, Integer instructionSetId) throws ApiException {
        ApiResponse<BulkMultiStatusResponse> localVarResp = gwApiV1InstructionSetsInstructionSetIdGetWithHttpInfo(clientId, instructionSetId);
        return localVarResp.getData();
    }

    /**
     * Get Status For InstructionSetId
     * Retrieve status of all requests associated with instructionSetId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionSetId The target instruction set id. (required)
     * @return ApiResponse&lt;BulkMultiStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status multiple instructions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkMultiStatusResponse> gwApiV1InstructionSetsInstructionSetIdGetWithHttpInfo(String clientId, Integer instructionSetId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InstructionSetsInstructionSetIdGetValidateBeforeCall(clientId, instructionSetId, null);
        Type localVarReturnType = new TypeToken<BulkMultiStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status For InstructionSetId (asynchronously)
     * Retrieve status of all requests associated with instructionSetId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionSetId The target instruction set id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status multiple instructions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionSetsInstructionSetIdGetAsync(String clientId, Integer instructionSetId, final ApiCallback<BulkMultiStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InstructionSetsInstructionSetIdGetValidateBeforeCall(clientId, instructionSetId, _callback);
        Type localVarReturnType = new TypeToken<BulkMultiStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InstructionsCancelPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsCancelPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsCancelPostCall(String clientId, GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1InstructionsCancelPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/instructions/cancel"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InstructionsCancelPostValidateBeforeCall(String clientId, GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InstructionsCancelPost(Async)");
        }

        // verify the required parameter 'gwApiV1InstructionsCancelPostRequest' is set
        if (gwApiV1InstructionsCancelPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1InstructionsCancelPostRequest' when calling gwApiV1InstructionsCancelPost(Async)");
        }

        return gwApiV1InstructionsCancelPostCall(clientId, gwApiV1InstructionsCancelPostRequest, _callback);

    }

    /**
     * Cancel Request
     * Cancel request by instructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsCancelPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1InstructionsCancelPost(String clientId, GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1InstructionsCancelPostWithHttpInfo(clientId, gwApiV1InstructionsCancelPostRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel Request
     * Cancel request by instructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsCancelPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1InstructionsCancelPostWithHttpInfo(String clientId, GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InstructionsCancelPostValidateBeforeCall(clientId, gwApiV1InstructionsCancelPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Request (asynchronously)
     * Cancel request by instructionId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsCancelPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Instruction successfully created and processed synchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsCancelPostAsync(String clientId, GwApiV1InstructionsCancelPostRequest gwApiV1InstructionsCancelPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InstructionsCancelPostValidateBeforeCall(clientId, gwApiV1InstructionsCancelPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InstructionsInstructionIdGet
     * @param clientId The client&#39;s clientId (required)
     * @param instructionId The target instruction id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsInstructionIdGetCall(String clientId, Integer instructionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gw/api/v1/instructions/{instructionId}"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()))
            .replace("{" + "instructionId" + "}", localVarApiClient.escapeString(instructionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InstructionsInstructionIdGetValidateBeforeCall(String clientId, Integer instructionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InstructionsInstructionIdGet(Async)");
        }

        // verify the required parameter 'instructionId' is set
        if (instructionId == null) {
            throw new ApiException("Missing the required parameter 'instructionId' when calling gwApiV1InstructionsInstructionIdGet(Async)");
        }

        return gwApiV1InstructionsInstructionIdGetCall(clientId, instructionId, _callback);

    }

    /**
     * Get Status For InstructionId
     * Retrieve status of request by instructionId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionId The target instruction id. (required)
     * @return GwApiV1ClientInstructionsClientInstructionIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public GwApiV1ClientInstructionsClientInstructionIdGet200Response gwApiV1InstructionsInstructionIdGet(String clientId, Integer instructionId) throws ApiException {
        ApiResponse<GwApiV1ClientInstructionsClientInstructionIdGet200Response> localVarResp = gwApiV1InstructionsInstructionIdGetWithHttpInfo(clientId, instructionId);
        return localVarResp.getData();
    }

    /**
     * Get Status For InstructionId
     * Retrieve status of request by instructionId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionId The target instruction id. (required)
     * @return ApiResponse&lt;GwApiV1ClientInstructionsClientInstructionIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GwApiV1ClientInstructionsClientInstructionIdGet200Response> gwApiV1InstructionsInstructionIdGetWithHttpInfo(String clientId, Integer instructionId) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InstructionsInstructionIdGetValidateBeforeCall(clientId, instructionId, null);
        Type localVarReturnType = new TypeToken<GwApiV1ClientInstructionsClientInstructionIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Status For InstructionId (asynchronously)
     * Retrieve status of request by instructionId&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;HTTPS&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param instructionId The target instruction id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of an instruction. </td><td>  -  </td></tr>
        <tr><td> 208 </td><td> Client tried to reuse the same instructionId for more than one transaction. Returning the status for the first registered transaction under given instructionId (when there were no duplicates yet). Reconsile based on instructionSetId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returns a Problem detail instance representing a not found request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unable to process request due to an Internal Error. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsInstructionIdGetAsync(String clientId, Integer instructionId, final ApiCallback<GwApiV1ClientInstructionsClientInstructionIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InstructionsInstructionIdGetValidateBeforeCall(clientId, instructionId, _callback);
        Type localVarReturnType = new TypeToken<GwApiV1ClientInstructionsClientInstructionIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InstructionsQueryPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsQueryPostRequest Create recent instructions request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsQueryPostCall(String clientId, GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1InstructionsQueryPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/instructions/query"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InstructionsQueryPostValidateBeforeCall(String clientId, GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InstructionsQueryPost(Async)");
        }

        // verify the required parameter 'gwApiV1InstructionsQueryPostRequest' is set
        if (gwApiV1InstructionsQueryPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1InstructionsQueryPostRequest' when calling gwApiV1InstructionsQueryPost(Async)");
        }

        return gwApiV1InstructionsQueryPostCall(clientId, gwApiV1InstructionsQueryPostRequest, _callback);

    }

    /**
     * Get Transaction History
     * Query list of recent transactions (up to 30 days) based on accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsQueryPostRequest Create recent instructions request body (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1InstructionsQueryPost(String clientId, GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1InstructionsQueryPostWithHttpInfo(clientId, gwApiV1InstructionsQueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * Get Transaction History
     * Query list of recent transactions (up to 30 days) based on accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsQueryPostRequest Create recent instructions request body (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1InstructionsQueryPostWithHttpInfo(String clientId, GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InstructionsQueryPostValidateBeforeCall(clientId, gwApiV1InstructionsQueryPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction History (asynchronously)
     * Query list of recent transactions (up to 30 days) based on accountId.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;instructions.read&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InstructionsQueryPostRequest Create recent instructions request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InstructionsQueryPostAsync(String clientId, GwApiV1InstructionsQueryPostRequest gwApiV1InstructionsQueryPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InstructionsQueryPostValidateBeforeCall(clientId, gwApiV1InstructionsQueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InternalAssetTransfersPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalAssetTransfersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InternalAssetTransfersPostCall(String clientId, GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1InternalAssetTransfersPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/internal-asset-transfers"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InternalAssetTransfersPostValidateBeforeCall(String clientId, GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InternalAssetTransfersPost(Async)");
        }

        // verify the required parameter 'gwApiV1InternalAssetTransfersPostRequest' is set
        if (gwApiV1InternalAssetTransfersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1InternalAssetTransfersPostRequest' when calling gwApiV1InternalAssetTransfersPost(Async)");
        }

        return gwApiV1InternalAssetTransfersPostCall(clientId, gwApiV1InternalAssetTransfersPostRequest, _callback);

    }

    /**
     * Transfer Positions Internally
     * Transfer positions internally between two accounts with Interactive Brokers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalAssetTransfersPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1InternalAssetTransfersPost(String clientId, GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1InternalAssetTransfersPostWithHttpInfo(clientId, gwApiV1InternalAssetTransfersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer Positions Internally
     * Transfer positions internally between two accounts with Interactive Brokers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalAssetTransfersPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1InternalAssetTransfersPostWithHttpInfo(String clientId, GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InternalAssetTransfersPostValidateBeforeCall(clientId, gwApiV1InternalAssetTransfersPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Positions Internally (asynchronously)
     * Transfer positions internally between two accounts with Interactive Brokers&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalAssetTransfersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InternalAssetTransfersPostAsync(String clientId, GwApiV1InternalAssetTransfersPostRequest gwApiV1InternalAssetTransfersPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InternalAssetTransfersPostValidateBeforeCall(clientId, gwApiV1InternalAssetTransfersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwApiV1InternalCashTransfersPost
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalCashTransfersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new instruction synchronously, e.g., for Internal Cash Transfer w/o dateTimeToOccur </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InternalCashTransfersPostCall(String clientId, GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwApiV1InternalCashTransfersPostRequest;

        // create path and map variables
        String localVarPath = "/gw/api/v1/internal-cash-transfers"
            .replace("{" + "client-id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwApiV1InternalCashTransfersPostValidateBeforeCall(String clientId, GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling gwApiV1InternalCashTransfersPost(Async)");
        }

        // verify the required parameter 'gwApiV1InternalCashTransfersPostRequest' is set
        if (gwApiV1InternalCashTransfersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'gwApiV1InternalCashTransfersPostRequest' when calling gwApiV1InternalCashTransfersPost(Async)");
        }

        return gwApiV1InternalCashTransfersPostCall(clientId, gwApiV1InternalCashTransfersPostRequest, _callback);

    }

    /**
     * Transfer Cash Internally
     * Transfer cash internally between two accounts with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalCashTransfersPostRequest  (required)
     * @return InstructionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new instruction synchronously, e.g., for Internal Cash Transfer w/o dateTimeToOccur </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InstructionResponse gwApiV1InternalCashTransfersPost(String clientId, GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest) throws ApiException {
        ApiResponse<InstructionResponse> localVarResp = gwApiV1InternalCashTransfersPostWithHttpInfo(clientId, gwApiV1InternalCashTransfersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer Cash Internally
     * Transfer cash internally between two accounts with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalCashTransfersPostRequest  (required)
     * @return ApiResponse&lt;InstructionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new instruction synchronously, e.g., for Internal Cash Transfer w/o dateTimeToOccur </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionResponse> gwApiV1InternalCashTransfersPostWithHttpInfo(String clientId, GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = gwApiV1InternalCashTransfersPostValidateBeforeCall(clientId, gwApiV1InternalCashTransfersPostRequest, null);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Cash Internally (asynchronously)
     * Transfer cash internally between two accounts with Interactive Brokers.&lt;br&gt;&lt;br&gt;**Scope**: &#x60;transfers.write&#x60;&lt;br&gt;**Security Policy**: &#x60;Signed JWT&#x60;
     * @param clientId The client&#39;s clientId (required)
     * @param gwApiV1InternalCashTransfersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new instruction synchronously, e.g., for Internal Cash Transfer w/o dateTimeToOccur </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepts request to create a new instruction asynchronously </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returns a Problem detail instance representing a bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returns a Problem detail instance representing a forbidden request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Returns a Problem detail instance representing a business error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returns a Problem detail instance representing an internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwApiV1InternalCashTransfersPostAsync(String clientId, GwApiV1InternalCashTransfersPostRequest gwApiV1InternalCashTransfersPostRequest, final ApiCallback<InstructionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwApiV1InternalCashTransfersPostValidateBeforeCall(clientId, gwApiV1InternalCashTransfersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<InstructionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
