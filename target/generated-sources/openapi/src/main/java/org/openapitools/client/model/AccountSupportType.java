/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdministratorContactPersonType;
import org.openapitools.client.model.AdministratorType;
import org.openapitools.client.model.PrimaryContributorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountSupportType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AccountSupportType {
  public static final String SERIALIZED_NAME_BUSINESS_DESCRIPTION = "businessDescription";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DESCRIPTION)
  @javax.annotation.Nullable
  private String businessDescription;

  public static final String SERIALIZED_NAME_PRIMARY_CONTRIBUTOR = "primaryContributor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONTRIBUTOR)
  @javax.annotation.Nullable
  private PrimaryContributorType primaryContributor;

  public static final String SERIALIZED_NAME_ADMINISTRATOR = "administrator";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR)
  @javax.annotation.Nullable
  private AdministratorType administrator;

  public static final String SERIALIZED_NAME_ADMINISTRATOR_CONTACT_PERSON = "administratorContactPerson";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_CONTACT_PERSON)
  @javax.annotation.Nullable
  private AdministratorContactPersonType administratorContactPerson;

  public static final String SERIALIZED_NAME_OWNERS_RESIDE_U_S = "ownersResideUS";
  @SerializedName(SERIALIZED_NAME_OWNERS_RESIDE_U_S)
  @javax.annotation.Nullable
  private Boolean ownersResideUS;

  public static final String SERIALIZED_NAME_SOLICIT_OWNERS_RESIDE_U_S = "solicitOwnersResideUS";
  @SerializedName(SERIALIZED_NAME_SOLICIT_OWNERS_RESIDE_U_S)
  @javax.annotation.Nullable
  private Boolean solicitOwnersResideUS;

  public static final String SERIALIZED_NAME_ACCEPT_OWNERS_RESIDE_U_S = "acceptOwnersResideUS";
  @SerializedName(SERIALIZED_NAME_ACCEPT_OWNERS_RESIDE_U_S)
  @javax.annotation.Nullable
  private Boolean acceptOwnersResideUS;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FINANCIALINSTITUTION("FINANCIALINSTITUTION"),
    
    PROPRIETARYTRADING("PROPRIETARYTRADING"),
    
    FAMILYINVVEHICLE("FAMILYINVVEHICLE"),
    
    OPERATINGBUSINESS("OPERATINGBUSINESS"),
    
    BROKERDEALER("BROKERDEALER"),
    
    LICENSEDADVISOR("LICENSEDADVISOR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public AccountSupportType() {
  }

  public AccountSupportType businessDescription(@javax.annotation.Nullable String businessDescription) {
    this.businessDescription = businessDescription;
    return this;
  }

  /**
   * Get businessDescription
   * @return businessDescription
   */
  @javax.annotation.Nullable
  public String getBusinessDescription() {
    return businessDescription;
  }

  public void setBusinessDescription(@javax.annotation.Nullable String businessDescription) {
    this.businessDescription = businessDescription;
  }


  public AccountSupportType primaryContributor(@javax.annotation.Nullable PrimaryContributorType primaryContributor) {
    this.primaryContributor = primaryContributor;
    return this;
  }

  /**
   * Get primaryContributor
   * @return primaryContributor
   */
  @javax.annotation.Nullable
  public PrimaryContributorType getPrimaryContributor() {
    return primaryContributor;
  }

  public void setPrimaryContributor(@javax.annotation.Nullable PrimaryContributorType primaryContributor) {
    this.primaryContributor = primaryContributor;
  }


  public AccountSupportType administrator(@javax.annotation.Nullable AdministratorType administrator) {
    this.administrator = administrator;
    return this;
  }

  /**
   * Get administrator
   * @return administrator
   */
  @javax.annotation.Nullable
  public AdministratorType getAdministrator() {
    return administrator;
  }

  public void setAdministrator(@javax.annotation.Nullable AdministratorType administrator) {
    this.administrator = administrator;
  }


  public AccountSupportType administratorContactPerson(@javax.annotation.Nullable AdministratorContactPersonType administratorContactPerson) {
    this.administratorContactPerson = administratorContactPerson;
    return this;
  }

  /**
   * Get administratorContactPerson
   * @return administratorContactPerson
   */
  @javax.annotation.Nullable
  public AdministratorContactPersonType getAdministratorContactPerson() {
    return administratorContactPerson;
  }

  public void setAdministratorContactPerson(@javax.annotation.Nullable AdministratorContactPersonType administratorContactPerson) {
    this.administratorContactPerson = administratorContactPerson;
  }


  public AccountSupportType ownersResideUS(@javax.annotation.Nullable Boolean ownersResideUS) {
    this.ownersResideUS = ownersResideUS;
    return this;
  }

  /**
   * Get ownersResideUS
   * @return ownersResideUS
   */
  @javax.annotation.Nullable
  public Boolean getOwnersResideUS() {
    return ownersResideUS;
  }

  public void setOwnersResideUS(@javax.annotation.Nullable Boolean ownersResideUS) {
    this.ownersResideUS = ownersResideUS;
  }


  public AccountSupportType solicitOwnersResideUS(@javax.annotation.Nullable Boolean solicitOwnersResideUS) {
    this.solicitOwnersResideUS = solicitOwnersResideUS;
    return this;
  }

  /**
   * Get solicitOwnersResideUS
   * @return solicitOwnersResideUS
   */
  @javax.annotation.Nullable
  public Boolean getSolicitOwnersResideUS() {
    return solicitOwnersResideUS;
  }

  public void setSolicitOwnersResideUS(@javax.annotation.Nullable Boolean solicitOwnersResideUS) {
    this.solicitOwnersResideUS = solicitOwnersResideUS;
  }


  public AccountSupportType acceptOwnersResideUS(@javax.annotation.Nullable Boolean acceptOwnersResideUS) {
    this.acceptOwnersResideUS = acceptOwnersResideUS;
    return this;
  }

  /**
   * Get acceptOwnersResideUS
   * @return acceptOwnersResideUS
   */
  @javax.annotation.Nullable
  public Boolean getAcceptOwnersResideUS() {
    return acceptOwnersResideUS;
  }

  public void setAcceptOwnersResideUS(@javax.annotation.Nullable Boolean acceptOwnersResideUS) {
    this.acceptOwnersResideUS = acceptOwnersResideUS;
  }


  public AccountSupportType type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSupportType accountSupportType = (AccountSupportType) o;
    return Objects.equals(this.businessDescription, accountSupportType.businessDescription) &&
        Objects.equals(this.primaryContributor, accountSupportType.primaryContributor) &&
        Objects.equals(this.administrator, accountSupportType.administrator) &&
        Objects.equals(this.administratorContactPerson, accountSupportType.administratorContactPerson) &&
        Objects.equals(this.ownersResideUS, accountSupportType.ownersResideUS) &&
        Objects.equals(this.solicitOwnersResideUS, accountSupportType.solicitOwnersResideUS) &&
        Objects.equals(this.acceptOwnersResideUS, accountSupportType.acceptOwnersResideUS) &&
        Objects.equals(this.type, accountSupportType.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessDescription, primaryContributor, administrator, administratorContactPerson, ownersResideUS, solicitOwnersResideUS, acceptOwnersResideUS, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSupportType {\n");
    sb.append("    businessDescription: ").append(toIndentedString(businessDescription)).append("\n");
    sb.append("    primaryContributor: ").append(toIndentedString(primaryContributor)).append("\n");
    sb.append("    administrator: ").append(toIndentedString(administrator)).append("\n");
    sb.append("    administratorContactPerson: ").append(toIndentedString(administratorContactPerson)).append("\n");
    sb.append("    ownersResideUS: ").append(toIndentedString(ownersResideUS)).append("\n");
    sb.append("    solicitOwnersResideUS: ").append(toIndentedString(solicitOwnersResideUS)).append("\n");
    sb.append("    acceptOwnersResideUS: ").append(toIndentedString(acceptOwnersResideUS)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessDescription");
    openapiFields.add("primaryContributor");
    openapiFields.add("administrator");
    openapiFields.add("administratorContactPerson");
    openapiFields.add("ownersResideUS");
    openapiFields.add("solicitOwnersResideUS");
    openapiFields.add("acceptOwnersResideUS");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountSupportType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountSupportType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSupportType is not found in the empty JSON string", AccountSupportType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountSupportType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountSupportType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessDescription") != null && !jsonObj.get("businessDescription").isJsonNull()) && !jsonObj.get("businessDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessDescription").toString()));
      }
      // validate the optional field `primaryContributor`
      if (jsonObj.get("primaryContributor") != null && !jsonObj.get("primaryContributor").isJsonNull()) {
        PrimaryContributorType.validateJsonElement(jsonObj.get("primaryContributor"));
      }
      // validate the optional field `administrator`
      if (jsonObj.get("administrator") != null && !jsonObj.get("administrator").isJsonNull()) {
        AdministratorType.validateJsonElement(jsonObj.get("administrator"));
      }
      // validate the optional field `administratorContactPerson`
      if (jsonObj.get("administratorContactPerson") != null && !jsonObj.get("administratorContactPerson").isJsonNull()) {
        AdministratorContactPersonType.validateJsonElement(jsonObj.get("administratorContactPerson"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSupportType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSupportType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSupportType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSupportType.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSupportType>() {
           @Override
           public void write(JsonWriter out, AccountSupportType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSupportType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountSupportType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountSupportType
   * @throws IOException if the JSON string is invalid with respect to AccountSupportType
   */
  public static AccountSupportType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSupportType.class);
  }

  /**
   * Convert an instance of AccountSupportType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

