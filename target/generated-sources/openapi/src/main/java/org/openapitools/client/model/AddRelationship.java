/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddRelationship
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AddRelationship {
  /**
   * Gets or Sets name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    ACCOUNT_HOLDER("Account_Holder"),
    
    SPOUSE("Spouse"),
    
    FIRSTHOLDER("Firstholder"),
    
    SECONDHOLDER("Secondholder"),
    
    TRADER("Trader"),
    
    SECRETARY("Secretary"),
    
    TREASURER("Treasurer"),
    
    CEO("Ceo"),
    
    OWNER("Owner"),
    
    TRUSTEE("Trustee"),
    
    BENEFICIARY("Beneficiary"),
    
    GRANTOR("Grantor"),
    
    DIRECTOR("Director"),
    
    PRINCIPAL("Principal"),
    
    SHAREHOLDER("Shareholder"),
    
    PARTNER("Partner"),
    
    CONTROLLING_OFFICER("Controlling_Officer"),
    
    BENEFICIALOWNER("Beneficialowner"),
    
    SIGNATORY("Signatory"),
    
    COMP_OFFICER("Comp_Officer"),
    
    SUPERV_BROKER("Superv_Broker"),
    
    POOLED_USER("Pooled_User"),
    
    FINANCIAL_USER("Financial_User"),
    
    CONTINGENT("Contingent"),
    
    IRA_BENEFICIARY("Ira_Beneficiary"),
    
    EMPLOYEE("Employee"),
    
    NON_EMPLOYEE("Non_Employee"),
    
    FUND_ADMIN("Fund_Admin"),
    
    FUND_CONTACT("Fund_Contact"),
    
    FIRM_ADMIN("Firm_Admin"),
    
    FIRM_BILLING("Firm_Billing"),
    
    FIRM_CLEARING("Firm_Clearing"),
    
    FIRM_SALES("Firm_Sales"),
    
    FIRM_TRADING("Firm_Trading"),
    
    FIRM_USER("Firm_User"),
    
    ACCOUNT_ADMIN("Account_Admin"),
    
    ACCOUNT_BILLING("Account_Billing"),
    
    ACCOUNT_CLEARING("Account_Clearing"),
    
    ACCOUNT_SALES("Account_Sales"),
    
    ACCOUNT_TRADING("Account_Trading"),
    
    USER_INDIVIDUAL("User_Individual"),
    
    FUND_MANAGER("Fund_Manager"),
    
    INVESTMENT_ADVISOR("Investment_Advisor"),
    
    SHF_INVESTMANAGER("Shf_Investmanager"),
    
    ADVISORY_PRINCIPAL("Advisory_Principal"),
    
    ADVISORY_SIGNATORY("Advisory_Signatory"),
    
    ASSOCIATED_FUND("Associated_Fund"),
    
    PRIMARY_CONTRIBUTOR("Primary_Contributor"),
    
    ADMINISTRATOR("Administrator"),
    
    CONTACT("Contact"),
    
    LEAD_COMPLIANCE_OFFICER("Lead_Compliance_Officer"),
    
    COMPLIANCE_OFFICER("Compliance_Officer"),
    
    OTHER_OFFICER("Other_Officer"),
    
    APPLY_USER("Apply_User"),
    
    TRANSFER_ON_DEATH_LEGATOR("Transfer_On_Death_Legator"),
    
    TOD_PRIMARY_BENEFICIARY("Tod_Primary_Beneficiary"),
    
    TOD_CONTINGENT_BENEFICIARY("Tod_Contingent_Beneficiary"),
    
    NOMINEE("Nominee"),
    
    NOMINEE_GUARDIAN("Nominee_Guardian"),
    
    IRA_DECEDENT("Ira_Decedent"),
    
    AUTHORIZED_PERSON("Authorized_Person"),
    
    PROMOTER("Promoter"),
    
    WHOLETIME_DIRECTOR("Wholetime_Director"),
    
    NOMINEE_OWNER("Nominee_Owner"),
    
    THIRD_PARTY_ADMIN("Third_Party_Admin"),
    
    COMPLIANCE_CONTACT("Compliance_Contact"),
    
    TRUST_CONTROLLER("Trust_Controller"),
    
    TRUST_APPLICANT("Trust_Applicant"),
    
    ORGANIZATION_APPLICANT("Organization_Applicant"),
    
    MM_CONTACT("Mm_Contact"),
    
    REG_REP("Reg_Rep"),
    
    PLAN_SPONSOR("Plan_Sponsor"),
    
    PLAN_SPONSOR_OFFICER("Plan_Sponsor_Officer"),
    
    PENSION_ADMIN("Pension_Admin"),
    
    PENSION_ADMIN_CONTACT("Pension_Admin_Contact"),
    
    ACCOUNTANT("Accountant"),
    
    JOINT_APPLICANT("Joint_Applicant"),
    
    CUSTODIAN_EMPLOYEE("Custodian_Employee"),
    
    SUCCESSOR_CUSTODIAN("Successor_Custodian"),
    
    CUSTODIAN("Custodian"),
    
    SUCCESSOR_CUSTODIAN_EMPLOYEE("Successor_Custodian_Employee"),
    
    CHIEF_COMPLIANCE_OFFICER("Chief_Compliance_Officer"),
    
    CHIEF_FINANCIAL_OFFICER("Chief_Financial_Officer"),
    
    TRADING_OFFICER("Trading_Officer"),
    
    CHILD("Child"),
    
    PARENT("Parent"),
    
    SIBLING("Sibling"),
    
    ESTATE("Estate"),
    
    AS_INTEREST_MAY_APPEAR("As_Interest_May_Appear"),
    
    IRA_PRESENT_TRUST("Ira_Present_Trust"),
    
    OTHER("Other"),
    
    LIFE_PARTNER("Life_Partner"),
    
    COMMON_LAW_PARTNER("Common_Law_Partner"),
    
    GRANDCHILD("Grandchild"),
    
    CHARITY("Charity"),
    
    TRUST_IRA("Trust_Ira"),
    
    SUCCESSOR_HOLDER("Successor_Holder"),
    
    HEAD_OF_DESK("Head_Of_Desk"),
    
    CFTC_NON_APPLICANT_OCR_CONTACT("Cftc_Non_Applicant_Ocr_Contact"),
    
    OCR_ACCOUNT_CONTROLLER("Ocr_Account_Controller"),
    
    CFTC_APPLICANT_OCR_CONTACT("Cftc_Applicant_Ocr_Contact");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private NameEnum name;

  public static final String SERIALIZED_NAME_OWNERSHIP_PERCENTAGE = "ownershipPercentage";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_PERCENTAGE)
  @javax.annotation.Nullable
  private Integer ownershipPercentage;

  public AddRelationship() {
  }

  public AddRelationship name(@javax.annotation.Nullable NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable NameEnum name) {
    this.name = name;
  }


  public AddRelationship ownershipPercentage(@javax.annotation.Nullable Integer ownershipPercentage) {
    this.ownershipPercentage = ownershipPercentage;
    return this;
  }

  /**
   * Get ownershipPercentage
   * @return ownershipPercentage
   */
  @javax.annotation.Nullable
  public Integer getOwnershipPercentage() {
    return ownershipPercentage;
  }

  public void setOwnershipPercentage(@javax.annotation.Nullable Integer ownershipPercentage) {
    this.ownershipPercentage = ownershipPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddRelationship addRelationship = (AddRelationship) o;
    return Objects.equals(this.name, addRelationship.name) &&
        Objects.equals(this.ownershipPercentage, addRelationship.ownershipPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ownershipPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddRelationship {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownershipPercentage: ").append(toIndentedString(ownershipPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("ownershipPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddRelationship
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddRelationship.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddRelationship is not found in the empty JSON string", AddRelationship.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddRelationship.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddRelationship` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddRelationship.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddRelationship' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddRelationship> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddRelationship.class));

       return (TypeAdapter<T>) new TypeAdapter<AddRelationship>() {
           @Override
           public void write(JsonWriter out, AddRelationship value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddRelationship read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddRelationship given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddRelationship
   * @throws IOException if the JSON string is invalid with respect to AddRelationship
   */
  public static AddRelationship fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddRelationship.class);
  }

  /**
   * Convert an instance of AddRelationship to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

