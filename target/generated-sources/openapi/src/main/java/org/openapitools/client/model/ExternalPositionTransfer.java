/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExternalPositionTransfer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class ExternalPositionTransfer {
  public static final String SERIALIZED_NAME_CLIENT_INSTRUCTION_ID = "clientInstructionId";
  @SerializedName(SERIALIZED_NAME_CLIENT_INSTRUCTION_ID)
  @javax.annotation.Nonnull
  private BigDecimal clientInstructionId;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FULL("FULL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  /**
   * Gets or Sets subtype
   */
  @JsonAdapter(SubtypeEnum.Adapter.class)
  public enum SubtypeEnum {
    ACATS("ACATS"),
    
    ATON("ATON");

    private String value;

    SubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubtypeEnum fromValue(String value) {
      for (SubtypeEnum b : SubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  @javax.annotation.Nonnull
  private SubtypeEnum subtype;

  public static final String SERIALIZED_NAME_BROKER_ID = "brokerId";
  @SerializedName(SERIALIZED_NAME_BROKER_ID)
  @javax.annotation.Nonnull
  private String brokerId;

  public static final String SERIALIZED_NAME_BROKER_NAME = "brokerName";
  @SerializedName(SERIALIZED_NAME_BROKER_NAME)
  @javax.annotation.Nonnull
  private String brokerName;

  public static final String SERIALIZED_NAME_ACCOUNT_AT_BROKER = "accountAtBroker";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_AT_BROKER)
  @javax.annotation.Nonnull
  private String accountAtBroker;

  /**
   * Gets or Sets sourceIRAType
   */
  @JsonAdapter(SourceIRATypeEnum.Adapter.class)
  public enum SourceIRATypeEnum {
    RO("RO"),
    
    RI("RI"),
    
    RT("RT"),
    
    SP("SP"),
    
    ED("ED"),
    
    TH("TH"),
    
    RH("RH"),
    
    SH("SH");

    private String value;

    SourceIRATypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceIRATypeEnum fromValue(String value) {
      for (SourceIRATypeEnum b : SourceIRATypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceIRATypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceIRATypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceIRATypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceIRATypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceIRATypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_I_R_A_TYPE = "sourceIRAType";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_R_A_TYPE)
  @javax.annotation.Nullable
  private SourceIRATypeEnum sourceIRAType;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  @javax.annotation.Nonnull
  private String signature;

  public ExternalPositionTransfer() {
  }

  public ExternalPositionTransfer clientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
    return this;
  }

  /**
   * Get clientInstructionId
   * @return clientInstructionId
   */
  @javax.annotation.Nonnull
  public BigDecimal getClientInstructionId() {
    return clientInstructionId;
  }

  public void setClientInstructionId(@javax.annotation.Nonnull BigDecimal clientInstructionId) {
    this.clientInstructionId = clientInstructionId;
  }


  public ExternalPositionTransfer type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public ExternalPositionTransfer subtype(@javax.annotation.Nonnull SubtypeEnum subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @javax.annotation.Nonnull
  public SubtypeEnum getSubtype() {
    return subtype;
  }

  public void setSubtype(@javax.annotation.Nonnull SubtypeEnum subtype) {
    this.subtype = subtype;
  }


  public ExternalPositionTransfer brokerId(@javax.annotation.Nonnull String brokerId) {
    this.brokerId = brokerId;
    return this;
  }

  /**
   * Get brokerId
   * @return brokerId
   */
  @javax.annotation.Nonnull
  public String getBrokerId() {
    return brokerId;
  }

  public void setBrokerId(@javax.annotation.Nonnull String brokerId) {
    this.brokerId = brokerId;
  }


  public ExternalPositionTransfer brokerName(@javax.annotation.Nonnull String brokerName) {
    this.brokerName = brokerName;
    return this;
  }

  /**
   * Get brokerName
   * @return brokerName
   */
  @javax.annotation.Nonnull
  public String getBrokerName() {
    return brokerName;
  }

  public void setBrokerName(@javax.annotation.Nonnull String brokerName) {
    this.brokerName = brokerName;
  }


  public ExternalPositionTransfer accountAtBroker(@javax.annotation.Nonnull String accountAtBroker) {
    this.accountAtBroker = accountAtBroker;
    return this;
  }

  /**
   * Get accountAtBroker
   * @return accountAtBroker
   */
  @javax.annotation.Nonnull
  public String getAccountAtBroker() {
    return accountAtBroker;
  }

  public void setAccountAtBroker(@javax.annotation.Nonnull String accountAtBroker) {
    this.accountAtBroker = accountAtBroker;
  }


  public ExternalPositionTransfer sourceIRAType(@javax.annotation.Nullable SourceIRATypeEnum sourceIRAType) {
    this.sourceIRAType = sourceIRAType;
    return this;
  }

  /**
   * Get sourceIRAType
   * @return sourceIRAType
   */
  @javax.annotation.Nullable
  public SourceIRATypeEnum getSourceIRAType() {
    return sourceIRAType;
  }

  public void setSourceIRAType(@javax.annotation.Nullable SourceIRATypeEnum sourceIRAType) {
    this.sourceIRAType = sourceIRAType;
  }


  public ExternalPositionTransfer accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public ExternalPositionTransfer signature(@javax.annotation.Nonnull String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }

  public void setSignature(@javax.annotation.Nonnull String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalPositionTransfer externalPositionTransfer = (ExternalPositionTransfer) o;
    return Objects.equals(this.clientInstructionId, externalPositionTransfer.clientInstructionId) &&
        Objects.equals(this.type, externalPositionTransfer.type) &&
        Objects.equals(this.subtype, externalPositionTransfer.subtype) &&
        Objects.equals(this.brokerId, externalPositionTransfer.brokerId) &&
        Objects.equals(this.brokerName, externalPositionTransfer.brokerName) &&
        Objects.equals(this.accountAtBroker, externalPositionTransfer.accountAtBroker) &&
        Objects.equals(this.sourceIRAType, externalPositionTransfer.sourceIRAType) &&
        Objects.equals(this.accountId, externalPositionTransfer.accountId) &&
        Objects.equals(this.signature, externalPositionTransfer.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInstructionId, type, subtype, brokerId, brokerName, accountAtBroker, sourceIRAType, accountId, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalPositionTransfer {\n");
    sb.append("    clientInstructionId: ").append(toIndentedString(clientInstructionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    brokerId: ").append(toIndentedString(brokerId)).append("\n");
    sb.append("    brokerName: ").append(toIndentedString(brokerName)).append("\n");
    sb.append("    accountAtBroker: ").append(toIndentedString(accountAtBroker)).append("\n");
    sb.append("    sourceIRAType: ").append(toIndentedString(sourceIRAType)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInstructionId");
    openapiFields.add("type");
    openapiFields.add("subtype");
    openapiFields.add("brokerId");
    openapiFields.add("brokerName");
    openapiFields.add("accountAtBroker");
    openapiFields.add("sourceIRAType");
    openapiFields.add("accountId");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientInstructionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("subtype");
    openapiRequiredFields.add("brokerId");
    openapiRequiredFields.add("brokerName");
    openapiRequiredFields.add("accountAtBroker");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("signature");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalPositionTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalPositionTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalPositionTransfer is not found in the empty JSON string", ExternalPositionTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalPositionTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalPositionTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExternalPositionTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      // validate the required field `subtype`
      SubtypeEnum.validateJsonElement(jsonObj.get("subtype"));
      if (!jsonObj.get("brokerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerId").toString()));
      }
      if (!jsonObj.get("brokerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerName").toString()));
      }
      if (!jsonObj.get("accountAtBroker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAtBroker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAtBroker").toString()));
      }
      if ((jsonObj.get("sourceIRAType") != null && !jsonObj.get("sourceIRAType").isJsonNull()) && !jsonObj.get("sourceIRAType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIRAType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIRAType").toString()));
      }
      // validate the optional field `sourceIRAType`
      if (jsonObj.get("sourceIRAType") != null && !jsonObj.get("sourceIRAType").isJsonNull()) {
        SourceIRATypeEnum.validateJsonElement(jsonObj.get("sourceIRAType"));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalPositionTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalPositionTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalPositionTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalPositionTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalPositionTransfer>() {
           @Override
           public void write(JsonWriter out, ExternalPositionTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalPositionTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalPositionTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalPositionTransfer
   * @throws IOException if the JSON string is invalid with respect to ExternalPositionTransfer
   */
  public static ExternalPositionTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalPositionTransfer.class);
  }

  /**
   * Convert an instance of ExternalPositionTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

