/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderPreviewAmount;
import org.openapitools.client.model.OrderPreviewEquity;
import org.openapitools.client.model.OrderPreviewInitial;
import org.openapitools.client.model.OrderPreviewMaintenance;
import org.openapitools.client.model.OrderPreviewPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Projected costs and changes to margin and equity values in the account, if the order ticket were executed in full.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class OrderPreview {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private OrderPreviewAmount amount;

  public static final String SERIALIZED_NAME_EQUITY = "equity";
  @SerializedName(SERIALIZED_NAME_EQUITY)
  @javax.annotation.Nullable
  private OrderPreviewEquity equity;

  public static final String SERIALIZED_NAME_INITIAL = "initial";
  @SerializedName(SERIALIZED_NAME_INITIAL)
  @javax.annotation.Nullable
  private OrderPreviewInitial initial;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  @javax.annotation.Nullable
  private OrderPreviewMaintenance maintenance;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  @javax.annotation.Nullable
  private OrderPreviewPosition position;

  public static final String SERIALIZED_NAME_WARN = "warn";
  @SerializedName(SERIALIZED_NAME_WARN)
  @javax.annotation.Nullable
  private String warn;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public OrderPreview() {
  }

  public OrderPreview amount(@javax.annotation.Nullable OrderPreviewAmount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public OrderPreviewAmount getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable OrderPreviewAmount amount) {
    this.amount = amount;
  }


  public OrderPreview equity(@javax.annotation.Nullable OrderPreviewEquity equity) {
    this.equity = equity;
    return this;
  }

  /**
   * Get equity
   * @return equity
   */
  @javax.annotation.Nullable
  public OrderPreviewEquity getEquity() {
    return equity;
  }

  public void setEquity(@javax.annotation.Nullable OrderPreviewEquity equity) {
    this.equity = equity;
  }


  public OrderPreview initial(@javax.annotation.Nullable OrderPreviewInitial initial) {
    this.initial = initial;
    return this;
  }

  /**
   * Get initial
   * @return initial
   */
  @javax.annotation.Nullable
  public OrderPreviewInitial getInitial() {
    return initial;
  }

  public void setInitial(@javax.annotation.Nullable OrderPreviewInitial initial) {
    this.initial = initial;
  }


  public OrderPreview maintenance(@javax.annotation.Nullable OrderPreviewMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public OrderPreviewMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(@javax.annotation.Nullable OrderPreviewMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public OrderPreview position(@javax.annotation.Nullable OrderPreviewPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public OrderPreviewPosition getPosition() {
    return position;
  }

  public void setPosition(@javax.annotation.Nullable OrderPreviewPosition position) {
    this.position = position;
  }


  public OrderPreview warn(@javax.annotation.Nullable String warn) {
    this.warn = warn;
    return this;
  }

  /**
   * Human-readable text of warning message, if applicable. Otherwise null.
   * @return warn
   */
  @javax.annotation.Nullable
  public String getWarn() {
    return warn;
  }

  public void setWarn(@javax.annotation.Nullable String warn) {
    this.warn = warn;
  }


  public OrderPreview error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * Human-readable text of an error message, if applicable. Otherwise null.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPreview orderPreview = (OrderPreview) o;
    return Objects.equals(this.amount, orderPreview.amount) &&
        Objects.equals(this.equity, orderPreview.equity) &&
        Objects.equals(this.initial, orderPreview.initial) &&
        Objects.equals(this.maintenance, orderPreview.maintenance) &&
        Objects.equals(this.position, orderPreview.position) &&
        Objects.equals(this.warn, orderPreview.warn) &&
        Objects.equals(this.error, orderPreview.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, equity, initial, maintenance, position, warn, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPreview {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    initial: ").append(toIndentedString(initial)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    warn: ").append(toIndentedString(warn)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("equity");
    openapiFields.add("initial");
    openapiFields.add("maintenance");
    openapiFields.add("position");
    openapiFields.add("warn");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPreview is not found in the empty JSON string", OrderPreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderPreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amount`
      if (jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) {
        OrderPreviewAmount.validateJsonElement(jsonObj.get("amount"));
      }
      // validate the optional field `equity`
      if (jsonObj.get("equity") != null && !jsonObj.get("equity").isJsonNull()) {
        OrderPreviewEquity.validateJsonElement(jsonObj.get("equity"));
      }
      // validate the optional field `initial`
      if (jsonObj.get("initial") != null && !jsonObj.get("initial").isJsonNull()) {
        OrderPreviewInitial.validateJsonElement(jsonObj.get("initial"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        OrderPreviewMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        OrderPreviewPosition.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("warn") != null && !jsonObj.get("warn").isJsonNull()) && !jsonObj.get("warn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warn").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPreview>() {
           @Override
           public void write(JsonWriter out, OrderPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPreview
   * @throws IOException if the JSON string is invalid with respect to OrderPreview
   */
  public static OrderPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPreview.class);
  }

  /**
   * Convert an instance of OrderPreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

