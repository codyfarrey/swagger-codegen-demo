/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object containing watchlist entry for a single instrument.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SingleWatchlistEntry {
  /**
   * All-capital, shorthand security type identifier of the instrument.
   */
  @JsonAdapter(STEnum.Adapter.class)
  public enum STEnum {
    STK("STK"),
    
    OPT("OPT"),
    
    FUT("FUT"),
    
    BOND("BOND"),
    
    FUND("FUND"),
    
    WAR("WAR"),
    
    CASH("CASH"),
    
    CRYPTO("CRYPTO");

    private String value;

    STEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static STEnum fromValue(String value) {
      for (STEnum b : STEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<STEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final STEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public STEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return STEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      STEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_S_T = "ST";
  @SerializedName(SERIALIZED_NAME_S_T)
  @javax.annotation.Nullable
  private STEnum ST;

  public static final String SERIALIZED_NAME_C = "C";
  @SerializedName(SERIALIZED_NAME_C)
  @javax.annotation.Nullable
  private String C;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private Integer conid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  /**
   * All-capital, shorthand security type identifier of the instrument.
   */
  @JsonAdapter(AssetClassEnum.Adapter.class)
  public enum AssetClassEnum {
    STK("STK"),
    
    OPT("OPT"),
    
    FUT("FUT"),
    
    BOND("BOND"),
    
    FUND("FUND"),
    
    WAR("WAR"),
    
    CASH("CASH"),
    
    CRYPTO("CRYPTO");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetClassEnum fromValue(String value) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  @javax.annotation.Nullable
  private AssetClassEnum assetClass;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  @javax.annotation.Nullable
  private String ticker;

  public static final String SERIALIZED_NAME_CHINESE_NAME = "chineseName";
  @SerializedName(SERIALIZED_NAME_CHINESE_NAME)
  @javax.annotation.Nullable
  private String chineseName;

  public SingleWatchlistEntry() {
  }

  public SingleWatchlistEntry ST(@javax.annotation.Nullable STEnum ST) {
    this.ST = ST;
    return this;
  }

  /**
   * All-capital, shorthand security type identifier of the instrument.
   * @return ST
   */
  @javax.annotation.Nullable
  public STEnum getST() {
    return ST;
  }

  public void setST(@javax.annotation.Nullable STEnum ST) {
    this.ST = ST;
  }


  public SingleWatchlistEntry C(@javax.annotation.Nullable String C) {
    this.C = C;
    return this;
  }

  /**
   * Instrument conid as a string.
   * @return C
   */
  @javax.annotation.Nullable
  public String getC() {
    return C;
  }

  public void setC(@javax.annotation.Nullable String C) {
    this.C = C;
  }


  public SingleWatchlistEntry conid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
    return this;
  }

  /**
   * IB contract ID of the instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public Integer getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
  }


  public SingleWatchlistEntry name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Complete display name of the instrument.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public SingleWatchlistEntry fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full display presentation of the instrument symbol.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public SingleWatchlistEntry assetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
    return this;
  }

  /**
   * All-capital, shorthand security type identifier of the instrument.
   * @return assetClass
   */
  @javax.annotation.Nullable
  public AssetClassEnum getAssetClass() {
    return assetClass;
  }

  public void setAssetClass(@javax.annotation.Nullable AssetClassEnum assetClass) {
    this.assetClass = assetClass;
  }


  public SingleWatchlistEntry ticker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Symbol of the instrument.
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
  }


  public SingleWatchlistEntry chineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
    return this;
  }

  /**
   * Rendering of the instrument name in Chinese.
   * @return chineseName
   */
  @javax.annotation.Nullable
  public String getChineseName() {
    return chineseName;
  }

  public void setChineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleWatchlistEntry singleWatchlistEntry = (SingleWatchlistEntry) o;
    return Objects.equals(this.ST, singleWatchlistEntry.ST) &&
        Objects.equals(this.C, singleWatchlistEntry.C) &&
        Objects.equals(this.conid, singleWatchlistEntry.conid) &&
        Objects.equals(this.name, singleWatchlistEntry.name) &&
        Objects.equals(this.fullName, singleWatchlistEntry.fullName) &&
        Objects.equals(this.assetClass, singleWatchlistEntry.assetClass) &&
        Objects.equals(this.ticker, singleWatchlistEntry.ticker) &&
        Objects.equals(this.chineseName, singleWatchlistEntry.chineseName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ST, C, conid, name, fullName, assetClass, ticker, chineseName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleWatchlistEntry {\n");
    sb.append("    ST: ").append(toIndentedString(ST)).append("\n");
    sb.append("    C: ").append(toIndentedString(C)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    chineseName: ").append(toIndentedString(chineseName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ST");
    openapiFields.add("C");
    openapiFields.add("conid");
    openapiFields.add("name");
    openapiFields.add("fullName");
    openapiFields.add("assetClass");
    openapiFields.add("ticker");
    openapiFields.add("chineseName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleWatchlistEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleWatchlistEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleWatchlistEntry is not found in the empty JSON string", SingleWatchlistEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleWatchlistEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleWatchlistEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ST") != null && !jsonObj.get("ST").isJsonNull()) && !jsonObj.get("ST").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ST` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ST").toString()));
      }
      // validate the optional field `ST`
      if (jsonObj.get("ST") != null && !jsonObj.get("ST").isJsonNull()) {
        STEnum.validateJsonElement(jsonObj.get("ST"));
      }
      if ((jsonObj.get("C") != null && !jsonObj.get("C").isJsonNull()) && !jsonObj.get("C").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `C` to be a primitive type in the JSON string but got `%s`", jsonObj.get("C").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      // validate the optional field `assetClass`
      if (jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) {
        AssetClassEnum.validateJsonElement(jsonObj.get("assetClass"));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("chineseName") != null && !jsonObj.get("chineseName").isJsonNull()) && !jsonObj.get("chineseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chineseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chineseName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleWatchlistEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleWatchlistEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleWatchlistEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleWatchlistEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleWatchlistEntry>() {
           @Override
           public void write(JsonWriter out, SingleWatchlistEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleWatchlistEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleWatchlistEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleWatchlistEntry
   * @throws IOException if the JSON string is invalid with respect to SingleWatchlistEntry
   */
  public static SingleWatchlistEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleWatchlistEntry.class);
  }

  /**
   * Convert an instance of SingleWatchlistEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

