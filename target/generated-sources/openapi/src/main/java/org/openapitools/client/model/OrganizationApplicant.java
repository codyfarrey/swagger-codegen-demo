/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountSupportType;
import org.openapitools.client.model.AccreditedInvestorInformation;
import org.openapitools.client.model.AssociatedEntities;
import org.openapitools.client.model.FinancialInformation;
import org.openapitools.client.model.FormW8BENE;
import org.openapitools.client.model.FormW8IMY;
import org.openapitools.client.model.ManagingOwner;
import org.openapitools.client.model.OrganizationIdentification;
import org.openapitools.client.model.RegulatedMembership;
import org.openapitools.client.model.RegulatoryInformation;
import org.openapitools.client.model.TaxResidency;
import org.openapitools.client.model.WithholdingStatementType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrganizationApplicant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class OrganizationApplicant {
  public static final String SERIALIZED_NAME_IDENTIFICATIONS = "identifications";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATIONS)
  @javax.annotation.Nullable
  private List<OrganizationIdentification> identifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCOUNT_SUPPORT = "accountSupport";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SUPPORT)
  @javax.annotation.Nullable
  private AccountSupportType accountSupport;

  public static final String SERIALIZED_NAME_FINANCIAL_INFORMATION = "financialInformation";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_INFORMATION)
  @javax.annotation.Nullable
  private List<FinancialInformation> financialInformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCREDITED_INVESTOR_INFORMATION = "accreditedInvestorInformation";
  @SerializedName(SERIALIZED_NAME_ACCREDITED_INVESTOR_INFORMATION)
  @javax.annotation.Nullable
  private AccreditedInvestorInformation accreditedInvestorInformation;

  public static final String SERIALIZED_NAME_REGULATORY_INFORMATION = "regulatoryInformation";
  @SerializedName(SERIALIZED_NAME_REGULATORY_INFORMATION)
  @javax.annotation.Nullable
  private List<RegulatoryInformation> regulatoryInformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGING_OWNER = "managingOwner";
  @SerializedName(SERIALIZED_NAME_MANAGING_OWNER)
  @javax.annotation.Nullable
  private ManagingOwner managingOwner;

  public static final String SERIALIZED_NAME_ASSOCIATED_ENTITIES = "associatedEntities";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_ENTITIES)
  @javax.annotation.Nullable
  private AssociatedEntities associatedEntities;

  public static final String SERIALIZED_NAME_REGULATED_MEMBERSHIPS = "regulatedMemberships";
  @SerializedName(SERIALIZED_NAME_REGULATED_MEMBERSHIPS)
  @javax.annotation.Nullable
  private List<RegulatedMembership> regulatedMemberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_RESIDENCIES = "taxResidencies";
  @SerializedName(SERIALIZED_NAME_TAX_RESIDENCIES)
  @javax.annotation.Nullable
  private List<TaxResidency> taxResidencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_W8_BEN_E = "w8BenE";
  @SerializedName(SERIALIZED_NAME_W8_BEN_E)
  @javax.annotation.Nullable
  private FormW8BENE w8BenE;

  public static final String SERIALIZED_NAME_W8_I_M_Y = "w8IMY";
  @SerializedName(SERIALIZED_NAME_W8_I_M_Y)
  @javax.annotation.Nullable
  private FormW8IMY w8IMY;

  public static final String SERIALIZED_NAME_WITHHOLDING_STATEMENT = "withholdingStatement";
  @SerializedName(SERIALIZED_NAME_WITHHOLDING_STATEMENT)
  @javax.annotation.Nullable
  private WithholdingStatementType withholdingStatement;

  /**
   * Gets or Sets typeOfTrading
   */
  @JsonAdapter(TypeOfTradingEnum.Adapter.class)
  public enum TypeOfTradingEnum {
    FIRM("FIRM"),
    
    CUSTOMER("CUSTOMER");

    private String value;

    TypeOfTradingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeOfTradingEnum fromValue(String value) {
      for (TypeOfTradingEnum b : TypeOfTradingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeOfTradingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeOfTradingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeOfTradingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeOfTradingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeOfTradingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_OF_TRADING = "typeOfTrading";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_TRADING)
  @javax.annotation.Nullable
  private TypeOfTradingEnum typeOfTrading;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LLC("LLC"),
    
    CORPORATION("CORPORATION"),
    
    PARTNERSHIP("PARTNERSHIP"),
    
    UNINCORPORATED_BUSINESS("UNINCORPORATED BUSINESS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ORG_US_SUBSIDIARY = "orgUsSubsidiary";
  @SerializedName(SERIALIZED_NAME_ORG_US_SUBSIDIARY)
  @javax.annotation.Nullable
  private Boolean orgUsSubsidiary;

  public static final String SERIALIZED_NAME_QUALIFIED_INTERMEDIARY = "qualifiedIntermediary";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_INTERMEDIARY)
  @javax.annotation.Nullable
  private Boolean qualifiedIntermediary;

  public static final String SERIALIZED_NAME_ASSUMED_PRIMARY_REPORTING = "assumedPrimaryReporting";
  @SerializedName(SERIALIZED_NAME_ASSUMED_PRIMARY_REPORTING)
  @javax.annotation.Nullable
  private Boolean assumedPrimaryReporting;

  public static final String SERIALIZED_NAME_ACCEPTED_PRIMARY_WITHHOLDING = "acceptedPrimaryWithholding";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PRIMARY_WITHHOLDING)
  @javax.annotation.Nullable
  private Boolean acceptedPrimaryWithholding;

  /**
   * Gets or Sets usTaxPurposeType
   */
  @JsonAdapter(UsTaxPurposeTypeEnum.Adapter.class)
  public enum UsTaxPurposeTypeEnum {
    C("C"),
    
    P("P"),
    
    E("E");

    private String value;

    UsTaxPurposeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsTaxPurposeTypeEnum fromValue(String value) {
      for (UsTaxPurposeTypeEnum b : UsTaxPurposeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsTaxPurposeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsTaxPurposeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsTaxPurposeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsTaxPurposeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsTaxPurposeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_US_TAX_PURPOSE_TYPE = "usTaxPurposeType";
  @SerializedName(SERIALIZED_NAME_US_TAX_PURPOSE_TYPE)
  @javax.annotation.Nullable
  private UsTaxPurposeTypeEnum usTaxPurposeType;

  public OrganizationApplicant() {
  }

  public OrganizationApplicant identifications(@javax.annotation.Nullable List<OrganizationIdentification> identifications) {
    this.identifications = identifications;
    return this;
  }

  public OrganizationApplicant addIdentificationsItem(OrganizationIdentification identificationsItem) {
    if (this.identifications == null) {
      this.identifications = new ArrayList<>();
    }
    this.identifications.add(identificationsItem);
    return this;
  }

  /**
   * Get identifications
   * @return identifications
   */
  @javax.annotation.Nullable
  public List<OrganizationIdentification> getIdentifications() {
    return identifications;
  }

  public void setIdentifications(@javax.annotation.Nullable List<OrganizationIdentification> identifications) {
    this.identifications = identifications;
  }


  public OrganizationApplicant accountSupport(@javax.annotation.Nullable AccountSupportType accountSupport) {
    this.accountSupport = accountSupport;
    return this;
  }

  /**
   * Get accountSupport
   * @return accountSupport
   */
  @javax.annotation.Nullable
  public AccountSupportType getAccountSupport() {
    return accountSupport;
  }

  public void setAccountSupport(@javax.annotation.Nullable AccountSupportType accountSupport) {
    this.accountSupport = accountSupport;
  }


  public OrganizationApplicant financialInformation(@javax.annotation.Nullable List<FinancialInformation> financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

  public OrganizationApplicant addFinancialInformationItem(FinancialInformation financialInformationItem) {
    if (this.financialInformation == null) {
      this.financialInformation = new ArrayList<>();
    }
    this.financialInformation.add(financialInformationItem);
    return this;
  }

  /**
   * Get financialInformation
   * @return financialInformation
   */
  @javax.annotation.Nullable
  public List<FinancialInformation> getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(@javax.annotation.Nullable List<FinancialInformation> financialInformation) {
    this.financialInformation = financialInformation;
  }


  public OrganizationApplicant accreditedInvestorInformation(@javax.annotation.Nullable AccreditedInvestorInformation accreditedInvestorInformation) {
    this.accreditedInvestorInformation = accreditedInvestorInformation;
    return this;
  }

  /**
   * Get accreditedInvestorInformation
   * @return accreditedInvestorInformation
   */
  @javax.annotation.Nullable
  public AccreditedInvestorInformation getAccreditedInvestorInformation() {
    return accreditedInvestorInformation;
  }

  public void setAccreditedInvestorInformation(@javax.annotation.Nullable AccreditedInvestorInformation accreditedInvestorInformation) {
    this.accreditedInvestorInformation = accreditedInvestorInformation;
  }


  public OrganizationApplicant regulatoryInformation(@javax.annotation.Nullable List<RegulatoryInformation> regulatoryInformation) {
    this.regulatoryInformation = regulatoryInformation;
    return this;
  }

  public OrganizationApplicant addRegulatoryInformationItem(RegulatoryInformation regulatoryInformationItem) {
    if (this.regulatoryInformation == null) {
      this.regulatoryInformation = new ArrayList<>();
    }
    this.regulatoryInformation.add(regulatoryInformationItem);
    return this;
  }

  /**
   * Get regulatoryInformation
   * @return regulatoryInformation
   */
  @javax.annotation.Nullable
  public List<RegulatoryInformation> getRegulatoryInformation() {
    return regulatoryInformation;
  }

  public void setRegulatoryInformation(@javax.annotation.Nullable List<RegulatoryInformation> regulatoryInformation) {
    this.regulatoryInformation = regulatoryInformation;
  }


  public OrganizationApplicant managingOwner(@javax.annotation.Nullable ManagingOwner managingOwner) {
    this.managingOwner = managingOwner;
    return this;
  }

  /**
   * Get managingOwner
   * @return managingOwner
   */
  @javax.annotation.Nullable
  public ManagingOwner getManagingOwner() {
    return managingOwner;
  }

  public void setManagingOwner(@javax.annotation.Nullable ManagingOwner managingOwner) {
    this.managingOwner = managingOwner;
  }


  public OrganizationApplicant associatedEntities(@javax.annotation.Nullable AssociatedEntities associatedEntities) {
    this.associatedEntities = associatedEntities;
    return this;
  }

  /**
   * Get associatedEntities
   * @return associatedEntities
   */
  @javax.annotation.Nullable
  public AssociatedEntities getAssociatedEntities() {
    return associatedEntities;
  }

  public void setAssociatedEntities(@javax.annotation.Nullable AssociatedEntities associatedEntities) {
    this.associatedEntities = associatedEntities;
  }


  public OrganizationApplicant regulatedMemberships(@javax.annotation.Nullable List<RegulatedMembership> regulatedMemberships) {
    this.regulatedMemberships = regulatedMemberships;
    return this;
  }

  public OrganizationApplicant addRegulatedMembershipsItem(RegulatedMembership regulatedMembershipsItem) {
    if (this.regulatedMemberships == null) {
      this.regulatedMemberships = new ArrayList<>();
    }
    this.regulatedMemberships.add(regulatedMembershipsItem);
    return this;
  }

  /**
   * Get regulatedMemberships
   * @return regulatedMemberships
   */
  @javax.annotation.Nullable
  public List<RegulatedMembership> getRegulatedMemberships() {
    return regulatedMemberships;
  }

  public void setRegulatedMemberships(@javax.annotation.Nullable List<RegulatedMembership> regulatedMemberships) {
    this.regulatedMemberships = regulatedMemberships;
  }


  public OrganizationApplicant taxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
    return this;
  }

  public OrganizationApplicant addTaxResidenciesItem(TaxResidency taxResidenciesItem) {
    if (this.taxResidencies == null) {
      this.taxResidencies = new ArrayList<>();
    }
    this.taxResidencies.add(taxResidenciesItem);
    return this;
  }

  /**
   * Get taxResidencies
   * @return taxResidencies
   */
  @javax.annotation.Nullable
  public List<TaxResidency> getTaxResidencies() {
    return taxResidencies;
  }

  public void setTaxResidencies(@javax.annotation.Nullable List<TaxResidency> taxResidencies) {
    this.taxResidencies = taxResidencies;
  }


  public OrganizationApplicant w8BenE(@javax.annotation.Nullable FormW8BENE w8BenE) {
    this.w8BenE = w8BenE;
    return this;
  }

  /**
   * Get w8BenE
   * @return w8BenE
   */
  @javax.annotation.Nullable
  public FormW8BENE getW8BenE() {
    return w8BenE;
  }

  public void setW8BenE(@javax.annotation.Nullable FormW8BENE w8BenE) {
    this.w8BenE = w8BenE;
  }


  public OrganizationApplicant w8IMY(@javax.annotation.Nullable FormW8IMY w8IMY) {
    this.w8IMY = w8IMY;
    return this;
  }

  /**
   * Get w8IMY
   * @return w8IMY
   */
  @javax.annotation.Nullable
  public FormW8IMY getW8IMY() {
    return w8IMY;
  }

  public void setW8IMY(@javax.annotation.Nullable FormW8IMY w8IMY) {
    this.w8IMY = w8IMY;
  }


  public OrganizationApplicant withholdingStatement(@javax.annotation.Nullable WithholdingStatementType withholdingStatement) {
    this.withholdingStatement = withholdingStatement;
    return this;
  }

  /**
   * Get withholdingStatement
   * @return withholdingStatement
   */
  @javax.annotation.Nullable
  public WithholdingStatementType getWithholdingStatement() {
    return withholdingStatement;
  }

  public void setWithholdingStatement(@javax.annotation.Nullable WithholdingStatementType withholdingStatement) {
    this.withholdingStatement = withholdingStatement;
  }


  public OrganizationApplicant typeOfTrading(@javax.annotation.Nullable TypeOfTradingEnum typeOfTrading) {
    this.typeOfTrading = typeOfTrading;
    return this;
  }

  /**
   * Get typeOfTrading
   * @return typeOfTrading
   */
  @javax.annotation.Nullable
  public TypeOfTradingEnum getTypeOfTrading() {
    return typeOfTrading;
  }

  public void setTypeOfTrading(@javax.annotation.Nullable TypeOfTradingEnum typeOfTrading) {
    this.typeOfTrading = typeOfTrading;
  }


  public OrganizationApplicant type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public OrganizationApplicant orgUsSubsidiary(@javax.annotation.Nullable Boolean orgUsSubsidiary) {
    this.orgUsSubsidiary = orgUsSubsidiary;
    return this;
  }

  /**
   * Get orgUsSubsidiary
   * @return orgUsSubsidiary
   */
  @javax.annotation.Nullable
  public Boolean getOrgUsSubsidiary() {
    return orgUsSubsidiary;
  }

  public void setOrgUsSubsidiary(@javax.annotation.Nullable Boolean orgUsSubsidiary) {
    this.orgUsSubsidiary = orgUsSubsidiary;
  }


  public OrganizationApplicant qualifiedIntermediary(@javax.annotation.Nullable Boolean qualifiedIntermediary) {
    this.qualifiedIntermediary = qualifiedIntermediary;
    return this;
  }

  /**
   * Get qualifiedIntermediary
   * @return qualifiedIntermediary
   */
  @javax.annotation.Nullable
  public Boolean getQualifiedIntermediary() {
    return qualifiedIntermediary;
  }

  public void setQualifiedIntermediary(@javax.annotation.Nullable Boolean qualifiedIntermediary) {
    this.qualifiedIntermediary = qualifiedIntermediary;
  }


  public OrganizationApplicant assumedPrimaryReporting(@javax.annotation.Nullable Boolean assumedPrimaryReporting) {
    this.assumedPrimaryReporting = assumedPrimaryReporting;
    return this;
  }

  /**
   * Get assumedPrimaryReporting
   * @return assumedPrimaryReporting
   */
  @javax.annotation.Nullable
  public Boolean getAssumedPrimaryReporting() {
    return assumedPrimaryReporting;
  }

  public void setAssumedPrimaryReporting(@javax.annotation.Nullable Boolean assumedPrimaryReporting) {
    this.assumedPrimaryReporting = assumedPrimaryReporting;
  }


  public OrganizationApplicant acceptedPrimaryWithholding(@javax.annotation.Nullable Boolean acceptedPrimaryWithholding) {
    this.acceptedPrimaryWithholding = acceptedPrimaryWithholding;
    return this;
  }

  /**
   * Get acceptedPrimaryWithholding
   * @return acceptedPrimaryWithholding
   */
  @javax.annotation.Nullable
  public Boolean getAcceptedPrimaryWithholding() {
    return acceptedPrimaryWithholding;
  }

  public void setAcceptedPrimaryWithholding(@javax.annotation.Nullable Boolean acceptedPrimaryWithholding) {
    this.acceptedPrimaryWithholding = acceptedPrimaryWithholding;
  }


  public OrganizationApplicant usTaxPurposeType(@javax.annotation.Nullable UsTaxPurposeTypeEnum usTaxPurposeType) {
    this.usTaxPurposeType = usTaxPurposeType;
    return this;
  }

  /**
   * Get usTaxPurposeType
   * @return usTaxPurposeType
   */
  @javax.annotation.Nullable
  public UsTaxPurposeTypeEnum getUsTaxPurposeType() {
    return usTaxPurposeType;
  }

  public void setUsTaxPurposeType(@javax.annotation.Nullable UsTaxPurposeTypeEnum usTaxPurposeType) {
    this.usTaxPurposeType = usTaxPurposeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationApplicant organizationApplicant = (OrganizationApplicant) o;
    return Objects.equals(this.identifications, organizationApplicant.identifications) &&
        Objects.equals(this.accountSupport, organizationApplicant.accountSupport) &&
        Objects.equals(this.financialInformation, organizationApplicant.financialInformation) &&
        Objects.equals(this.accreditedInvestorInformation, organizationApplicant.accreditedInvestorInformation) &&
        Objects.equals(this.regulatoryInformation, organizationApplicant.regulatoryInformation) &&
        Objects.equals(this.managingOwner, organizationApplicant.managingOwner) &&
        Objects.equals(this.associatedEntities, organizationApplicant.associatedEntities) &&
        Objects.equals(this.regulatedMemberships, organizationApplicant.regulatedMemberships) &&
        Objects.equals(this.taxResidencies, organizationApplicant.taxResidencies) &&
        Objects.equals(this.w8BenE, organizationApplicant.w8BenE) &&
        Objects.equals(this.w8IMY, organizationApplicant.w8IMY) &&
        Objects.equals(this.withholdingStatement, organizationApplicant.withholdingStatement) &&
        Objects.equals(this.typeOfTrading, organizationApplicant.typeOfTrading) &&
        Objects.equals(this.type, organizationApplicant.type) &&
        Objects.equals(this.orgUsSubsidiary, organizationApplicant.orgUsSubsidiary) &&
        Objects.equals(this.qualifiedIntermediary, organizationApplicant.qualifiedIntermediary) &&
        Objects.equals(this.assumedPrimaryReporting, organizationApplicant.assumedPrimaryReporting) &&
        Objects.equals(this.acceptedPrimaryWithholding, organizationApplicant.acceptedPrimaryWithholding) &&
        Objects.equals(this.usTaxPurposeType, organizationApplicant.usTaxPurposeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifications, accountSupport, financialInformation, accreditedInvestorInformation, regulatoryInformation, managingOwner, associatedEntities, regulatedMemberships, taxResidencies, w8BenE, w8IMY, withholdingStatement, typeOfTrading, type, orgUsSubsidiary, qualifiedIntermediary, assumedPrimaryReporting, acceptedPrimaryWithholding, usTaxPurposeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationApplicant {\n");
    sb.append("    identifications: ").append(toIndentedString(identifications)).append("\n");
    sb.append("    accountSupport: ").append(toIndentedString(accountSupport)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    accreditedInvestorInformation: ").append(toIndentedString(accreditedInvestorInformation)).append("\n");
    sb.append("    regulatoryInformation: ").append(toIndentedString(regulatoryInformation)).append("\n");
    sb.append("    managingOwner: ").append(toIndentedString(managingOwner)).append("\n");
    sb.append("    associatedEntities: ").append(toIndentedString(associatedEntities)).append("\n");
    sb.append("    regulatedMemberships: ").append(toIndentedString(regulatedMemberships)).append("\n");
    sb.append("    taxResidencies: ").append(toIndentedString(taxResidencies)).append("\n");
    sb.append("    w8BenE: ").append(toIndentedString(w8BenE)).append("\n");
    sb.append("    w8IMY: ").append(toIndentedString(w8IMY)).append("\n");
    sb.append("    withholdingStatement: ").append(toIndentedString(withholdingStatement)).append("\n");
    sb.append("    typeOfTrading: ").append(toIndentedString(typeOfTrading)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    orgUsSubsidiary: ").append(toIndentedString(orgUsSubsidiary)).append("\n");
    sb.append("    qualifiedIntermediary: ").append(toIndentedString(qualifiedIntermediary)).append("\n");
    sb.append("    assumedPrimaryReporting: ").append(toIndentedString(assumedPrimaryReporting)).append("\n");
    sb.append("    acceptedPrimaryWithholding: ").append(toIndentedString(acceptedPrimaryWithholding)).append("\n");
    sb.append("    usTaxPurposeType: ").append(toIndentedString(usTaxPurposeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifications");
    openapiFields.add("accountSupport");
    openapiFields.add("financialInformation");
    openapiFields.add("accreditedInvestorInformation");
    openapiFields.add("regulatoryInformation");
    openapiFields.add("managingOwner");
    openapiFields.add("associatedEntities");
    openapiFields.add("regulatedMemberships");
    openapiFields.add("taxResidencies");
    openapiFields.add("w8BenE");
    openapiFields.add("w8IMY");
    openapiFields.add("withholdingStatement");
    openapiFields.add("typeOfTrading");
    openapiFields.add("type");
    openapiFields.add("orgUsSubsidiary");
    openapiFields.add("qualifiedIntermediary");
    openapiFields.add("assumedPrimaryReporting");
    openapiFields.add("acceptedPrimaryWithholding");
    openapiFields.add("usTaxPurposeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationApplicant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationApplicant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationApplicant is not found in the empty JSON string", OrganizationApplicant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationApplicant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationApplicant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("identifications") != null && !jsonObj.get("identifications").isJsonNull()) {
        JsonArray jsonArrayidentifications = jsonObj.getAsJsonArray("identifications");
        if (jsonArrayidentifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifications` to be an array in the JSON string but got `%s`", jsonObj.get("identifications").toString()));
          }

          // validate the optional field `identifications` (array)
          for (int i = 0; i < jsonArrayidentifications.size(); i++) {
            OrganizationIdentification.validateJsonElement(jsonArrayidentifications.get(i));
          };
        }
      }
      // validate the optional field `accountSupport`
      if (jsonObj.get("accountSupport") != null && !jsonObj.get("accountSupport").isJsonNull()) {
        AccountSupportType.validateJsonElement(jsonObj.get("accountSupport"));
      }
      if (jsonObj.get("financialInformation") != null && !jsonObj.get("financialInformation").isJsonNull()) {
        JsonArray jsonArrayfinancialInformation = jsonObj.getAsJsonArray("financialInformation");
        if (jsonArrayfinancialInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("financialInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `financialInformation` to be an array in the JSON string but got `%s`", jsonObj.get("financialInformation").toString()));
          }

          // validate the optional field `financialInformation` (array)
          for (int i = 0; i < jsonArrayfinancialInformation.size(); i++) {
            FinancialInformation.validateJsonElement(jsonArrayfinancialInformation.get(i));
          };
        }
      }
      // validate the optional field `accreditedInvestorInformation`
      if (jsonObj.get("accreditedInvestorInformation") != null && !jsonObj.get("accreditedInvestorInformation").isJsonNull()) {
        AccreditedInvestorInformation.validateJsonElement(jsonObj.get("accreditedInvestorInformation"));
      }
      if (jsonObj.get("regulatoryInformation") != null && !jsonObj.get("regulatoryInformation").isJsonNull()) {
        JsonArray jsonArrayregulatoryInformation = jsonObj.getAsJsonArray("regulatoryInformation");
        if (jsonArrayregulatoryInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatoryInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatoryInformation` to be an array in the JSON string but got `%s`", jsonObj.get("regulatoryInformation").toString()));
          }

          // validate the optional field `regulatoryInformation` (array)
          for (int i = 0; i < jsonArrayregulatoryInformation.size(); i++) {
            RegulatoryInformation.validateJsonElement(jsonArrayregulatoryInformation.get(i));
          };
        }
      }
      // validate the optional field `managingOwner`
      if (jsonObj.get("managingOwner") != null && !jsonObj.get("managingOwner").isJsonNull()) {
        ManagingOwner.validateJsonElement(jsonObj.get("managingOwner"));
      }
      // validate the optional field `associatedEntities`
      if (jsonObj.get("associatedEntities") != null && !jsonObj.get("associatedEntities").isJsonNull()) {
        AssociatedEntities.validateJsonElement(jsonObj.get("associatedEntities"));
      }
      if (jsonObj.get("regulatedMemberships") != null && !jsonObj.get("regulatedMemberships").isJsonNull()) {
        JsonArray jsonArrayregulatedMemberships = jsonObj.getAsJsonArray("regulatedMemberships");
        if (jsonArrayregulatedMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regulatedMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regulatedMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("regulatedMemberships").toString()));
          }

          // validate the optional field `regulatedMemberships` (array)
          for (int i = 0; i < jsonArrayregulatedMemberships.size(); i++) {
            RegulatedMembership.validateJsonElement(jsonArrayregulatedMemberships.get(i));
          };
        }
      }
      if (jsonObj.get("taxResidencies") != null && !jsonObj.get("taxResidencies").isJsonNull()) {
        JsonArray jsonArraytaxResidencies = jsonObj.getAsJsonArray("taxResidencies");
        if (jsonArraytaxResidencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxResidencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxResidencies` to be an array in the JSON string but got `%s`", jsonObj.get("taxResidencies").toString()));
          }

          // validate the optional field `taxResidencies` (array)
          for (int i = 0; i < jsonArraytaxResidencies.size(); i++) {
            TaxResidency.validateJsonElement(jsonArraytaxResidencies.get(i));
          };
        }
      }
      // validate the optional field `w8BenE`
      if (jsonObj.get("w8BenE") != null && !jsonObj.get("w8BenE").isJsonNull()) {
        FormW8BENE.validateJsonElement(jsonObj.get("w8BenE"));
      }
      // validate the optional field `w8IMY`
      if (jsonObj.get("w8IMY") != null && !jsonObj.get("w8IMY").isJsonNull()) {
        FormW8IMY.validateJsonElement(jsonObj.get("w8IMY"));
      }
      // validate the optional field `withholdingStatement`
      if (jsonObj.get("withholdingStatement") != null && !jsonObj.get("withholdingStatement").isJsonNull()) {
        WithholdingStatementType.validateJsonElement(jsonObj.get("withholdingStatement"));
      }
      if ((jsonObj.get("typeOfTrading") != null && !jsonObj.get("typeOfTrading").isJsonNull()) && !jsonObj.get("typeOfTrading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeOfTrading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeOfTrading").toString()));
      }
      // validate the optional field `typeOfTrading`
      if (jsonObj.get("typeOfTrading") != null && !jsonObj.get("typeOfTrading").isJsonNull()) {
        TypeOfTradingEnum.validateJsonElement(jsonObj.get("typeOfTrading"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("usTaxPurposeType") != null && !jsonObj.get("usTaxPurposeType").isJsonNull()) && !jsonObj.get("usTaxPurposeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usTaxPurposeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usTaxPurposeType").toString()));
      }
      // validate the optional field `usTaxPurposeType`
      if (jsonObj.get("usTaxPurposeType") != null && !jsonObj.get("usTaxPurposeType").isJsonNull()) {
        UsTaxPurposeTypeEnum.validateJsonElement(jsonObj.get("usTaxPurposeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationApplicant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationApplicant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationApplicant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationApplicant.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationApplicant>() {
           @Override
           public void write(JsonWriter out, OrganizationApplicant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationApplicant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationApplicant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationApplicant
   * @throws IOException if the JSON string is invalid with respect to OrganizationApplicant
   */
  public static OrganizationApplicant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationApplicant.class);
  }

  /**
   * Convert an instance of OrganizationApplicant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

