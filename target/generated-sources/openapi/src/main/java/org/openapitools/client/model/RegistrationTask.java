/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegistrationTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class RegistrationTask {
  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  @javax.annotation.Nullable
  private String action;

  public static final String SERIALIZED_NAME_IS_REQUIRED_FOR_APPROVAL = "isRequiredForApproval";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED_FOR_APPROVAL)
  @javax.annotation.Nullable
  private Boolean isRequiredForApproval;

  public static final String SERIALIZED_NAME_IS_COMPLETED = "isCompleted";
  @SerializedName(SERIALIZED_NAME_IS_COMPLETED)
  @javax.annotation.Nullable
  private Boolean isCompleted;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "dateCompleted";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  @javax.annotation.Nullable
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public RegistrationTask() {
  }

  public RegistrationTask externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public RegistrationTask formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Get formName
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public RegistrationTask action(@javax.annotation.Nullable String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(@javax.annotation.Nullable String action) {
    this.action = action;
  }


  public RegistrationTask isRequiredForApproval(@javax.annotation.Nullable Boolean isRequiredForApproval) {
    this.isRequiredForApproval = isRequiredForApproval;
    return this;
  }

  /**
   * Get isRequiredForApproval
   * @return isRequiredForApproval
   */
  @javax.annotation.Nullable
  public Boolean getIsRequiredForApproval() {
    return isRequiredForApproval;
  }

  public void setIsRequiredForApproval(@javax.annotation.Nullable Boolean isRequiredForApproval) {
    this.isRequiredForApproval = isRequiredForApproval;
  }


  public RegistrationTask isCompleted(@javax.annotation.Nullable Boolean isCompleted) {
    this.isCompleted = isCompleted;
    return this;
  }

  /**
   * Get isCompleted
   * @return isCompleted
   */
  @javax.annotation.Nullable
  public Boolean getIsCompleted() {
    return isCompleted;
  }

  public void setIsCompleted(@javax.annotation.Nullable Boolean isCompleted) {
    this.isCompleted = isCompleted;
  }


  public RegistrationTask dateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * Get dateCompleted
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public RegistrationTask state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationTask registrationTask = (RegistrationTask) o;
    return Objects.equals(this.externalId, registrationTask.externalId) &&
        Objects.equals(this.formName, registrationTask.formName) &&
        Objects.equals(this.action, registrationTask.action) &&
        Objects.equals(this.isRequiredForApproval, registrationTask.isRequiredForApproval) &&
        Objects.equals(this.isCompleted, registrationTask.isCompleted) &&
        Objects.equals(this.dateCompleted, registrationTask.dateCompleted) &&
        Objects.equals(this.state, registrationTask.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalId, formName, action, isRequiredForApproval, isCompleted, dateCompleted, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationTask {\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    isRequiredForApproval: ").append(toIndentedString(isRequiredForApproval)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalId");
    openapiFields.add("formName");
    openapiFields.add("action");
    openapiFields.add("isRequiredForApproval");
    openapiFields.add("isCompleted");
    openapiFields.add("dateCompleted");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrationTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrationTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrationTask is not found in the empty JSON string", RegistrationTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrationTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrationTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrationTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrationTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrationTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrationTask.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrationTask>() {
           @Override
           public void write(JsonWriter out, RegistrationTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrationTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrationTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrationTask
   * @throws IOException if the JSON string is invalid with respect to RegistrationTask
   */
  public static RegistrationTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrationTask.class);
  }

  /**
   * Convert an instance of RegistrationTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

