/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserAccountsResponseChartPeriods
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class UserAccountsResponseChartPeriods {
  public static final String SERIALIZED_NAME_S_T_K = "STK";
  @SerializedName(SERIALIZED_NAME_S_T_K)
  @javax.annotation.Nullable
  private List<String> STK = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_F_D = "CFD";
  @SerializedName(SERIALIZED_NAME_C_F_D)
  @javax.annotation.Nullable
  private List<String> CFD = new ArrayList<>();

  public static final String SERIALIZED_NAME_O_P_T = "OPT";
  @SerializedName(SERIALIZED_NAME_O_P_T)
  @javax.annotation.Nullable
  private List<String> OPT = new ArrayList<>();

  public static final String SERIALIZED_NAME_F_O_P = "FOP";
  @SerializedName(SERIALIZED_NAME_F_O_P)
  @javax.annotation.Nullable
  private List<String> FOP = new ArrayList<>();

  public static final String SERIALIZED_NAME_W_A_R = "WAR";
  @SerializedName(SERIALIZED_NAME_W_A_R)
  @javax.annotation.Nullable
  private List<String> WAR = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_O_P_T = "IOPT";
  @SerializedName(SERIALIZED_NAME_I_O_P_T)
  @javax.annotation.Nullable
  private List<String> IOPT = new ArrayList<>();

  public static final String SERIALIZED_NAME_F_U_T = "FUT";
  @SerializedName(SERIALIZED_NAME_F_U_T)
  @javax.annotation.Nullable
  private List<String> FUT = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_A_S_H = "CASH";
  @SerializedName(SERIALIZED_NAME_C_A_S_H)
  @javax.annotation.Nullable
  private List<String> CASH = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_N_D = "IND";
  @SerializedName(SERIALIZED_NAME_I_N_D)
  @javax.annotation.Nullable
  private List<String> IND = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_O_N_D = "BOND";
  @SerializedName(SERIALIZED_NAME_B_O_N_D)
  @javax.annotation.Nullable
  private List<String> BOND = new ArrayList<>();

  public static final String SERIALIZED_NAME_F_U_N_D = "FUND";
  @SerializedName(SERIALIZED_NAME_F_U_N_D)
  @javax.annotation.Nullable
  private List<String> FUND = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_M_D_T_Y = "CMDTY";
  @SerializedName(SERIALIZED_NAME_C_M_D_T_Y)
  @javax.annotation.Nullable
  private List<String> CMDTY = new ArrayList<>();

  public static final String SERIALIZED_NAME_P_H_Y_S_S = "PHYSS";
  @SerializedName(SERIALIZED_NAME_P_H_Y_S_S)
  @javax.annotation.Nullable
  private List<String> PHYSS = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_R_Y_P_T_O = "CRYPTO";
  @SerializedName(SERIALIZED_NAME_C_R_Y_P_T_O)
  @javax.annotation.Nullable
  private List<String> CRYPTO = new ArrayList<>();

  public UserAccountsResponseChartPeriods() {
  }

  public UserAccountsResponseChartPeriods STK(@javax.annotation.Nullable List<String> STK) {
    this.STK = STK;
    return this;
  }

  public UserAccountsResponseChartPeriods addSTKItem(String STKItem) {
    if (this.STK == null) {
      this.STK = new ArrayList<>();
    }
    this.STK.add(STKItem);
    return this;
  }

  /**
   * Get STK
   * @return STK
   */
  @javax.annotation.Nullable
  public List<String> getSTK() {
    return STK;
  }

  public void setSTK(@javax.annotation.Nullable List<String> STK) {
    this.STK = STK;
  }


  public UserAccountsResponseChartPeriods CFD(@javax.annotation.Nullable List<String> CFD) {
    this.CFD = CFD;
    return this;
  }

  public UserAccountsResponseChartPeriods addCFDItem(String CFDItem) {
    if (this.CFD == null) {
      this.CFD = new ArrayList<>();
    }
    this.CFD.add(CFDItem);
    return this;
  }

  /**
   * Get CFD
   * @return CFD
   */
  @javax.annotation.Nullable
  public List<String> getCFD() {
    return CFD;
  }

  public void setCFD(@javax.annotation.Nullable List<String> CFD) {
    this.CFD = CFD;
  }


  public UserAccountsResponseChartPeriods OPT(@javax.annotation.Nullable List<String> OPT) {
    this.OPT = OPT;
    return this;
  }

  public UserAccountsResponseChartPeriods addOPTItem(String OPTItem) {
    if (this.OPT == null) {
      this.OPT = new ArrayList<>();
    }
    this.OPT.add(OPTItem);
    return this;
  }

  /**
   * Get OPT
   * @return OPT
   */
  @javax.annotation.Nullable
  public List<String> getOPT() {
    return OPT;
  }

  public void setOPT(@javax.annotation.Nullable List<String> OPT) {
    this.OPT = OPT;
  }


  public UserAccountsResponseChartPeriods FOP(@javax.annotation.Nullable List<String> FOP) {
    this.FOP = FOP;
    return this;
  }

  public UserAccountsResponseChartPeriods addFOPItem(String FOPItem) {
    if (this.FOP == null) {
      this.FOP = new ArrayList<>();
    }
    this.FOP.add(FOPItem);
    return this;
  }

  /**
   * Get FOP
   * @return FOP
   */
  @javax.annotation.Nullable
  public List<String> getFOP() {
    return FOP;
  }

  public void setFOP(@javax.annotation.Nullable List<String> FOP) {
    this.FOP = FOP;
  }


  public UserAccountsResponseChartPeriods WAR(@javax.annotation.Nullable List<String> WAR) {
    this.WAR = WAR;
    return this;
  }

  public UserAccountsResponseChartPeriods addWARItem(String WARItem) {
    if (this.WAR == null) {
      this.WAR = new ArrayList<>();
    }
    this.WAR.add(WARItem);
    return this;
  }

  /**
   * Get WAR
   * @return WAR
   */
  @javax.annotation.Nullable
  public List<String> getWAR() {
    return WAR;
  }

  public void setWAR(@javax.annotation.Nullable List<String> WAR) {
    this.WAR = WAR;
  }


  public UserAccountsResponseChartPeriods IOPT(@javax.annotation.Nullable List<String> IOPT) {
    this.IOPT = IOPT;
    return this;
  }

  public UserAccountsResponseChartPeriods addIOPTItem(String IOPTItem) {
    if (this.IOPT == null) {
      this.IOPT = new ArrayList<>();
    }
    this.IOPT.add(IOPTItem);
    return this;
  }

  /**
   * Get IOPT
   * @return IOPT
   */
  @javax.annotation.Nullable
  public List<String> getIOPT() {
    return IOPT;
  }

  public void setIOPT(@javax.annotation.Nullable List<String> IOPT) {
    this.IOPT = IOPT;
  }


  public UserAccountsResponseChartPeriods FUT(@javax.annotation.Nullable List<String> FUT) {
    this.FUT = FUT;
    return this;
  }

  public UserAccountsResponseChartPeriods addFUTItem(String FUTItem) {
    if (this.FUT == null) {
      this.FUT = new ArrayList<>();
    }
    this.FUT.add(FUTItem);
    return this;
  }

  /**
   * Get FUT
   * @return FUT
   */
  @javax.annotation.Nullable
  public List<String> getFUT() {
    return FUT;
  }

  public void setFUT(@javax.annotation.Nullable List<String> FUT) {
    this.FUT = FUT;
  }


  public UserAccountsResponseChartPeriods CASH(@javax.annotation.Nullable List<String> CASH) {
    this.CASH = CASH;
    return this;
  }

  public UserAccountsResponseChartPeriods addCASHItem(String CASHItem) {
    if (this.CASH == null) {
      this.CASH = new ArrayList<>();
    }
    this.CASH.add(CASHItem);
    return this;
  }

  /**
   * Get CASH
   * @return CASH
   */
  @javax.annotation.Nullable
  public List<String> getCASH() {
    return CASH;
  }

  public void setCASH(@javax.annotation.Nullable List<String> CASH) {
    this.CASH = CASH;
  }


  public UserAccountsResponseChartPeriods IND(@javax.annotation.Nullable List<String> IND) {
    this.IND = IND;
    return this;
  }

  public UserAccountsResponseChartPeriods addINDItem(String INDItem) {
    if (this.IND == null) {
      this.IND = new ArrayList<>();
    }
    this.IND.add(INDItem);
    return this;
  }

  /**
   * Get IND
   * @return IND
   */
  @javax.annotation.Nullable
  public List<String> getIND() {
    return IND;
  }

  public void setIND(@javax.annotation.Nullable List<String> IND) {
    this.IND = IND;
  }


  public UserAccountsResponseChartPeriods BOND(@javax.annotation.Nullable List<String> BOND) {
    this.BOND = BOND;
    return this;
  }

  public UserAccountsResponseChartPeriods addBONDItem(String BONDItem) {
    if (this.BOND == null) {
      this.BOND = new ArrayList<>();
    }
    this.BOND.add(BONDItem);
    return this;
  }

  /**
   * Get BOND
   * @return BOND
   */
  @javax.annotation.Nullable
  public List<String> getBOND() {
    return BOND;
  }

  public void setBOND(@javax.annotation.Nullable List<String> BOND) {
    this.BOND = BOND;
  }


  public UserAccountsResponseChartPeriods FUND(@javax.annotation.Nullable List<String> FUND) {
    this.FUND = FUND;
    return this;
  }

  public UserAccountsResponseChartPeriods addFUNDItem(String FUNDItem) {
    if (this.FUND == null) {
      this.FUND = new ArrayList<>();
    }
    this.FUND.add(FUNDItem);
    return this;
  }

  /**
   * Get FUND
   * @return FUND
   */
  @javax.annotation.Nullable
  public List<String> getFUND() {
    return FUND;
  }

  public void setFUND(@javax.annotation.Nullable List<String> FUND) {
    this.FUND = FUND;
  }


  public UserAccountsResponseChartPeriods CMDTY(@javax.annotation.Nullable List<String> CMDTY) {
    this.CMDTY = CMDTY;
    return this;
  }

  public UserAccountsResponseChartPeriods addCMDTYItem(String CMDTYItem) {
    if (this.CMDTY == null) {
      this.CMDTY = new ArrayList<>();
    }
    this.CMDTY.add(CMDTYItem);
    return this;
  }

  /**
   * Get CMDTY
   * @return CMDTY
   */
  @javax.annotation.Nullable
  public List<String> getCMDTY() {
    return CMDTY;
  }

  public void setCMDTY(@javax.annotation.Nullable List<String> CMDTY) {
    this.CMDTY = CMDTY;
  }


  public UserAccountsResponseChartPeriods PHYSS(@javax.annotation.Nullable List<String> PHYSS) {
    this.PHYSS = PHYSS;
    return this;
  }

  public UserAccountsResponseChartPeriods addPHYSSItem(String PHYSSItem) {
    if (this.PHYSS == null) {
      this.PHYSS = new ArrayList<>();
    }
    this.PHYSS.add(PHYSSItem);
    return this;
  }

  /**
   * Get PHYSS
   * @return PHYSS
   */
  @javax.annotation.Nullable
  public List<String> getPHYSS() {
    return PHYSS;
  }

  public void setPHYSS(@javax.annotation.Nullable List<String> PHYSS) {
    this.PHYSS = PHYSS;
  }


  public UserAccountsResponseChartPeriods CRYPTO(@javax.annotation.Nullable List<String> CRYPTO) {
    this.CRYPTO = CRYPTO;
    return this;
  }

  public UserAccountsResponseChartPeriods addCRYPTOItem(String CRYPTOItem) {
    if (this.CRYPTO == null) {
      this.CRYPTO = new ArrayList<>();
    }
    this.CRYPTO.add(CRYPTOItem);
    return this;
  }

  /**
   * Get CRYPTO
   * @return CRYPTO
   */
  @javax.annotation.Nullable
  public List<String> getCRYPTO() {
    return CRYPTO;
  }

  public void setCRYPTO(@javax.annotation.Nullable List<String> CRYPTO) {
    this.CRYPTO = CRYPTO;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccountsResponseChartPeriods userAccountsResponseChartPeriods = (UserAccountsResponseChartPeriods) o;
    return Objects.equals(this.STK, userAccountsResponseChartPeriods.STK) &&
        Objects.equals(this.CFD, userAccountsResponseChartPeriods.CFD) &&
        Objects.equals(this.OPT, userAccountsResponseChartPeriods.OPT) &&
        Objects.equals(this.FOP, userAccountsResponseChartPeriods.FOP) &&
        Objects.equals(this.WAR, userAccountsResponseChartPeriods.WAR) &&
        Objects.equals(this.IOPT, userAccountsResponseChartPeriods.IOPT) &&
        Objects.equals(this.FUT, userAccountsResponseChartPeriods.FUT) &&
        Objects.equals(this.CASH, userAccountsResponseChartPeriods.CASH) &&
        Objects.equals(this.IND, userAccountsResponseChartPeriods.IND) &&
        Objects.equals(this.BOND, userAccountsResponseChartPeriods.BOND) &&
        Objects.equals(this.FUND, userAccountsResponseChartPeriods.FUND) &&
        Objects.equals(this.CMDTY, userAccountsResponseChartPeriods.CMDTY) &&
        Objects.equals(this.PHYSS, userAccountsResponseChartPeriods.PHYSS) &&
        Objects.equals(this.CRYPTO, userAccountsResponseChartPeriods.CRYPTO);
  }

  @Override
  public int hashCode() {
    return Objects.hash(STK, CFD, OPT, FOP, WAR, IOPT, FUT, CASH, IND, BOND, FUND, CMDTY, PHYSS, CRYPTO);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccountsResponseChartPeriods {\n");
    sb.append("    STK: ").append(toIndentedString(STK)).append("\n");
    sb.append("    CFD: ").append(toIndentedString(CFD)).append("\n");
    sb.append("    OPT: ").append(toIndentedString(OPT)).append("\n");
    sb.append("    FOP: ").append(toIndentedString(FOP)).append("\n");
    sb.append("    WAR: ").append(toIndentedString(WAR)).append("\n");
    sb.append("    IOPT: ").append(toIndentedString(IOPT)).append("\n");
    sb.append("    FUT: ").append(toIndentedString(FUT)).append("\n");
    sb.append("    CASH: ").append(toIndentedString(CASH)).append("\n");
    sb.append("    IND: ").append(toIndentedString(IND)).append("\n");
    sb.append("    BOND: ").append(toIndentedString(BOND)).append("\n");
    sb.append("    FUND: ").append(toIndentedString(FUND)).append("\n");
    sb.append("    CMDTY: ").append(toIndentedString(CMDTY)).append("\n");
    sb.append("    PHYSS: ").append(toIndentedString(PHYSS)).append("\n");
    sb.append("    CRYPTO: ").append(toIndentedString(CRYPTO)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("STK");
    openapiFields.add("CFD");
    openapiFields.add("OPT");
    openapiFields.add("FOP");
    openapiFields.add("WAR");
    openapiFields.add("IOPT");
    openapiFields.add("FUT");
    openapiFields.add("CASH");
    openapiFields.add("IND");
    openapiFields.add("BOND");
    openapiFields.add("FUND");
    openapiFields.add("CMDTY");
    openapiFields.add("PHYSS");
    openapiFields.add("CRYPTO");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAccountsResponseChartPeriods
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAccountsResponseChartPeriods.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAccountsResponseChartPeriods is not found in the empty JSON string", UserAccountsResponseChartPeriods.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAccountsResponseChartPeriods.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAccountsResponseChartPeriods` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("STK") != null && !jsonObj.get("STK").isJsonNull() && !jsonObj.get("STK").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `STK` to be an array in the JSON string but got `%s`", jsonObj.get("STK").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CFD") != null && !jsonObj.get("CFD").isJsonNull() && !jsonObj.get("CFD").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CFD` to be an array in the JSON string but got `%s`", jsonObj.get("CFD").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("OPT") != null && !jsonObj.get("OPT").isJsonNull() && !jsonObj.get("OPT").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OPT` to be an array in the JSON string but got `%s`", jsonObj.get("OPT").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FOP") != null && !jsonObj.get("FOP").isJsonNull() && !jsonObj.get("FOP").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FOP` to be an array in the JSON string but got `%s`", jsonObj.get("FOP").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WAR") != null && !jsonObj.get("WAR").isJsonNull() && !jsonObj.get("WAR").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WAR` to be an array in the JSON string but got `%s`", jsonObj.get("WAR").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("IOPT") != null && !jsonObj.get("IOPT").isJsonNull() && !jsonObj.get("IOPT").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `IOPT` to be an array in the JSON string but got `%s`", jsonObj.get("IOPT").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FUT") != null && !jsonObj.get("FUT").isJsonNull() && !jsonObj.get("FUT").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FUT` to be an array in the JSON string but got `%s`", jsonObj.get("FUT").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CASH") != null && !jsonObj.get("CASH").isJsonNull() && !jsonObj.get("CASH").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CASH` to be an array in the JSON string but got `%s`", jsonObj.get("CASH").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("IND") != null && !jsonObj.get("IND").isJsonNull() && !jsonObj.get("IND").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `IND` to be an array in the JSON string but got `%s`", jsonObj.get("IND").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BOND") != null && !jsonObj.get("BOND").isJsonNull() && !jsonObj.get("BOND").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BOND` to be an array in the JSON string but got `%s`", jsonObj.get("BOND").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FUND") != null && !jsonObj.get("FUND").isJsonNull() && !jsonObj.get("FUND").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FUND` to be an array in the JSON string but got `%s`", jsonObj.get("FUND").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CMDTY") != null && !jsonObj.get("CMDTY").isJsonNull() && !jsonObj.get("CMDTY").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CMDTY` to be an array in the JSON string but got `%s`", jsonObj.get("CMDTY").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PHYSS") != null && !jsonObj.get("PHYSS").isJsonNull() && !jsonObj.get("PHYSS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PHYSS` to be an array in the JSON string but got `%s`", jsonObj.get("PHYSS").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CRYPTO") != null && !jsonObj.get("CRYPTO").isJsonNull() && !jsonObj.get("CRYPTO").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CRYPTO` to be an array in the JSON string but got `%s`", jsonObj.get("CRYPTO").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAccountsResponseChartPeriods.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAccountsResponseChartPeriods' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAccountsResponseChartPeriods> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAccountsResponseChartPeriods.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAccountsResponseChartPeriods>() {
           @Override
           public void write(JsonWriter out, UserAccountsResponseChartPeriods value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAccountsResponseChartPeriods read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAccountsResponseChartPeriods given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAccountsResponseChartPeriods
   * @throws IOException if the JSON string is invalid with respect to UserAccountsResponseChartPeriods
   */
  public static UserAccountsResponseChartPeriods fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAccountsResponseChartPeriods.class);
  }

  /**
   * Convert an instance of UserAccountsResponseChartPeriods to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

