/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormCRS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class FormCRS {
  /**
   * Gets or Sets controllingPersonDesignation
   */
  @JsonAdapter(ControllingPersonDesignationEnum.Adapter.class)
  public enum ControllingPersonDesignationEnum {
    SENIOR_MGMT_OFFICER("SENIOR_MGMT_OFFICER"),
    
    BY_OWNERSHIP("BY_OWNERSHIP"),
    
    BY_OTHER_MEANS("BY_OTHER_MEANS");

    private String value;

    ControllingPersonDesignationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControllingPersonDesignationEnum fromValue(String value) {
      for (ControllingPersonDesignationEnum b : ControllingPersonDesignationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControllingPersonDesignationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControllingPersonDesignationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControllingPersonDesignationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ControllingPersonDesignationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ControllingPersonDesignationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_DESIGNATION = "controllingPersonDesignation";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_DESIGNATION)
  @javax.annotation.Nullable
  private ControllingPersonDesignationEnum controllingPersonDesignation;

  /**
   * Gets or Sets oecdStatus
   */
  @JsonAdapter(OecdStatusEnum.Adapter.class)
  public enum OecdStatusEnum {
    DEPOSITORY_INSTITUTION("DEPOSITORY_INSTITUTION"),
    
    CUSTODIAL_INSTITUTION("CUSTODIAL_INSTITUTION"),
    
    SPECIFIED_INSURANCE_COMPANY("SPECIFIED_INSURANCE_COMPANY"),
    
    INVESTMENT_ENTITY_IN_NONPARTICIPATING_JURISDICTION("INVESTMENT_ENTITY_IN_NONPARTICIPATING_JURISDICTION"),
    
    INVESTMENT_ENTITY_NOT_LISTED("INVESTMENT_ENTITY_NOT_LISTED"),
    
    PUBLICLY_TRADED_CORPORATION_OR_AFFILIATE("PUBLICLY_TRADED_CORPORATION_OR_AFFILIATE"),
    
    OTHER_ACTIVE_NON_FINANCIAL_ENTITY("OTHER_ACTIVE_NON_FINANCIAL_ENTITY"),
    
    PASSIVE_NON_FINANCIAL_ENTITY("PASSIVE_NON_FINANCIAL_ENTITY"),
    
    EXEMPT_RETIREMENT_PLAN("EXEMPT_RETIREMENT_PLAN"),
    
    NON_REPORTING_FI("NON_REPORTING_FI"),
    
    OTHER_INVESTMENT_ENTITY("OTHER_INVESTMENT_ENTITY"),
    
    FINANCIAL_INSTITUTION("FINANCIAL_INSTITUTION"),
    
    NON_REPORTING_FINANCIAL_INSTITUTION("NON_REPORTING_FINANCIAL_INSTITUTION");

    private String value;

    OecdStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OecdStatusEnum fromValue(String value) {
      for (OecdStatusEnum b : OecdStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OecdStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OecdStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OecdStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OecdStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OecdStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OECD_STATUS = "oecdStatus";
  @SerializedName(SERIALIZED_NAME_OECD_STATUS)
  @javax.annotation.Nullable
  private OecdStatusEnum oecdStatus;

  public FormCRS() {
  }

  public FormCRS controllingPersonDesignation(@javax.annotation.Nullable ControllingPersonDesignationEnum controllingPersonDesignation) {
    this.controllingPersonDesignation = controllingPersonDesignation;
    return this;
  }

  /**
   * Get controllingPersonDesignation
   * @return controllingPersonDesignation
   */
  @javax.annotation.Nullable
  public ControllingPersonDesignationEnum getControllingPersonDesignation() {
    return controllingPersonDesignation;
  }

  public void setControllingPersonDesignation(@javax.annotation.Nullable ControllingPersonDesignationEnum controllingPersonDesignation) {
    this.controllingPersonDesignation = controllingPersonDesignation;
  }


  public FormCRS oecdStatus(@javax.annotation.Nullable OecdStatusEnum oecdStatus) {
    this.oecdStatus = oecdStatus;
    return this;
  }

  /**
   * Get oecdStatus
   * @return oecdStatus
   */
  @javax.annotation.Nullable
  public OecdStatusEnum getOecdStatus() {
    return oecdStatus;
  }

  public void setOecdStatus(@javax.annotation.Nullable OecdStatusEnum oecdStatus) {
    this.oecdStatus = oecdStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormCRS formCRS = (FormCRS) o;
    return Objects.equals(this.controllingPersonDesignation, formCRS.controllingPersonDesignation) &&
        Objects.equals(this.oecdStatus, formCRS.oecdStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controllingPersonDesignation, oecdStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormCRS {\n");
    sb.append("    controllingPersonDesignation: ").append(toIndentedString(controllingPersonDesignation)).append("\n");
    sb.append("    oecdStatus: ").append(toIndentedString(oecdStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controllingPersonDesignation");
    openapiFields.add("oecdStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormCRS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormCRS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormCRS is not found in the empty JSON string", FormCRS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormCRS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormCRS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controllingPersonDesignation") != null && !jsonObj.get("controllingPersonDesignation").isJsonNull()) && !jsonObj.get("controllingPersonDesignation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingPersonDesignation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingPersonDesignation").toString()));
      }
      // validate the optional field `controllingPersonDesignation`
      if (jsonObj.get("controllingPersonDesignation") != null && !jsonObj.get("controllingPersonDesignation").isJsonNull()) {
        ControllingPersonDesignationEnum.validateJsonElement(jsonObj.get("controllingPersonDesignation"));
      }
      if ((jsonObj.get("oecdStatus") != null && !jsonObj.get("oecdStatus").isJsonNull()) && !jsonObj.get("oecdStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oecdStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oecdStatus").toString()));
      }
      // validate the optional field `oecdStatus`
      if (jsonObj.get("oecdStatus") != null && !jsonObj.get("oecdStatus").isJsonNull()) {
        OecdStatusEnum.validateJsonElement(jsonObj.get("oecdStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormCRS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormCRS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormCRS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormCRS.class));

       return (TypeAdapter<T>) new TypeAdapter<FormCRS>() {
           @Override
           public void write(JsonWriter out, FormCRS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormCRS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormCRS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormCRS
   * @throws IOException if the JSON string is invalid with respect to FormCRS
   */
  public static FormCRS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormCRS.class);
  }

  /**
   * Convert an instance of FormCRS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

