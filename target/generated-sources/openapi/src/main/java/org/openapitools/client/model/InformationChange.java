/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddEntity;
import org.openapitools.client.model.DeleteEntity;
import org.openapitools.client.model.UpdateEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InformationChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class InformationChange {
  public static final String SERIALIZED_NAME_ADD_ENTITIES = "addEntities";
  @SerializedName(SERIALIZED_NAME_ADD_ENTITIES)
  @javax.annotation.Nullable
  private List<AddEntity> addEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_ENTITIES = "updateEntities";
  @SerializedName(SERIALIZED_NAME_UPDATE_ENTITIES)
  @javax.annotation.Nullable
  private List<UpdateEntity> updateEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE_ENTITIES = "deleteEntities";
  @SerializedName(SERIALIZED_NAME_DELETE_ENTITIES)
  @javax.annotation.Nullable
  private List<DeleteEntity> deleteEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_IB_ACCOUNT_ID = "ibAccountId";
  @SerializedName(SERIALIZED_NAME_IB_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String ibAccountId;

  public InformationChange() {
  }

  public InformationChange addEntities(@javax.annotation.Nullable List<AddEntity> addEntities) {
    this.addEntities = addEntities;
    return this;
  }

  public InformationChange addAddEntitiesItem(AddEntity addEntitiesItem) {
    if (this.addEntities == null) {
      this.addEntities = new ArrayList<>();
    }
    this.addEntities.add(addEntitiesItem);
    return this;
  }

  /**
   * Get addEntities
   * @return addEntities
   */
  @javax.annotation.Nullable
  public List<AddEntity> getAddEntities() {
    return addEntities;
  }

  public void setAddEntities(@javax.annotation.Nullable List<AddEntity> addEntities) {
    this.addEntities = addEntities;
  }


  public InformationChange updateEntities(@javax.annotation.Nullable List<UpdateEntity> updateEntities) {
    this.updateEntities = updateEntities;
    return this;
  }

  public InformationChange addUpdateEntitiesItem(UpdateEntity updateEntitiesItem) {
    if (this.updateEntities == null) {
      this.updateEntities = new ArrayList<>();
    }
    this.updateEntities.add(updateEntitiesItem);
    return this;
  }

  /**
   * Get updateEntities
   * @return updateEntities
   */
  @javax.annotation.Nullable
  public List<UpdateEntity> getUpdateEntities() {
    return updateEntities;
  }

  public void setUpdateEntities(@javax.annotation.Nullable List<UpdateEntity> updateEntities) {
    this.updateEntities = updateEntities;
  }


  public InformationChange deleteEntities(@javax.annotation.Nullable List<DeleteEntity> deleteEntities) {
    this.deleteEntities = deleteEntities;
    return this;
  }

  public InformationChange addDeleteEntitiesItem(DeleteEntity deleteEntitiesItem) {
    if (this.deleteEntities == null) {
      this.deleteEntities = new ArrayList<>();
    }
    this.deleteEntities.add(deleteEntitiesItem);
    return this;
  }

  /**
   * Get deleteEntities
   * @return deleteEntities
   */
  @javax.annotation.Nullable
  public List<DeleteEntity> getDeleteEntities() {
    return deleteEntities;
  }

  public void setDeleteEntities(@javax.annotation.Nullable List<DeleteEntity> deleteEntities) {
    this.deleteEntities = deleteEntities;
  }


  public InformationChange ibAccountId(@javax.annotation.Nullable String ibAccountId) {
    this.ibAccountId = ibAccountId;
    return this;
  }

  /**
   * Get ibAccountId
   * @return ibAccountId
   */
  @javax.annotation.Nullable
  public String getIbAccountId() {
    return ibAccountId;
  }

  public void setIbAccountId(@javax.annotation.Nullable String ibAccountId) {
    this.ibAccountId = ibAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InformationChange informationChange = (InformationChange) o;
    return Objects.equals(this.addEntities, informationChange.addEntities) &&
        Objects.equals(this.updateEntities, informationChange.updateEntities) &&
        Objects.equals(this.deleteEntities, informationChange.deleteEntities) &&
        Objects.equals(this.ibAccountId, informationChange.ibAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addEntities, updateEntities, deleteEntities, ibAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InformationChange {\n");
    sb.append("    addEntities: ").append(toIndentedString(addEntities)).append("\n");
    sb.append("    updateEntities: ").append(toIndentedString(updateEntities)).append("\n");
    sb.append("    deleteEntities: ").append(toIndentedString(deleteEntities)).append("\n");
    sb.append("    ibAccountId: ").append(toIndentedString(ibAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addEntities");
    openapiFields.add("updateEntities");
    openapiFields.add("deleteEntities");
    openapiFields.add("ibAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InformationChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InformationChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InformationChange is not found in the empty JSON string", InformationChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InformationChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InformationChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addEntities") != null && !jsonObj.get("addEntities").isJsonNull()) {
        JsonArray jsonArrayaddEntities = jsonObj.getAsJsonArray("addEntities");
        if (jsonArrayaddEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addEntities` to be an array in the JSON string but got `%s`", jsonObj.get("addEntities").toString()));
          }

          // validate the optional field `addEntities` (array)
          for (int i = 0; i < jsonArrayaddEntities.size(); i++) {
            AddEntity.validateJsonElement(jsonArrayaddEntities.get(i));
          };
        }
      }
      if (jsonObj.get("updateEntities") != null && !jsonObj.get("updateEntities").isJsonNull()) {
        JsonArray jsonArrayupdateEntities = jsonObj.getAsJsonArray("updateEntities");
        if (jsonArrayupdateEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("updateEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `updateEntities` to be an array in the JSON string but got `%s`", jsonObj.get("updateEntities").toString()));
          }

          // validate the optional field `updateEntities` (array)
          for (int i = 0; i < jsonArrayupdateEntities.size(); i++) {
            UpdateEntity.validateJsonElement(jsonArrayupdateEntities.get(i));
          };
        }
      }
      if (jsonObj.get("deleteEntities") != null && !jsonObj.get("deleteEntities").isJsonNull()) {
        JsonArray jsonArraydeleteEntities = jsonObj.getAsJsonArray("deleteEntities");
        if (jsonArraydeleteEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deleteEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deleteEntities` to be an array in the JSON string but got `%s`", jsonObj.get("deleteEntities").toString()));
          }

          // validate the optional field `deleteEntities` (array)
          for (int i = 0; i < jsonArraydeleteEntities.size(); i++) {
            DeleteEntity.validateJsonElement(jsonArraydeleteEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("ibAccountId") != null && !jsonObj.get("ibAccountId").isJsonNull()) && !jsonObj.get("ibAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InformationChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InformationChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InformationChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InformationChange.class));

       return (TypeAdapter<T>) new TypeAdapter<InformationChange>() {
           @Override
           public void write(JsonWriter out, InformationChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InformationChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InformationChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InformationChange
   * @throws IOException if the JSON string is invalid with respect to InformationChange
   */
  public static InformationChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InformationChange.class);
  }

  /**
   * Convert an instance of InformationChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

