/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns an object containing market value details of the currency and positions held using that currency.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class SummaryMarketValueResponseCurrency {
  public static final String SERIALIZED_NAME_TOTAL_CASH = "total_cash";
  @SerializedName(SERIALIZED_NAME_TOTAL_CASH)
  @javax.annotation.Nullable
  private String totalCash;

  public static final String SERIALIZED_NAME_SETTLED_CASH = "settled_cash";
  @SerializedName(SERIALIZED_NAME_SETTLED_CASH)
  @javax.annotation.Nullable
  private String settledCash;

  public static final String SERIALIZED_NAME_MT_D_INTEREST = "MTD Interest";
  @SerializedName(SERIALIZED_NAME_MT_D_INTEREST)
  @javax.annotation.Nullable
  private String mtDInterest;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  @javax.annotation.Nullable
  private String stock;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  @javax.annotation.Nullable
  private String options;

  public static final String SERIALIZED_NAME_FUTURES = "futures";
  @SerializedName(SERIALIZED_NAME_FUTURES)
  @javax.annotation.Nullable
  private String futures;

  public static final String SERIALIZED_NAME_FUTURE_OPTIONS = "future_options";
  @SerializedName(SERIALIZED_NAME_FUTURE_OPTIONS)
  @javax.annotation.Nullable
  private String futureOptions;

  public static final String SERIALIZED_NAME_FUNDS = "funds";
  @SerializedName(SERIALIZED_NAME_FUNDS)
  @javax.annotation.Nullable
  private String funds;

  public static final String SERIALIZED_NAME_DIVIDENDS_RECEIVABLE = "dividends_receivable";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS_RECEIVABLE)
  @javax.annotation.Nullable
  private String dividendsReceivable;

  public static final String SERIALIZED_NAME_MUTUAL_FUNDS = "mutual_funds";
  @SerializedName(SERIALIZED_NAME_MUTUAL_FUNDS)
  @javax.annotation.Nullable
  private String mutualFunds;

  public static final String SERIALIZED_NAME_MONEY_MARKET = "money_market";
  @SerializedName(SERIALIZED_NAME_MONEY_MARKET)
  @javax.annotation.Nullable
  private String moneyMarket;

  public static final String SERIALIZED_NAME_BONDS = "bonds";
  @SerializedName(SERIALIZED_NAME_BONDS)
  @javax.annotation.Nullable
  private String bonds;

  public static final String SERIALIZED_NAME_GOVT_BONDS = "Govt Bonds";
  @SerializedName(SERIALIZED_NAME_GOVT_BONDS)
  @javax.annotation.Nullable
  private String govtBonds;

  public static final String SERIALIZED_NAME_T_BILLS = "t_bills";
  @SerializedName(SERIALIZED_NAME_T_BILLS)
  @javax.annotation.Nullable
  private String tBills;

  public static final String SERIALIZED_NAME_WARRANTS = "warrants";
  @SerializedName(SERIALIZED_NAME_WARRANTS)
  @javax.annotation.Nullable
  private String warrants;

  public static final String SERIALIZED_NAME_ISSUER_OPTION = "issuer_option";
  @SerializedName(SERIALIZED_NAME_ISSUER_OPTION)
  @javax.annotation.Nullable
  private String issuerOption;

  public static final String SERIALIZED_NAME_COMMODITY = "commodity";
  @SerializedName(SERIALIZED_NAME_COMMODITY)
  @javax.annotation.Nullable
  private String commodity;

  public static final String SERIALIZED_NAME_NOTIONAL_C_F_D = "Notional CFD";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_C_F_D)
  @javax.annotation.Nullable
  private String notionalCFD;

  public static final String SERIALIZED_NAME_CFD = "cfd";
  @SerializedName(SERIALIZED_NAME_CFD)
  @javax.annotation.Nullable
  private String cfd;

  public static final String SERIALIZED_NAME_NET_LIQUIDATION = "net_liquidation";
  @SerializedName(SERIALIZED_NAME_NET_LIQUIDATION)
  @javax.annotation.Nullable
  private String netLiquidation;

  public static final String SERIALIZED_NAME_UNREALIZED_PNL = "unrealized_pnl";
  @SerializedName(SERIALIZED_NAME_UNREALIZED_PNL)
  @javax.annotation.Nullable
  private String unrealizedPnl;

  public static final String SERIALIZED_NAME_REALIZED_PNL = "realized_pnl";
  @SerializedName(SERIALIZED_NAME_REALIZED_PNL)
  @javax.annotation.Nullable
  private String realizedPnl;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "Exchange Rate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  @javax.annotation.Nullable
  private String exchangeRate;

  public SummaryMarketValueResponseCurrency() {
  }

  public SummaryMarketValueResponseCurrency totalCash(@javax.annotation.Nullable String totalCash) {
    this.totalCash = totalCash;
    return this;
  }

  /**
   * Lists the total cash held for the given currency.
   * @return totalCash
   */
  @javax.annotation.Nullable
  public String getTotalCash() {
    return totalCash;
  }

  public void setTotalCash(@javax.annotation.Nullable String totalCash) {
    this.totalCash = totalCash;
  }


  public SummaryMarketValueResponseCurrency settledCash(@javax.annotation.Nullable String settledCash) {
    this.settledCash = settledCash;
    return this;
  }

  /**
   * Cash recognized at the time of settlement minus the purchases at time of trade, commissions, taxes, and fees.
   * @return settledCash
   */
  @javax.annotation.Nullable
  public String getSettledCash() {
    return settledCash;
  }

  public void setSettledCash(@javax.annotation.Nullable String settledCash) {
    this.settledCash = settledCash;
  }


  public SummaryMarketValueResponseCurrency mtDInterest(@javax.annotation.Nullable String mtDInterest) {
    this.mtDInterest = mtDInterest;
    return this;
  }

  /**
   * Total Month-to-date interest.
   * @return mtDInterest
   */
  @javax.annotation.Nullable
  public String getMtDInterest() {
    return mtDInterest;
  }

  public void setMtDInterest(@javax.annotation.Nullable String mtDInterest) {
    this.mtDInterest = mtDInterest;
  }


  public SummaryMarketValueResponseCurrency stock(@javax.annotation.Nullable String stock) {
    this.stock = stock;
    return this;
  }

  /**
   * Total cash value of stocks held.
   * @return stock
   */
  @javax.annotation.Nullable
  public String getStock() {
    return stock;
  }

  public void setStock(@javax.annotation.Nullable String stock) {
    this.stock = stock;
  }


  public SummaryMarketValueResponseCurrency options(@javax.annotation.Nullable String options) {
    this.options = options;
    return this;
  }

  /**
   * Total cash value of options held.
   * @return options
   */
  @javax.annotation.Nullable
  public String getOptions() {
    return options;
  }

  public void setOptions(@javax.annotation.Nullable String options) {
    this.options = options;
  }


  public SummaryMarketValueResponseCurrency futures(@javax.annotation.Nullable String futures) {
    this.futures = futures;
    return this;
  }

  /**
   * Total cash value of futures held.
   * @return futures
   */
  @javax.annotation.Nullable
  public String getFutures() {
    return futures;
  }

  public void setFutures(@javax.annotation.Nullable String futures) {
    this.futures = futures;
  }


  public SummaryMarketValueResponseCurrency futureOptions(@javax.annotation.Nullable String futureOptions) {
    this.futureOptions = futureOptions;
    return this;
  }

  /**
   * Total cash value of future options held.
   * @return futureOptions
   */
  @javax.annotation.Nullable
  public String getFutureOptions() {
    return futureOptions;
  }

  public void setFutureOptions(@javax.annotation.Nullable String futureOptions) {
    this.futureOptions = futureOptions;
  }


  public SummaryMarketValueResponseCurrency funds(@javax.annotation.Nullable String funds) {
    this.funds = funds;
    return this;
  }

  /**
   * Total cash value of funds held.
   * @return funds
   */
  @javax.annotation.Nullable
  public String getFunds() {
    return funds;
  }

  public void setFunds(@javax.annotation.Nullable String funds) {
    this.funds = funds;
  }


  public SummaryMarketValueResponseCurrency dividendsReceivable(@javax.annotation.Nullable String dividendsReceivable) {
    this.dividendsReceivable = dividendsReceivable;
    return this;
  }

  /**
   * Total cash value of receivable dividends.
   * @return dividendsReceivable
   */
  @javax.annotation.Nullable
  public String getDividendsReceivable() {
    return dividendsReceivable;
  }

  public void setDividendsReceivable(@javax.annotation.Nullable String dividendsReceivable) {
    this.dividendsReceivable = dividendsReceivable;
  }


  public SummaryMarketValueResponseCurrency mutualFunds(@javax.annotation.Nullable String mutualFunds) {
    this.mutualFunds = mutualFunds;
    return this;
  }

  /**
   * Total cash value of mutual funds held.
   * @return mutualFunds
   */
  @javax.annotation.Nullable
  public String getMutualFunds() {
    return mutualFunds;
  }

  public void setMutualFunds(@javax.annotation.Nullable String mutualFunds) {
    this.mutualFunds = mutualFunds;
  }


  public SummaryMarketValueResponseCurrency moneyMarket(@javax.annotation.Nullable String moneyMarket) {
    this.moneyMarket = moneyMarket;
    return this;
  }

  /**
   * Total cash value of money market securities held.
   * @return moneyMarket
   */
  @javax.annotation.Nullable
  public String getMoneyMarket() {
    return moneyMarket;
  }

  public void setMoneyMarket(@javax.annotation.Nullable String moneyMarket) {
    this.moneyMarket = moneyMarket;
  }


  public SummaryMarketValueResponseCurrency bonds(@javax.annotation.Nullable String bonds) {
    this.bonds = bonds;
    return this;
  }

  /**
   * Total cash value of bonds held.
   * @return bonds
   */
  @javax.annotation.Nullable
  public String getBonds() {
    return bonds;
  }

  public void setBonds(@javax.annotation.Nullable String bonds) {
    this.bonds = bonds;
  }


  public SummaryMarketValueResponseCurrency govtBonds(@javax.annotation.Nullable String govtBonds) {
    this.govtBonds = govtBonds;
    return this;
  }

  /**
   * Total cash value of goverment bonds held.
   * @return govtBonds
   */
  @javax.annotation.Nullable
  public String getGovtBonds() {
    return govtBonds;
  }

  public void setGovtBonds(@javax.annotation.Nullable String govtBonds) {
    this.govtBonds = govtBonds;
  }


  public SummaryMarketValueResponseCurrency tBills(@javax.annotation.Nullable String tBills) {
    this.tBills = tBills;
    return this;
  }

  /**
   * Total cash value of t-bill bonds held.
   * @return tBills
   */
  @javax.annotation.Nullable
  public String gettBills() {
    return tBills;
  }

  public void settBills(@javax.annotation.Nullable String tBills) {
    this.tBills = tBills;
  }


  public SummaryMarketValueResponseCurrency warrants(@javax.annotation.Nullable String warrants) {
    this.warrants = warrants;
    return this;
  }

  /**
   * Total cash value of warrants held.
   * @return warrants
   */
  @javax.annotation.Nullable
  public String getWarrants() {
    return warrants;
  }

  public void setWarrants(@javax.annotation.Nullable String warrants) {
    this.warrants = warrants;
  }


  public SummaryMarketValueResponseCurrency issuerOption(@javax.annotation.Nullable String issuerOption) {
    this.issuerOption = issuerOption;
    return this;
  }

  /**
   * Total cash value of issuer options held.
   * @return issuerOption
   */
  @javax.annotation.Nullable
  public String getIssuerOption() {
    return issuerOption;
  }

  public void setIssuerOption(@javax.annotation.Nullable String issuerOption) {
    this.issuerOption = issuerOption;
  }


  public SummaryMarketValueResponseCurrency commodity(@javax.annotation.Nullable String commodity) {
    this.commodity = commodity;
    return this;
  }

  /**
   * Total cash value of commodities held.
   * @return commodity
   */
  @javax.annotation.Nullable
  public String getCommodity() {
    return commodity;
  }

  public void setCommodity(@javax.annotation.Nullable String commodity) {
    this.commodity = commodity;
  }


  public SummaryMarketValueResponseCurrency notionalCFD(@javax.annotation.Nullable String notionalCFD) {
    this.notionalCFD = notionalCFD;
    return this;
  }

  /**
   * Total cash value of notional CFDs held.
   * @return notionalCFD
   */
  @javax.annotation.Nullable
  public String getNotionalCFD() {
    return notionalCFD;
  }

  public void setNotionalCFD(@javax.annotation.Nullable String notionalCFD) {
    this.notionalCFD = notionalCFD;
  }


  public SummaryMarketValueResponseCurrency cfd(@javax.annotation.Nullable String cfd) {
    this.cfd = cfd;
    return this;
  }

  /**
   * Total cash value of CFDs held.
   * @return cfd
   */
  @javax.annotation.Nullable
  public String getCfd() {
    return cfd;
  }

  public void setCfd(@javax.annotation.Nullable String cfd) {
    this.cfd = cfd;
  }


  public SummaryMarketValueResponseCurrency netLiquidation(@javax.annotation.Nullable String netLiquidation) {
    this.netLiquidation = netLiquidation;
    return this;
  }

  /**
   * Total cash value of your net liquidty.
   * @return netLiquidation
   */
  @javax.annotation.Nullable
  public String getNetLiquidation() {
    return netLiquidation;
  }

  public void setNetLiquidation(@javax.annotation.Nullable String netLiquidation) {
    this.netLiquidation = netLiquidation;
  }


  public SummaryMarketValueResponseCurrency unrealizedPnl(@javax.annotation.Nullable String unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
    return this;
  }

  /**
   * Total daily unrealized profit and loss.
   * @return unrealizedPnl
   */
  @javax.annotation.Nullable
  public String getUnrealizedPnl() {
    return unrealizedPnl;
  }

  public void setUnrealizedPnl(@javax.annotation.Nullable String unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
  }


  public SummaryMarketValueResponseCurrency realizedPnl(@javax.annotation.Nullable String realizedPnl) {
    this.realizedPnl = realizedPnl;
    return this;
  }

  /**
   * Total daily realized profit and loss.
   * @return realizedPnl
   */
  @javax.annotation.Nullable
  public String getRealizedPnl() {
    return realizedPnl;
  }

  public void setRealizedPnl(@javax.annotation.Nullable String realizedPnl) {
    this.realizedPnl = realizedPnl;
  }


  public SummaryMarketValueResponseCurrency exchangeRate(@javax.annotation.Nullable String exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Exchange rate of the labeled currency to the base currency.
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  public String getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(@javax.annotation.Nullable String exchangeRate) {
    this.exchangeRate = exchangeRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryMarketValueResponseCurrency summaryMarketValueResponseCurrency = (SummaryMarketValueResponseCurrency) o;
    return Objects.equals(this.totalCash, summaryMarketValueResponseCurrency.totalCash) &&
        Objects.equals(this.settledCash, summaryMarketValueResponseCurrency.settledCash) &&
        Objects.equals(this.mtDInterest, summaryMarketValueResponseCurrency.mtDInterest) &&
        Objects.equals(this.stock, summaryMarketValueResponseCurrency.stock) &&
        Objects.equals(this.options, summaryMarketValueResponseCurrency.options) &&
        Objects.equals(this.futures, summaryMarketValueResponseCurrency.futures) &&
        Objects.equals(this.futureOptions, summaryMarketValueResponseCurrency.futureOptions) &&
        Objects.equals(this.funds, summaryMarketValueResponseCurrency.funds) &&
        Objects.equals(this.dividendsReceivable, summaryMarketValueResponseCurrency.dividendsReceivable) &&
        Objects.equals(this.mutualFunds, summaryMarketValueResponseCurrency.mutualFunds) &&
        Objects.equals(this.moneyMarket, summaryMarketValueResponseCurrency.moneyMarket) &&
        Objects.equals(this.bonds, summaryMarketValueResponseCurrency.bonds) &&
        Objects.equals(this.govtBonds, summaryMarketValueResponseCurrency.govtBonds) &&
        Objects.equals(this.tBills, summaryMarketValueResponseCurrency.tBills) &&
        Objects.equals(this.warrants, summaryMarketValueResponseCurrency.warrants) &&
        Objects.equals(this.issuerOption, summaryMarketValueResponseCurrency.issuerOption) &&
        Objects.equals(this.commodity, summaryMarketValueResponseCurrency.commodity) &&
        Objects.equals(this.notionalCFD, summaryMarketValueResponseCurrency.notionalCFD) &&
        Objects.equals(this.cfd, summaryMarketValueResponseCurrency.cfd) &&
        Objects.equals(this.netLiquidation, summaryMarketValueResponseCurrency.netLiquidation) &&
        Objects.equals(this.unrealizedPnl, summaryMarketValueResponseCurrency.unrealizedPnl) &&
        Objects.equals(this.realizedPnl, summaryMarketValueResponseCurrency.realizedPnl) &&
        Objects.equals(this.exchangeRate, summaryMarketValueResponseCurrency.exchangeRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCash, settledCash, mtDInterest, stock, options, futures, futureOptions, funds, dividendsReceivable, mutualFunds, moneyMarket, bonds, govtBonds, tBills, warrants, issuerOption, commodity, notionalCFD, cfd, netLiquidation, unrealizedPnl, realizedPnl, exchangeRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryMarketValueResponseCurrency {\n");
    sb.append("    totalCash: ").append(toIndentedString(totalCash)).append("\n");
    sb.append("    settledCash: ").append(toIndentedString(settledCash)).append("\n");
    sb.append("    mtDInterest: ").append(toIndentedString(mtDInterest)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    futures: ").append(toIndentedString(futures)).append("\n");
    sb.append("    futureOptions: ").append(toIndentedString(futureOptions)).append("\n");
    sb.append("    funds: ").append(toIndentedString(funds)).append("\n");
    sb.append("    dividendsReceivable: ").append(toIndentedString(dividendsReceivable)).append("\n");
    sb.append("    mutualFunds: ").append(toIndentedString(mutualFunds)).append("\n");
    sb.append("    moneyMarket: ").append(toIndentedString(moneyMarket)).append("\n");
    sb.append("    bonds: ").append(toIndentedString(bonds)).append("\n");
    sb.append("    govtBonds: ").append(toIndentedString(govtBonds)).append("\n");
    sb.append("    tBills: ").append(toIndentedString(tBills)).append("\n");
    sb.append("    warrants: ").append(toIndentedString(warrants)).append("\n");
    sb.append("    issuerOption: ").append(toIndentedString(issuerOption)).append("\n");
    sb.append("    commodity: ").append(toIndentedString(commodity)).append("\n");
    sb.append("    notionalCFD: ").append(toIndentedString(notionalCFD)).append("\n");
    sb.append("    cfd: ").append(toIndentedString(cfd)).append("\n");
    sb.append("    netLiquidation: ").append(toIndentedString(netLiquidation)).append("\n");
    sb.append("    unrealizedPnl: ").append(toIndentedString(unrealizedPnl)).append("\n");
    sb.append("    realizedPnl: ").append(toIndentedString(realizedPnl)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_cash");
    openapiFields.add("settled_cash");
    openapiFields.add("MTD Interest");
    openapiFields.add("stock");
    openapiFields.add("options");
    openapiFields.add("futures");
    openapiFields.add("future_options");
    openapiFields.add("funds");
    openapiFields.add("dividends_receivable");
    openapiFields.add("mutual_funds");
    openapiFields.add("money_market");
    openapiFields.add("bonds");
    openapiFields.add("Govt Bonds");
    openapiFields.add("t_bills");
    openapiFields.add("warrants");
    openapiFields.add("issuer_option");
    openapiFields.add("commodity");
    openapiFields.add("Notional CFD");
    openapiFields.add("cfd");
    openapiFields.add("net_liquidation");
    openapiFields.add("unrealized_pnl");
    openapiFields.add("realized_pnl");
    openapiFields.add("Exchange Rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryMarketValueResponseCurrency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryMarketValueResponseCurrency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryMarketValueResponseCurrency is not found in the empty JSON string", SummaryMarketValueResponseCurrency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryMarketValueResponseCurrency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryMarketValueResponseCurrency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("total_cash") != null && !jsonObj.get("total_cash").isJsonNull()) && !jsonObj.get("total_cash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_cash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_cash").toString()));
      }
      if ((jsonObj.get("settled_cash") != null && !jsonObj.get("settled_cash").isJsonNull()) && !jsonObj.get("settled_cash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settled_cash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settled_cash").toString()));
      }
      if ((jsonObj.get("MTD Interest") != null && !jsonObj.get("MTD Interest").isJsonNull()) && !jsonObj.get("MTD Interest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MTD Interest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MTD Interest").toString()));
      }
      if ((jsonObj.get("stock") != null && !jsonObj.get("stock").isJsonNull()) && !jsonObj.get("stock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stock").toString()));
      }
      if ((jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) && !jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if ((jsonObj.get("futures") != null && !jsonObj.get("futures").isJsonNull()) && !jsonObj.get("futures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `futures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("futures").toString()));
      }
      if ((jsonObj.get("future_options") != null && !jsonObj.get("future_options").isJsonNull()) && !jsonObj.get("future_options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `future_options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("future_options").toString()));
      }
      if ((jsonObj.get("funds") != null && !jsonObj.get("funds").isJsonNull()) && !jsonObj.get("funds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funds").toString()));
      }
      if ((jsonObj.get("dividends_receivable") != null && !jsonObj.get("dividends_receivable").isJsonNull()) && !jsonObj.get("dividends_receivable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dividends_receivable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dividends_receivable").toString()));
      }
      if ((jsonObj.get("mutual_funds") != null && !jsonObj.get("mutual_funds").isJsonNull()) && !jsonObj.get("mutual_funds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mutual_funds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mutual_funds").toString()));
      }
      if ((jsonObj.get("money_market") != null && !jsonObj.get("money_market").isJsonNull()) && !jsonObj.get("money_market").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `money_market` to be a primitive type in the JSON string but got `%s`", jsonObj.get("money_market").toString()));
      }
      if ((jsonObj.get("bonds") != null && !jsonObj.get("bonds").isJsonNull()) && !jsonObj.get("bonds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bonds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bonds").toString()));
      }
      if ((jsonObj.get("Govt Bonds") != null && !jsonObj.get("Govt Bonds").isJsonNull()) && !jsonObj.get("Govt Bonds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Govt Bonds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Govt Bonds").toString()));
      }
      if ((jsonObj.get("t_bills") != null && !jsonObj.get("t_bills").isJsonNull()) && !jsonObj.get("t_bills").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `t_bills` to be a primitive type in the JSON string but got `%s`", jsonObj.get("t_bills").toString()));
      }
      if ((jsonObj.get("warrants") != null && !jsonObj.get("warrants").isJsonNull()) && !jsonObj.get("warrants").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warrants` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warrants").toString()));
      }
      if ((jsonObj.get("issuer_option") != null && !jsonObj.get("issuer_option").isJsonNull()) && !jsonObj.get("issuer_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_option").toString()));
      }
      if ((jsonObj.get("commodity") != null && !jsonObj.get("commodity").isJsonNull()) && !jsonObj.get("commodity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commodity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commodity").toString()));
      }
      if ((jsonObj.get("Notional CFD") != null && !jsonObj.get("Notional CFD").isJsonNull()) && !jsonObj.get("Notional CFD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notional CFD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notional CFD").toString()));
      }
      if ((jsonObj.get("cfd") != null && !jsonObj.get("cfd").isJsonNull()) && !jsonObj.get("cfd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cfd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cfd").toString()));
      }
      if ((jsonObj.get("net_liquidation") != null && !jsonObj.get("net_liquidation").isJsonNull()) && !jsonObj.get("net_liquidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_liquidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_liquidation").toString()));
      }
      if ((jsonObj.get("unrealized_pnl") != null && !jsonObj.get("unrealized_pnl").isJsonNull()) && !jsonObj.get("unrealized_pnl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unrealized_pnl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unrealized_pnl").toString()));
      }
      if ((jsonObj.get("realized_pnl") != null && !jsonObj.get("realized_pnl").isJsonNull()) && !jsonObj.get("realized_pnl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realized_pnl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realized_pnl").toString()));
      }
      if ((jsonObj.get("Exchange Rate") != null && !jsonObj.get("Exchange Rate").isJsonNull()) && !jsonObj.get("Exchange Rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Exchange Rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Exchange Rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryMarketValueResponseCurrency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryMarketValueResponseCurrency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryMarketValueResponseCurrency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryMarketValueResponseCurrency.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryMarketValueResponseCurrency>() {
           @Override
           public void write(JsonWriter out, SummaryMarketValueResponseCurrency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryMarketValueResponseCurrency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryMarketValueResponseCurrency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryMarketValueResponseCurrency
   * @throws IOException if the JSON string is invalid with respect to SummaryMarketValueResponseCurrency
   */
  public static SummaryMarketValueResponseCurrency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryMarketValueResponseCurrency.class);
  }

  /**
   * Convert an instance of SummaryMarketValueResponseCurrency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

