/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.AssociatedPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociatedEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AssociatedEntity {
  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  @javax.annotation.Nullable
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTERNAL_CODE = "externalCode";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CODE)
  @javax.annotation.Nullable
  private String externalCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_ORGANIZATION_COUNTRY = "organizationCountry";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_COUNTRY)
  @javax.annotation.Nullable
  private String organizationCountry;

  public static final String SERIALIZED_NAME_PHONES = "phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  @javax.annotation.Nullable
  private Map<String, String> phones = new HashMap<>();

  public static final String SERIALIZED_NAME_RESIDENCE = "residence";
  @SerializedName(SERIALIZED_NAME_RESIDENCE)
  @javax.annotation.Nullable
  private Map<String, String> residence = new HashMap<>();

  public static final String SERIALIZED_NAME_MAILING = "mailing";
  @SerializedName(SERIALIZED_NAME_MAILING)
  @javax.annotation.Nullable
  private Map<String, String> mailing = new HashMap<>();

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  @javax.annotation.Nullable
  private Set<String> associations = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_IDENTITY_DOCUMENTS = "identityDocuments";
  @SerializedName(SERIALIZED_NAME_IDENTITY_DOCUMENTS)
  @javax.annotation.Nullable
  private List<Map<String, String>> identityDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_TREATY_DETAILS = "taxTreatyDetails";
  @SerializedName(SERIALIZED_NAME_TAX_TREATY_DETAILS)
  @javax.annotation.Nullable
  private List<Map<String, String>> taxTreatyDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_PERSONS = "AssociatedPersons";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_PERSONS)
  @javax.annotation.Nullable
  private List<AssociatedPerson> associatedPersons = new ArrayList<>();

  public AssociatedEntity() {
  }

  public AssociatedEntity entityId(@javax.annotation.Nullable Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(@javax.annotation.Nullable Integer entityId) {
    this.entityId = entityId;
  }


  public AssociatedEntity externalCode(@javax.annotation.Nullable String externalCode) {
    this.externalCode = externalCode;
    return this;
  }

  /**
   * Get externalCode
   * @return externalCode
   */
  @javax.annotation.Nullable
  public String getExternalCode() {
    return externalCode;
  }

  public void setExternalCode(@javax.annotation.Nullable String externalCode) {
    this.externalCode = externalCode;
  }


  public AssociatedEntity name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AssociatedEntity email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public AssociatedEntity organizationCountry(@javax.annotation.Nullable String organizationCountry) {
    this.organizationCountry = organizationCountry;
    return this;
  }

  /**
   * Get organizationCountry
   * @return organizationCountry
   */
  @javax.annotation.Nullable
  public String getOrganizationCountry() {
    return organizationCountry;
  }

  public void setOrganizationCountry(@javax.annotation.Nullable String organizationCountry) {
    this.organizationCountry = organizationCountry;
  }


  public AssociatedEntity phones(@javax.annotation.Nullable Map<String, String> phones) {
    this.phones = phones;
    return this;
  }

  public AssociatedEntity putPhonesItem(String key, String phonesItem) {
    if (this.phones == null) {
      this.phones = new HashMap<>();
    }
    this.phones.put(key, phonesItem);
    return this;
  }

  /**
   * Get phones
   * @return phones
   */
  @javax.annotation.Nullable
  public Map<String, String> getPhones() {
    return phones;
  }

  public void setPhones(@javax.annotation.Nullable Map<String, String> phones) {
    this.phones = phones;
  }


  public AssociatedEntity residence(@javax.annotation.Nullable Map<String, String> residence) {
    this.residence = residence;
    return this;
  }

  public AssociatedEntity putResidenceItem(String key, String residenceItem) {
    if (this.residence == null) {
      this.residence = new HashMap<>();
    }
    this.residence.put(key, residenceItem);
    return this;
  }

  /**
   * Get residence
   * @return residence
   */
  @javax.annotation.Nullable
  public Map<String, String> getResidence() {
    return residence;
  }

  public void setResidence(@javax.annotation.Nullable Map<String, String> residence) {
    this.residence = residence;
  }


  public AssociatedEntity mailing(@javax.annotation.Nullable Map<String, String> mailing) {
    this.mailing = mailing;
    return this;
  }

  public AssociatedEntity putMailingItem(String key, String mailingItem) {
    if (this.mailing == null) {
      this.mailing = new HashMap<>();
    }
    this.mailing.put(key, mailingItem);
    return this;
  }

  /**
   * Get mailing
   * @return mailing
   */
  @javax.annotation.Nullable
  public Map<String, String> getMailing() {
    return mailing;
  }

  public void setMailing(@javax.annotation.Nullable Map<String, String> mailing) {
    this.mailing = mailing;
  }


  public AssociatedEntity associations(@javax.annotation.Nullable Set<String> associations) {
    this.associations = associations;
    return this;
  }

  public AssociatedEntity addAssociationsItem(String associationsItem) {
    if (this.associations == null) {
      this.associations = new LinkedHashSet<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * Get associations
   * @return associations
   */
  @javax.annotation.Nullable
  public Set<String> getAssociations() {
    return associations;
  }

  public void setAssociations(@javax.annotation.Nullable Set<String> associations) {
    this.associations = associations;
  }


  public AssociatedEntity identityDocuments(@javax.annotation.Nullable List<Map<String, String>> identityDocuments) {
    this.identityDocuments = identityDocuments;
    return this;
  }

  public AssociatedEntity addIdentityDocumentsItem(Map<String, String> identityDocumentsItem) {
    if (this.identityDocuments == null) {
      this.identityDocuments = new ArrayList<>();
    }
    this.identityDocuments.add(identityDocumentsItem);
    return this;
  }

  /**
   * Get identityDocuments
   * @return identityDocuments
   */
  @javax.annotation.Nullable
  public List<Map<String, String>> getIdentityDocuments() {
    return identityDocuments;
  }

  public void setIdentityDocuments(@javax.annotation.Nullable List<Map<String, String>> identityDocuments) {
    this.identityDocuments = identityDocuments;
  }


  public AssociatedEntity taxTreatyDetails(@javax.annotation.Nullable List<Map<String, String>> taxTreatyDetails) {
    this.taxTreatyDetails = taxTreatyDetails;
    return this;
  }

  public AssociatedEntity addTaxTreatyDetailsItem(Map<String, String> taxTreatyDetailsItem) {
    if (this.taxTreatyDetails == null) {
      this.taxTreatyDetails = new ArrayList<>();
    }
    this.taxTreatyDetails.add(taxTreatyDetailsItem);
    return this;
  }

  /**
   * Get taxTreatyDetails
   * @return taxTreatyDetails
   */
  @javax.annotation.Nullable
  public List<Map<String, String>> getTaxTreatyDetails() {
    return taxTreatyDetails;
  }

  public void setTaxTreatyDetails(@javax.annotation.Nullable List<Map<String, String>> taxTreatyDetails) {
    this.taxTreatyDetails = taxTreatyDetails;
  }


  public AssociatedEntity associatedPersons(@javax.annotation.Nullable List<AssociatedPerson> associatedPersons) {
    this.associatedPersons = associatedPersons;
    return this;
  }

  public AssociatedEntity addAssociatedPersonsItem(AssociatedPerson associatedPersonsItem) {
    if (this.associatedPersons == null) {
      this.associatedPersons = new ArrayList<>();
    }
    this.associatedPersons.add(associatedPersonsItem);
    return this;
  }

  /**
   * Get associatedPersons
   * @return associatedPersons
   */
  @javax.annotation.Nullable
  public List<AssociatedPerson> getAssociatedPersons() {
    return associatedPersons;
  }

  public void setAssociatedPersons(@javax.annotation.Nullable List<AssociatedPerson> associatedPersons) {
    this.associatedPersons = associatedPersons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociatedEntity associatedEntity = (AssociatedEntity) o;
    return Objects.equals(this.entityId, associatedEntity.entityId) &&
        Objects.equals(this.externalCode, associatedEntity.externalCode) &&
        Objects.equals(this.name, associatedEntity.name) &&
        Objects.equals(this.email, associatedEntity.email) &&
        Objects.equals(this.organizationCountry, associatedEntity.organizationCountry) &&
        Objects.equals(this.phones, associatedEntity.phones) &&
        Objects.equals(this.residence, associatedEntity.residence) &&
        Objects.equals(this.mailing, associatedEntity.mailing) &&
        Objects.equals(this.associations, associatedEntity.associations) &&
        Objects.equals(this.identityDocuments, associatedEntity.identityDocuments) &&
        Objects.equals(this.taxTreatyDetails, associatedEntity.taxTreatyDetails) &&
        Objects.equals(this.associatedPersons, associatedEntity.associatedPersons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, externalCode, name, email, organizationCountry, phones, residence, mailing, associations, identityDocuments, taxTreatyDetails, associatedPersons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociatedEntity {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    externalCode: ").append(toIndentedString(externalCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    organizationCountry: ").append(toIndentedString(organizationCountry)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    residence: ").append(toIndentedString(residence)).append("\n");
    sb.append("    mailing: ").append(toIndentedString(mailing)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    identityDocuments: ").append(toIndentedString(identityDocuments)).append("\n");
    sb.append("    taxTreatyDetails: ").append(toIndentedString(taxTreatyDetails)).append("\n");
    sb.append("    associatedPersons: ").append(toIndentedString(associatedPersons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityId");
    openapiFields.add("externalCode");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("organizationCountry");
    openapiFields.add("phones");
    openapiFields.add("residence");
    openapiFields.add("mailing");
    openapiFields.add("associations");
    openapiFields.add("identityDocuments");
    openapiFields.add("taxTreatyDetails");
    openapiFields.add("AssociatedPersons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociatedEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociatedEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociatedEntity is not found in the empty JSON string", AssociatedEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociatedEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociatedEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalCode") != null && !jsonObj.get("externalCode").isJsonNull()) && !jsonObj.get("externalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("organizationCountry") != null && !jsonObj.get("organizationCountry").isJsonNull()) && !jsonObj.get("organizationCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationCountry").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull() && !jsonObj.get("associations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associations` to be an array in the JSON string but got `%s`", jsonObj.get("associations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("identityDocuments") != null && !jsonObj.get("identityDocuments").isJsonNull() && !jsonObj.get("identityDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("identityDocuments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("taxTreatyDetails") != null && !jsonObj.get("taxTreatyDetails").isJsonNull() && !jsonObj.get("taxTreatyDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxTreatyDetails` to be an array in the JSON string but got `%s`", jsonObj.get("taxTreatyDetails").toString()));
      }
      if (jsonObj.get("AssociatedPersons") != null && !jsonObj.get("AssociatedPersons").isJsonNull()) {
        JsonArray jsonArrayassociatedPersons = jsonObj.getAsJsonArray("AssociatedPersons");
        if (jsonArrayassociatedPersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AssociatedPersons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AssociatedPersons` to be an array in the JSON string but got `%s`", jsonObj.get("AssociatedPersons").toString()));
          }

          // validate the optional field `AssociatedPersons` (array)
          for (int i = 0; i < jsonArrayassociatedPersons.size(); i++) {
            AssociatedPerson.validateJsonElement(jsonArrayassociatedPersons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociatedEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociatedEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociatedEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociatedEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociatedEntity>() {
           @Override
           public void write(JsonWriter out, AssociatedEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociatedEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociatedEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociatedEntity
   * @throws IOException if the JSON string is invalid with respect to AssociatedEntity
   */
  public static AssociatedEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociatedEntity.class);
  }

  /**
   * Convert an instance of AssociatedEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

