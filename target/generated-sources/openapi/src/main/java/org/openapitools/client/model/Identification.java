/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identification information of the associated person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Identification {
  public static final String SERIALIZED_NAME_CITIZENSHIP = "citizenship";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP)
  @javax.annotation.Nullable
  private String citizenship;

  public static final String SERIALIZED_NAME_CITIZENSHIP2 = "citizenship2";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP2)
  @javax.annotation.Nullable
  private String citizenship2;

  public static final String SERIALIZED_NAME_CITIZENSHIP3 = "citizenship3";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP3)
  @javax.annotation.Nullable
  private String citizenship3;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  @javax.annotation.Nullable
  private String ssn;

  public static final String SERIALIZED_NAME_SIN = "sin";
  @SerializedName(SERIALIZED_NAME_SIN)
  @javax.annotation.Nullable
  private String sin;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE = "driversLicense";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE)
  @javax.annotation.Nullable
  private String driversLicense;

  public static final String SERIALIZED_NAME_PASSPORT = "passport";
  @SerializedName(SERIALIZED_NAME_PASSPORT)
  @javax.annotation.Nullable
  private String passport;

  public static final String SERIALIZED_NAME_ALIEN_CARD = "alienCard";
  @SerializedName(SERIALIZED_NAME_ALIEN_CARD)
  @javax.annotation.Nullable
  private String alienCard;

  public static final String SERIALIZED_NAME_MEDICARE_CARD = "medicareCard";
  @SerializedName(SERIALIZED_NAME_MEDICARE_CARD)
  @javax.annotation.Nullable
  private String medicareCard;

  /**
   * Required if MedicareCard is provided.
   */
  @JsonAdapter(CardColorEnum.Adapter.class)
  public enum CardColorEnum {
    BLUE("BLUE"),
    
    GREEN("GREEN"),
    
    YELLOW("YELLOW");

    private String value;

    CardColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardColorEnum fromValue(String value) {
      for (CardColorEnum b : CardColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARD_COLOR = "cardColor";
  @SerializedName(SERIALIZED_NAME_CARD_COLOR)
  @javax.annotation.Nullable
  private CardColorEnum cardColor;

  public static final String SERIALIZED_NAME_MEDICARE_REFERENCE = "medicareReference";
  @SerializedName(SERIALIZED_NAME_MEDICARE_REFERENCE)
  @javax.annotation.Nullable
  private String medicareReference;

  public static final String SERIALIZED_NAME_NATIONAL_CARD = "nationalCard";
  @SerializedName(SERIALIZED_NAME_NATIONAL_CARD)
  @javax.annotation.Nullable
  private String nationalCard;

  public static final String SERIALIZED_NAME_ISSUING_COUNTRY = "issuingCountry";
  @SerializedName(SERIALIZED_NAME_ISSUING_COUNTRY)
  @javax.annotation.Nullable
  private String issuingCountry;

  public static final String SERIALIZED_NAME_ISSUING_STATE = "issuingState";
  @SerializedName(SERIALIZED_NAME_ISSUING_STATE)
  @javax.annotation.Nullable
  private String issuingState;

  public static final String SERIALIZED_NAME_RTA = "rta";
  @SerializedName(SERIALIZED_NAME_RTA)
  @javax.annotation.Nullable
  private String rta;

  public static final String SERIALIZED_NAME_LEGAL_RESIDENCE_COUNTRY = "legalResidenceCountry";
  @SerializedName(SERIALIZED_NAME_LEGAL_RESIDENCE_COUNTRY)
  @javax.annotation.Nullable
  private String legalResidenceCountry;

  public static final String SERIALIZED_NAME_LEGAL_RESIDENCE_STATE = "legalResidenceState";
  @SerializedName(SERIALIZED_NAME_LEGAL_RESIDENCE_STATE)
  @javax.annotation.Nullable
  private String legalResidenceState;

  public static final String SERIALIZED_NAME_EDUCATIONAL_QUALIFICATION = "educationalQualification";
  @SerializedName(SERIALIZED_NAME_EDUCATIONAL_QUALIFICATION)
  @javax.annotation.Nullable
  private String educationalQualification;

  public static final String SERIALIZED_NAME_FATHERS_NAME = "fathersName";
  @SerializedName(SERIALIZED_NAME_FATHERS_NAME)
  @javax.annotation.Nullable
  private String fathersName;

  public static final String SERIALIZED_NAME_GREEN_CARD = "greenCard";
  @SerializedName(SERIALIZED_NAME_GREEN_CARD)
  @javax.annotation.Nullable
  private Boolean greenCard;

  public static final String SERIALIZED_NAME_PAN_NUMBER = "panNumber";
  @SerializedName(SERIALIZED_NAME_PAN_NUMBER)
  @javax.annotation.Nullable
  private String panNumber;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  @javax.annotation.Nullable
  private String taxId;

  public static final String SERIALIZED_NAME_PROOF_OF_AGE_CARD = "proofOfAgeCard";
  @SerializedName(SERIALIZED_NAME_PROOF_OF_AGE_CARD)
  @javax.annotation.Nullable
  private String proofOfAgeCard;

  public static final String SERIALIZED_NAME_EXPIRE = "expire";
  @SerializedName(SERIALIZED_NAME_EXPIRE)
  @javax.annotation.Nullable
  private Boolean expire;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  @javax.annotation.Nullable
  private LocalDate expirationDate;

  public Identification() {
  }

  public Identification citizenship(@javax.annotation.Nullable String citizenship) {
    this.citizenship = citizenship;
    return this;
  }

  /**
   * Citizenship of the applicant.&lt;br&gt;If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country&#39;, THEN ProhibitedCountryQuestionnaire is required.&lt;br&gt;List of Prohibited Countries an be obtained using /getEnumerations&lt;br&gt;Preferred id document by IssuingCountry
   * @return citizenship
   */
  @javax.annotation.Nullable
  public String getCitizenship() {
    return citizenship;
  }

  public void setCitizenship(@javax.annotation.Nullable String citizenship) {
    this.citizenship = citizenship;
  }


  public Identification citizenship2(@javax.annotation.Nullable String citizenship2) {
    this.citizenship2 = citizenship2;
    return this;
  }

  /**
   * If the applicant has multiple citizenship, provide the additional citizenship of the applicant.&lt;br&gt;If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country&#39;, THEN ProhibitedCountryQuestionnaire is required.&lt;br&gt;List of Prohibited Countries an be obtained using /getEnumerations&lt;br&gt;Preferred id document by IssuingCountry
   * @return citizenship2
   */
  @javax.annotation.Nullable
  public String getCitizenship2() {
    return citizenship2;
  }

  public void setCitizenship2(@javax.annotation.Nullable String citizenship2) {
    this.citizenship2 = citizenship2;
  }


  public Identification citizenship3(@javax.annotation.Nullable String citizenship3) {
    this.citizenship3 = citizenship3;
    return this;
  }

  /**
   * If the applicant has multiple citizenship, provide the additional citizenship of the applicant.&lt;br&gt;If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country&#39;, THEN ProhibitedCountryQuestionnaire is required.&lt;br&gt;List of Prohibited Countries an be obtained using /getEnumerations&lt;br&gt;Preferred id document by IssuingCountry
   * @return citizenship3
   */
  @javax.annotation.Nullable
  public String getCitizenship3() {
    return citizenship3;
  }

  public void setCitizenship3(@javax.annotation.Nullable String citizenship3) {
    this.citizenship3 = citizenship3;
  }


  public Identification ssn(@javax.annotation.Nullable String ssn) {
    this.ssn = ssn;
    return this;
  }

  /**
   * Social security number, required for US Residents and citizens.
   * @return ssn
   */
  @javax.annotation.Nullable
  public String getSsn() {
    return ssn;
  }

  public void setSsn(@javax.annotation.Nullable String ssn) {
    this.ssn = ssn;
  }


  public Identification sin(@javax.annotation.Nullable String sin) {
    this.sin = sin;
    return this;
  }

  /**
   * Social insurance number, required for Canada Residents and citizens.
   * @return sin
   */
  @javax.annotation.Nullable
  public String getSin() {
    return sin;
  }

  public void setSin(@javax.annotation.Nullable String sin) {
    this.sin = sin;
  }


  public Identification driversLicense(@javax.annotation.Nullable String driversLicense) {
    this.driversLicense = driversLicense;
    return this;
  }

  /**
   * Drivers License&lt;br&gt;Pattern for AUS: ^.{0,64}$&lt;br&gt;Pattern for NZL: ^[A-Z]{2}\\d{6}$
   * @return driversLicense
   */
  @javax.annotation.Nullable
  public String getDriversLicense() {
    return driversLicense;
  }

  public void setDriversLicense(@javax.annotation.Nullable String driversLicense) {
    this.driversLicense = driversLicense;
  }


  public Identification passport(@javax.annotation.Nullable String passport) {
    this.passport = passport;
    return this;
  }

  /**
   * Passport
   * @return passport
   */
  @javax.annotation.Nullable
  public String getPassport() {
    return passport;
  }

  public void setPassport(@javax.annotation.Nullable String passport) {
    this.passport = passport;
  }


  public Identification alienCard(@javax.annotation.Nullable String alienCard) {
    this.alienCard = alienCard;
    return this;
  }

  /**
   * Alien Card
   * @return alienCard
   */
  @javax.annotation.Nullable
  public String getAlienCard() {
    return alienCard;
  }

  public void setAlienCard(@javax.annotation.Nullable String alienCard) {
    this.alienCard = alienCard;
  }


  public Identification medicareCard(@javax.annotation.Nullable String medicareCard) {
    this.medicareCard = medicareCard;
    return this;
  }

  /**
   * Only applicable for Australia residents.
   * @return medicareCard
   */
  @javax.annotation.Nullable
  public String getMedicareCard() {
    return medicareCard;
  }

  public void setMedicareCard(@javax.annotation.Nullable String medicareCard) {
    this.medicareCard = medicareCard;
  }


  public Identification cardColor(@javax.annotation.Nullable CardColorEnum cardColor) {
    this.cardColor = cardColor;
    return this;
  }

  /**
   * Required if MedicareCard is provided.
   * @return cardColor
   */
  @javax.annotation.Nullable
  public CardColorEnum getCardColor() {
    return cardColor;
  }

  public void setCardColor(@javax.annotation.Nullable CardColorEnum cardColor) {
    this.cardColor = cardColor;
  }


  public Identification medicareReference(@javax.annotation.Nullable String medicareReference) {
    this.medicareReference = medicareReference;
    return this;
  }

  /**
   * Required if MedicareCard is provided.
   * @return medicareReference
   */
  @javax.annotation.Nullable
  public String getMedicareReference() {
    return medicareReference;
  }

  public void setMedicareReference(@javax.annotation.Nullable String medicareReference) {
    this.medicareReference = medicareReference;
  }


  public Identification nationalCard(@javax.annotation.Nullable String nationalCard) {
    this.nationalCard = nationalCard;
    return this;
  }

  /**
   * National Identification Card&lt;br&gt;Pattern by Country-&lt;br&gt; ARG: ^\\d{8}$&lt;br&gt;AUS: ^(\\d{8}|\\d{9})$&lt;br&gt;BRA: ^\\d{11}$&lt;br&gt;CHN: ^\\d{17}(\\d|X)$&lt;br&gt;DNK: ^\\d{10}$&lt;br&gt;ESP: ^\\d{8}[A-Z]$&lt;br&gt;FRA: ^\\d{15}$&lt;br&gt;FRA: ^\\d{4}([A-Z]|\\d){3}\\d{5}$&lt;br&gt;ITA: ^([A-Z]{2}\\d{7}|\\d{7}[A-Z]{2}|[A-Z]{2}\\d{5}[A-Z]{2})$&lt;br&gt;ITA: ^[A-Z]{6}\\d{2}[A-Z]\\d{2}[A-Z]\\d{3}[A-Z]$&lt;br&gt;MEX: ^[A-Z]{4}\\d{6}[A-Z]{6}\\d{2}$&lt;br&gt;MYZ: ^\\d{12}$&lt;br&gt;RUS: ^\\d{10}$&lt;br&gt;RUS: ^\\d{9}$&lt;br&gt;SGP: ^[A-Z]\\d{7}[A-Z]$&lt;br&gt;SWE: ^(\\d{10}|\\d{12})$&lt;br&gt;TUR: ^\\d{11}$&lt;br&gt;ZAF: ^\\d{13}$
   * @return nationalCard
   */
  @javax.annotation.Nullable
  public String getNationalCard() {
    return nationalCard;
  }

  public void setNationalCard(@javax.annotation.Nullable String nationalCard) {
    this.nationalCard = nationalCard;
  }


  public Identification issuingCountry(@javax.annotation.Nullable String issuingCountry) {
    this.issuingCountry = issuingCountry;
    return this;
  }

  /**
   * Issuing country of the ID document.
   * @return issuingCountry
   */
  @javax.annotation.Nullable
  public String getIssuingCountry() {
    return issuingCountry;
  }

  public void setIssuingCountry(@javax.annotation.Nullable String issuingCountry) {
    this.issuingCountry = issuingCountry;
  }


  public Identification issuingState(@javax.annotation.Nullable String issuingState) {
    this.issuingState = issuingState;
    return this;
  }

  /**
   * Issuing state of the ID document.
   * @return issuingState
   */
  @javax.annotation.Nullable
  public String getIssuingState() {
    return issuingState;
  }

  public void setIssuingState(@javax.annotation.Nullable String issuingState) {
    this.issuingState = issuingState;
  }


  public Identification rta(@javax.annotation.Nullable String rta) {
    this.rta = rta;
    return this;
  }

  /**
   * Only applicable IF ID_Type&#x3D;DriversLicense AND IssuingCountry&#x3D;AUS
   * @return rta
   */
  @javax.annotation.Nullable
  public String getRta() {
    return rta;
  }

  public void setRta(@javax.annotation.Nullable String rta) {
    this.rta = rta;
  }


  public Identification legalResidenceCountry(@javax.annotation.Nullable String legalResidenceCountry) {
    this.legalResidenceCountry = legalResidenceCountry;
    return this;
  }

  /**
   * Get legalResidenceCountry
   * @return legalResidenceCountry
   */
  @javax.annotation.Nullable
  public String getLegalResidenceCountry() {
    return legalResidenceCountry;
  }

  public void setLegalResidenceCountry(@javax.annotation.Nullable String legalResidenceCountry) {
    this.legalResidenceCountry = legalResidenceCountry;
  }


  public Identification legalResidenceState(@javax.annotation.Nullable String legalResidenceState) {
    this.legalResidenceState = legalResidenceState;
    return this;
  }

  /**
   * Get legalResidenceState
   * @return legalResidenceState
   */
  @javax.annotation.Nullable
  public String getLegalResidenceState() {
    return legalResidenceState;
  }

  public void setLegalResidenceState(@javax.annotation.Nullable String legalResidenceState) {
    this.legalResidenceState = legalResidenceState;
  }


  public Identification educationalQualification(@javax.annotation.Nullable String educationalQualification) {
    this.educationalQualification = educationalQualification;
    return this;
  }

  /**
   * Get educationalQualification
   * @return educationalQualification
   */
  @javax.annotation.Nullable
  public String getEducationalQualification() {
    return educationalQualification;
  }

  public void setEducationalQualification(@javax.annotation.Nullable String educationalQualification) {
    this.educationalQualification = educationalQualification;
  }


  public Identification fathersName(@javax.annotation.Nullable String fathersName) {
    this.fathersName = fathersName;
    return this;
  }

  /**
   * Get fathersName
   * @return fathersName
   */
  @javax.annotation.Nullable
  public String getFathersName() {
    return fathersName;
  }

  public void setFathersName(@javax.annotation.Nullable String fathersName) {
    this.fathersName = fathersName;
  }


  public Identification greenCard(@javax.annotation.Nullable Boolean greenCard) {
    this.greenCard = greenCard;
    return this;
  }

  /**
   * Get greenCard
   * @return greenCard
   */
  @javax.annotation.Nullable
  public Boolean getGreenCard() {
    return greenCard;
  }

  public void setGreenCard(@javax.annotation.Nullable Boolean greenCard) {
    this.greenCard = greenCard;
  }


  public Identification panNumber(@javax.annotation.Nullable String panNumber) {
    this.panNumber = panNumber;
    return this;
  }

  /**
   * India PanCard, required for India Residents and citizens.
   * @return panNumber
   */
  @javax.annotation.Nullable
  public String getPanNumber() {
    return panNumber;
  }

  public void setPanNumber(@javax.annotation.Nullable String panNumber) {
    this.panNumber = panNumber;
  }


  public Identification taxId(@javax.annotation.Nullable String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * Tax ID TIN within &lt;TaxResidencies&gt;foreign_tax_id within &lt;W8Ben&gt;
   * @return taxId
   */
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(@javax.annotation.Nullable String taxId) {
    this.taxId = taxId;
  }


  public Identification proofOfAgeCard(@javax.annotation.Nullable String proofOfAgeCard) {
    this.proofOfAgeCard = proofOfAgeCard;
    return this;
  }

  /**
   * Get proofOfAgeCard
   * @return proofOfAgeCard
   */
  @javax.annotation.Nullable
  public String getProofOfAgeCard() {
    return proofOfAgeCard;
  }

  public void setProofOfAgeCard(@javax.annotation.Nullable String proofOfAgeCard) {
    this.proofOfAgeCard = proofOfAgeCard;
  }


  public Identification expire(@javax.annotation.Nullable Boolean expire) {
    this.expire = expire;
    return this;
  }

  /**
   * Indicate IF ID document has an ExpirationDate.
   * @return expire
   */
  @javax.annotation.Nullable
  public Boolean getExpire() {
    return expire;
  }

  public void setExpire(@javax.annotation.Nullable Boolean expire) {
    this.expire = expire;
  }


  public Identification expirationDate(@javax.annotation.Nullable LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Provide expiration date of the ID document. Cannot be past date.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(@javax.annotation.Nullable LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Identification identification = (Identification) o;
    return Objects.equals(this.citizenship, identification.citizenship) &&
        Objects.equals(this.citizenship2, identification.citizenship2) &&
        Objects.equals(this.citizenship3, identification.citizenship3) &&
        Objects.equals(this.ssn, identification.ssn) &&
        Objects.equals(this.sin, identification.sin) &&
        Objects.equals(this.driversLicense, identification.driversLicense) &&
        Objects.equals(this.passport, identification.passport) &&
        Objects.equals(this.alienCard, identification.alienCard) &&
        Objects.equals(this.medicareCard, identification.medicareCard) &&
        Objects.equals(this.cardColor, identification.cardColor) &&
        Objects.equals(this.medicareReference, identification.medicareReference) &&
        Objects.equals(this.nationalCard, identification.nationalCard) &&
        Objects.equals(this.issuingCountry, identification.issuingCountry) &&
        Objects.equals(this.issuingState, identification.issuingState) &&
        Objects.equals(this.rta, identification.rta) &&
        Objects.equals(this.legalResidenceCountry, identification.legalResidenceCountry) &&
        Objects.equals(this.legalResidenceState, identification.legalResidenceState) &&
        Objects.equals(this.educationalQualification, identification.educationalQualification) &&
        Objects.equals(this.fathersName, identification.fathersName) &&
        Objects.equals(this.greenCard, identification.greenCard) &&
        Objects.equals(this.panNumber, identification.panNumber) &&
        Objects.equals(this.taxId, identification.taxId) &&
        Objects.equals(this.proofOfAgeCard, identification.proofOfAgeCard) &&
        Objects.equals(this.expire, identification.expire) &&
        Objects.equals(this.expirationDate, identification.expirationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citizenship, citizenship2, citizenship3, ssn, sin, driversLicense, passport, alienCard, medicareCard, cardColor, medicareReference, nationalCard, issuingCountry, issuingState, rta, legalResidenceCountry, legalResidenceState, educationalQualification, fathersName, greenCard, panNumber, taxId, proofOfAgeCard, expire, expirationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Identification {\n");
    sb.append("    citizenship: ").append(toIndentedString(citizenship)).append("\n");
    sb.append("    citizenship2: ").append(toIndentedString(citizenship2)).append("\n");
    sb.append("    citizenship3: ").append(toIndentedString(citizenship3)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    sin: ").append(toIndentedString(sin)).append("\n");
    sb.append("    driversLicense: ").append(toIndentedString(driversLicense)).append("\n");
    sb.append("    passport: ").append(toIndentedString(passport)).append("\n");
    sb.append("    alienCard: ").append(toIndentedString(alienCard)).append("\n");
    sb.append("    medicareCard: ").append(toIndentedString(medicareCard)).append("\n");
    sb.append("    cardColor: ").append(toIndentedString(cardColor)).append("\n");
    sb.append("    medicareReference: ").append(toIndentedString(medicareReference)).append("\n");
    sb.append("    nationalCard: ").append(toIndentedString(nationalCard)).append("\n");
    sb.append("    issuingCountry: ").append(toIndentedString(issuingCountry)).append("\n");
    sb.append("    issuingState: ").append(toIndentedString(issuingState)).append("\n");
    sb.append("    rta: ").append(toIndentedString(rta)).append("\n");
    sb.append("    legalResidenceCountry: ").append(toIndentedString(legalResidenceCountry)).append("\n");
    sb.append("    legalResidenceState: ").append(toIndentedString(legalResidenceState)).append("\n");
    sb.append("    educationalQualification: ").append(toIndentedString(educationalQualification)).append("\n");
    sb.append("    fathersName: ").append(toIndentedString(fathersName)).append("\n");
    sb.append("    greenCard: ").append(toIndentedString(greenCard)).append("\n");
    sb.append("    panNumber: ").append(toIndentedString(panNumber)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    proofOfAgeCard: ").append(toIndentedString(proofOfAgeCard)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citizenship");
    openapiFields.add("citizenship2");
    openapiFields.add("citizenship3");
    openapiFields.add("ssn");
    openapiFields.add("sin");
    openapiFields.add("driversLicense");
    openapiFields.add("passport");
    openapiFields.add("alienCard");
    openapiFields.add("medicareCard");
    openapiFields.add("cardColor");
    openapiFields.add("medicareReference");
    openapiFields.add("nationalCard");
    openapiFields.add("issuingCountry");
    openapiFields.add("issuingState");
    openapiFields.add("rta");
    openapiFields.add("legalResidenceCountry");
    openapiFields.add("legalResidenceState");
    openapiFields.add("educationalQualification");
    openapiFields.add("fathersName");
    openapiFields.add("greenCard");
    openapiFields.add("panNumber");
    openapiFields.add("taxId");
    openapiFields.add("proofOfAgeCard");
    openapiFields.add("expire");
    openapiFields.add("expirationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Identification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Identification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Identification is not found in the empty JSON string", Identification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Identification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Identification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("citizenship") != null && !jsonObj.get("citizenship").isJsonNull()) && !jsonObj.get("citizenship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citizenship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citizenship").toString()));
      }
      if ((jsonObj.get("citizenship2") != null && !jsonObj.get("citizenship2").isJsonNull()) && !jsonObj.get("citizenship2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citizenship2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citizenship2").toString()));
      }
      if ((jsonObj.get("citizenship3") != null && !jsonObj.get("citizenship3").isJsonNull()) && !jsonObj.get("citizenship3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citizenship3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citizenship3").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("sin") != null && !jsonObj.get("sin").isJsonNull()) && !jsonObj.get("sin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sin").toString()));
      }
      if ((jsonObj.get("driversLicense") != null && !jsonObj.get("driversLicense").isJsonNull()) && !jsonObj.get("driversLicense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driversLicense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driversLicense").toString()));
      }
      if ((jsonObj.get("passport") != null && !jsonObj.get("passport").isJsonNull()) && !jsonObj.get("passport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passport").toString()));
      }
      if ((jsonObj.get("alienCard") != null && !jsonObj.get("alienCard").isJsonNull()) && !jsonObj.get("alienCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alienCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alienCard").toString()));
      }
      if ((jsonObj.get("medicareCard") != null && !jsonObj.get("medicareCard").isJsonNull()) && !jsonObj.get("medicareCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medicareCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medicareCard").toString()));
      }
      if ((jsonObj.get("cardColor") != null && !jsonObj.get("cardColor").isJsonNull()) && !jsonObj.get("cardColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardColor").toString()));
      }
      // validate the optional field `cardColor`
      if (jsonObj.get("cardColor") != null && !jsonObj.get("cardColor").isJsonNull()) {
        CardColorEnum.validateJsonElement(jsonObj.get("cardColor"));
      }
      if ((jsonObj.get("medicareReference") != null && !jsonObj.get("medicareReference").isJsonNull()) && !jsonObj.get("medicareReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medicareReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medicareReference").toString()));
      }
      if ((jsonObj.get("nationalCard") != null && !jsonObj.get("nationalCard").isJsonNull()) && !jsonObj.get("nationalCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalCard").toString()));
      }
      if ((jsonObj.get("issuingCountry") != null && !jsonObj.get("issuingCountry").isJsonNull()) && !jsonObj.get("issuingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingCountry").toString()));
      }
      if ((jsonObj.get("issuingState") != null && !jsonObj.get("issuingState").isJsonNull()) && !jsonObj.get("issuingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingState").toString()));
      }
      if ((jsonObj.get("rta") != null && !jsonObj.get("rta").isJsonNull()) && !jsonObj.get("rta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rta").toString()));
      }
      if ((jsonObj.get("legalResidenceCountry") != null && !jsonObj.get("legalResidenceCountry").isJsonNull()) && !jsonObj.get("legalResidenceCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalResidenceCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalResidenceCountry").toString()));
      }
      if ((jsonObj.get("legalResidenceState") != null && !jsonObj.get("legalResidenceState").isJsonNull()) && !jsonObj.get("legalResidenceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalResidenceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalResidenceState").toString()));
      }
      if ((jsonObj.get("educationalQualification") != null && !jsonObj.get("educationalQualification").isJsonNull()) && !jsonObj.get("educationalQualification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `educationalQualification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("educationalQualification").toString()));
      }
      if ((jsonObj.get("fathersName") != null && !jsonObj.get("fathersName").isJsonNull()) && !jsonObj.get("fathersName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fathersName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fathersName").toString()));
      }
      if ((jsonObj.get("panNumber") != null && !jsonObj.get("panNumber").isJsonNull()) && !jsonObj.get("panNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panNumber").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("proofOfAgeCard") != null && !jsonObj.get("proofOfAgeCard").isJsonNull()) && !jsonObj.get("proofOfAgeCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofOfAgeCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofOfAgeCard").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Identification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Identification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Identification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Identification.class));

       return (TypeAdapter<T>) new TypeAdapter<Identification>() {
           @Override
           public void write(JsonWriter out, Identification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Identification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Identification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Identification
   * @throws IOException if the JSON string is invalid with respect to Identification
   */
  public static Identification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Identification.class);
  }

  /**
   * Convert an instance of Identification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

