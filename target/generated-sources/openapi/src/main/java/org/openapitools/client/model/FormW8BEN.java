/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalTaxForm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormW8BEN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class FormW8BEN {
  public static final String SERIALIZED_NAME_LOCAL_TAX_FORMS = "localTaxForms";
  @SerializedName(SERIALIZED_NAME_LOCAL_TAX_FORMS)
  @javax.annotation.Nullable
  private List<LocalTaxForm> localTaxForms = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TIN = "tin";
  @SerializedName(SERIALIZED_NAME_TIN)
  @javax.annotation.Nullable
  private String tin;

  public static final String SERIALIZED_NAME_FOREIGN_TAX_ID = "foreignTaxId";
  @SerializedName(SERIALIZED_NAME_FOREIGN_TAX_ID)
  @javax.annotation.Nullable
  private String foreignTaxId;

  public static final String SERIALIZED_NAME_TIN_OR_EXPLANATION_REQUIRED = "tinOrExplanationRequired";
  @SerializedName(SERIALIZED_NAME_TIN_OR_EXPLANATION_REQUIRED)
  @javax.annotation.Nullable
  private Boolean tinOrExplanationRequired;

  /**
   * Gets or Sets explanation
   */
  @JsonAdapter(ExplanationEnum.Adapter.class)
  public enum ExplanationEnum {
    US_TIN("US_TIN"),
    
    TIN_NOT_DISCLOSED("TIN_NOT_DISCLOSED"),
    
    TIN_NOT_REQUIRED("TIN_NOT_REQUIRED"),
    
    TIN_NOT_ISSUED("TIN_NOT_ISSUED");

    private String value;

    ExplanationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExplanationEnum fromValue(String value) {
      for (ExplanationEnum b : ExplanationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExplanationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExplanationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExplanationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExplanationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExplanationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  @javax.annotation.Nullable
  private ExplanationEnum explanation;

  public static final String SERIALIZED_NAME_REFERENCE_NUMBER = "referenceNumber";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NUMBER)
  @javax.annotation.Nullable
  private Integer referenceNumber;

  public static final String SERIALIZED_NAME_PART29_A_COUNTRY = "part29ACountry";
  @SerializedName(SERIALIZED_NAME_PART29_A_COUNTRY)
  @javax.annotation.Nullable
  private String part29ACountry;

  public static final String SERIALIZED_NAME_CERT = "cert";
  @SerializedName(SERIALIZED_NAME_CERT)
  @javax.annotation.Nullable
  private Boolean cert;

  /**
   * Gets or Sets signatureType
   */
  @JsonAdapter(SignatureTypeEnum.Adapter.class)
  public enum SignatureTypeEnum {
    ELECTRONIC("Electronic"),
    
    PHYSICAL("Physical");

    private String value;

    SignatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureTypeEnum fromValue(String value) {
      for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignatureTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_TYPE = "signatureType";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_TYPE)
  @javax.annotation.Nullable
  private SignatureTypeEnum signatureType;

  public static final String SERIALIZED_NAME_BLANK_FORM = "blankForm";
  @SerializedName(SERIALIZED_NAME_BLANK_FORM)
  @javax.annotation.Nullable
  private Boolean blankForm;

  public static final String SERIALIZED_NAME_TAX_FORM_FILE = "taxFormFile";
  @SerializedName(SERIALIZED_NAME_TAX_FORM_FILE)
  @javax.annotation.Nullable
  private String taxFormFile;

  public static final String SERIALIZED_NAME_PROPRIETARY_FORM_NUMBER = "proprietaryFormNumber";
  @SerializedName(SERIALIZED_NAME_PROPRIETARY_FORM_NUMBER)
  @javax.annotation.Nullable
  private Integer proprietaryFormNumber;

  public static final String SERIALIZED_NAME_ELECTRONIC_FORMAT = "electronicFormat";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_FORMAT)
  @javax.annotation.Nullable
  private Boolean electronicFormat;

  public static final String SERIALIZED_NAME_SUBMIT_DATE = "submitDate";
  @SerializedName(SERIALIZED_NAME_SUBMIT_DATE)
  @javax.annotation.Nullable
  private String submitDate;

  public FormW8BEN() {
  }

  public FormW8BEN localTaxForms(@javax.annotation.Nullable List<LocalTaxForm> localTaxForms) {
    this.localTaxForms = localTaxForms;
    return this;
  }

  public FormW8BEN addLocalTaxFormsItem(LocalTaxForm localTaxFormsItem) {
    if (this.localTaxForms == null) {
      this.localTaxForms = new ArrayList<>();
    }
    this.localTaxForms.add(localTaxFormsItem);
    return this;
  }

  /**
   * Get localTaxForms
   * @return localTaxForms
   */
  @javax.annotation.Nullable
  public List<LocalTaxForm> getLocalTaxForms() {
    return localTaxForms;
  }

  public void setLocalTaxForms(@javax.annotation.Nullable List<LocalTaxForm> localTaxForms) {
    this.localTaxForms = localTaxForms;
  }


  public FormW8BEN name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public FormW8BEN tin(@javax.annotation.Nullable String tin) {
    this.tin = tin;
    return this;
  }

  /**
   * Get tin
   * @return tin
   */
  @javax.annotation.Nullable
  public String getTin() {
    return tin;
  }

  public void setTin(@javax.annotation.Nullable String tin) {
    this.tin = tin;
  }


  public FormW8BEN foreignTaxId(@javax.annotation.Nullable String foreignTaxId) {
    this.foreignTaxId = foreignTaxId;
    return this;
  }

  /**
   * Get foreignTaxId
   * @return foreignTaxId
   */
  @javax.annotation.Nullable
  public String getForeignTaxId() {
    return foreignTaxId;
  }

  public void setForeignTaxId(@javax.annotation.Nullable String foreignTaxId) {
    this.foreignTaxId = foreignTaxId;
  }


  public FormW8BEN tinOrExplanationRequired(@javax.annotation.Nullable Boolean tinOrExplanationRequired) {
    this.tinOrExplanationRequired = tinOrExplanationRequired;
    return this;
  }

  /**
   * Get tinOrExplanationRequired
   * @return tinOrExplanationRequired
   */
  @javax.annotation.Nullable
  public Boolean getTinOrExplanationRequired() {
    return tinOrExplanationRequired;
  }

  public void setTinOrExplanationRequired(@javax.annotation.Nullable Boolean tinOrExplanationRequired) {
    this.tinOrExplanationRequired = tinOrExplanationRequired;
  }


  public FormW8BEN explanation(@javax.annotation.Nullable ExplanationEnum explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Get explanation
   * @return explanation
   */
  @javax.annotation.Nullable
  public ExplanationEnum getExplanation() {
    return explanation;
  }

  public void setExplanation(@javax.annotation.Nullable ExplanationEnum explanation) {
    this.explanation = explanation;
  }


  public FormW8BEN referenceNumber(@javax.annotation.Nullable Integer referenceNumber) {
    this.referenceNumber = referenceNumber;
    return this;
  }

  /**
   * Get referenceNumber
   * @return referenceNumber
   */
  @javax.annotation.Nullable
  public Integer getReferenceNumber() {
    return referenceNumber;
  }

  public void setReferenceNumber(@javax.annotation.Nullable Integer referenceNumber) {
    this.referenceNumber = referenceNumber;
  }


  public FormW8BEN part29ACountry(@javax.annotation.Nullable String part29ACountry) {
    this.part29ACountry = part29ACountry;
    return this;
  }

  /**
   * Get part29ACountry
   * @return part29ACountry
   */
  @javax.annotation.Nullable
  public String getPart29ACountry() {
    return part29ACountry;
  }

  public void setPart29ACountry(@javax.annotation.Nullable String part29ACountry) {
    this.part29ACountry = part29ACountry;
  }


  public FormW8BEN cert(@javax.annotation.Nullable Boolean cert) {
    this.cert = cert;
    return this;
  }

  /**
   * Get cert
   * @return cert
   */
  @javax.annotation.Nullable
  public Boolean getCert() {
    return cert;
  }

  public void setCert(@javax.annotation.Nullable Boolean cert) {
    this.cert = cert;
  }


  public FormW8BEN signatureType(@javax.annotation.Nullable SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
    return this;
  }

  /**
   * Get signatureType
   * @return signatureType
   */
  @javax.annotation.Nullable
  public SignatureTypeEnum getSignatureType() {
    return signatureType;
  }

  public void setSignatureType(@javax.annotation.Nullable SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
  }


  public FormW8BEN blankForm(@javax.annotation.Nullable Boolean blankForm) {
    this.blankForm = blankForm;
    return this;
  }

  /**
   * Get blankForm
   * @return blankForm
   */
  @javax.annotation.Nullable
  public Boolean getBlankForm() {
    return blankForm;
  }

  public void setBlankForm(@javax.annotation.Nullable Boolean blankForm) {
    this.blankForm = blankForm;
  }


  public FormW8BEN taxFormFile(@javax.annotation.Nullable String taxFormFile) {
    this.taxFormFile = taxFormFile;
    return this;
  }

  /**
   * Get taxFormFile
   * @return taxFormFile
   */
  @javax.annotation.Nullable
  public String getTaxFormFile() {
    return taxFormFile;
  }

  public void setTaxFormFile(@javax.annotation.Nullable String taxFormFile) {
    this.taxFormFile = taxFormFile;
  }


  public FormW8BEN proprietaryFormNumber(@javax.annotation.Nullable Integer proprietaryFormNumber) {
    this.proprietaryFormNumber = proprietaryFormNumber;
    return this;
  }

  /**
   * Get proprietaryFormNumber
   * @return proprietaryFormNumber
   */
  @javax.annotation.Nullable
  public Integer getProprietaryFormNumber() {
    return proprietaryFormNumber;
  }

  public void setProprietaryFormNumber(@javax.annotation.Nullable Integer proprietaryFormNumber) {
    this.proprietaryFormNumber = proprietaryFormNumber;
  }


  public FormW8BEN electronicFormat(@javax.annotation.Nullable Boolean electronicFormat) {
    this.electronicFormat = electronicFormat;
    return this;
  }

  /**
   * Get electronicFormat
   * @return electronicFormat
   */
  @javax.annotation.Nullable
  public Boolean getElectronicFormat() {
    return electronicFormat;
  }

  public void setElectronicFormat(@javax.annotation.Nullable Boolean electronicFormat) {
    this.electronicFormat = electronicFormat;
  }


  public FormW8BEN submitDate(@javax.annotation.Nullable String submitDate) {
    this.submitDate = submitDate;
    return this;
  }

  /**
   * Get submitDate
   * @return submitDate
   */
  @javax.annotation.Nullable
  public String getSubmitDate() {
    return submitDate;
  }

  public void setSubmitDate(@javax.annotation.Nullable String submitDate) {
    this.submitDate = submitDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormW8BEN formW8BEN = (FormW8BEN) o;
    return Objects.equals(this.localTaxForms, formW8BEN.localTaxForms) &&
        Objects.equals(this.name, formW8BEN.name) &&
        Objects.equals(this.tin, formW8BEN.tin) &&
        Objects.equals(this.foreignTaxId, formW8BEN.foreignTaxId) &&
        Objects.equals(this.tinOrExplanationRequired, formW8BEN.tinOrExplanationRequired) &&
        Objects.equals(this.explanation, formW8BEN.explanation) &&
        Objects.equals(this.referenceNumber, formW8BEN.referenceNumber) &&
        Objects.equals(this.part29ACountry, formW8BEN.part29ACountry) &&
        Objects.equals(this.cert, formW8BEN.cert) &&
        Objects.equals(this.signatureType, formW8BEN.signatureType) &&
        Objects.equals(this.blankForm, formW8BEN.blankForm) &&
        Objects.equals(this.taxFormFile, formW8BEN.taxFormFile) &&
        Objects.equals(this.proprietaryFormNumber, formW8BEN.proprietaryFormNumber) &&
        Objects.equals(this.electronicFormat, formW8BEN.electronicFormat) &&
        Objects.equals(this.submitDate, formW8BEN.submitDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localTaxForms, name, tin, foreignTaxId, tinOrExplanationRequired, explanation, referenceNumber, part29ACountry, cert, signatureType, blankForm, taxFormFile, proprietaryFormNumber, electronicFormat, submitDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormW8BEN {\n");
    sb.append("    localTaxForms: ").append(toIndentedString(localTaxForms)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tin: ").append(toIndentedString(tin)).append("\n");
    sb.append("    foreignTaxId: ").append(toIndentedString(foreignTaxId)).append("\n");
    sb.append("    tinOrExplanationRequired: ").append(toIndentedString(tinOrExplanationRequired)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    part29ACountry: ").append(toIndentedString(part29ACountry)).append("\n");
    sb.append("    cert: ").append(toIndentedString(cert)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("    blankForm: ").append(toIndentedString(blankForm)).append("\n");
    sb.append("    taxFormFile: ").append(toIndentedString(taxFormFile)).append("\n");
    sb.append("    proprietaryFormNumber: ").append(toIndentedString(proprietaryFormNumber)).append("\n");
    sb.append("    electronicFormat: ").append(toIndentedString(electronicFormat)).append("\n");
    sb.append("    submitDate: ").append(toIndentedString(submitDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localTaxForms");
    openapiFields.add("name");
    openapiFields.add("tin");
    openapiFields.add("foreignTaxId");
    openapiFields.add("tinOrExplanationRequired");
    openapiFields.add("explanation");
    openapiFields.add("referenceNumber");
    openapiFields.add("part29ACountry");
    openapiFields.add("cert");
    openapiFields.add("signatureType");
    openapiFields.add("blankForm");
    openapiFields.add("taxFormFile");
    openapiFields.add("proprietaryFormNumber");
    openapiFields.add("electronicFormat");
    openapiFields.add("submitDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormW8BEN
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormW8BEN.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormW8BEN is not found in the empty JSON string", FormW8BEN.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormW8BEN.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormW8BEN` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("localTaxForms") != null && !jsonObj.get("localTaxForms").isJsonNull()) {
        JsonArray jsonArraylocalTaxForms = jsonObj.getAsJsonArray("localTaxForms");
        if (jsonArraylocalTaxForms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localTaxForms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localTaxForms` to be an array in the JSON string but got `%s`", jsonObj.get("localTaxForms").toString()));
          }

          // validate the optional field `localTaxForms` (array)
          for (int i = 0; i < jsonArraylocalTaxForms.size(); i++) {
            LocalTaxForm.validateJsonElement(jsonArraylocalTaxForms.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tin") != null && !jsonObj.get("tin").isJsonNull()) && !jsonObj.get("tin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tin").toString()));
      }
      if ((jsonObj.get("foreignTaxId") != null && !jsonObj.get("foreignTaxId").isJsonNull()) && !jsonObj.get("foreignTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignTaxId").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      // validate the optional field `explanation`
      if (jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) {
        ExplanationEnum.validateJsonElement(jsonObj.get("explanation"));
      }
      if ((jsonObj.get("part29ACountry") != null && !jsonObj.get("part29ACountry").isJsonNull()) && !jsonObj.get("part29ACountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `part29ACountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("part29ACountry").toString()));
      }
      if ((jsonObj.get("signatureType") != null && !jsonObj.get("signatureType").isJsonNull()) && !jsonObj.get("signatureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureType").toString()));
      }
      // validate the optional field `signatureType`
      if (jsonObj.get("signatureType") != null && !jsonObj.get("signatureType").isJsonNull()) {
        SignatureTypeEnum.validateJsonElement(jsonObj.get("signatureType"));
      }
      if ((jsonObj.get("taxFormFile") != null && !jsonObj.get("taxFormFile").isJsonNull()) && !jsonObj.get("taxFormFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxFormFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxFormFile").toString()));
      }
      if ((jsonObj.get("submitDate") != null && !jsonObj.get("submitDate").isJsonNull()) && !jsonObj.get("submitDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormW8BEN.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormW8BEN' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormW8BEN> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormW8BEN.class));

       return (TypeAdapter<T>) new TypeAdapter<FormW8BEN>() {
           @Override
           public void write(JsonWriter out, FormW8BEN value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormW8BEN read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormW8BEN given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormW8BEN
   * @throws IOException if the JSON string is invalid with respect to FormW8BEN
   */
  public static FormW8BEN fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormW8BEN.class);
  }

  /**
   * Convert an instance of FormW8BEN to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

