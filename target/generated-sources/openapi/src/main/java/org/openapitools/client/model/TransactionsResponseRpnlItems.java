/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionsResponseRpnlItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class TransactionsResponseRpnlItems {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private String date;

  public static final String SERIALIZED_NAME_CUR = "cur";
  @SerializedName(SERIALIZED_NAME_CUR)
  @javax.annotation.Nullable
  private String cur;

  public static final String SERIALIZED_NAME_FX_RATE = "fxRate";
  @SerializedName(SERIALIZED_NAME_FX_RATE)
  @javax.annotation.Nullable
  private Integer fxRate;

  /**
   * Determines if the day was a loss or gain * &#x60;L&#x60; - LOSS * &#x60;G&#x60; - GAIN 
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    L("L"),
    
    G("G");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  @javax.annotation.Nullable
  private SideEnum side;

  public static final String SERIALIZED_NAME_ACCTID = "acctid";
  @SerializedName(SERIALIZED_NAME_ACCTID)
  @javax.annotation.Nullable
  private String acctid;

  public static final String SERIALIZED_NAME_AMT = "amt";
  @SerializedName(SERIALIZED_NAME_AMT)
  @javax.annotation.Nullable
  private String amt;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public TransactionsResponseRpnlItems() {
  }

  public TransactionsResponseRpnlItems date(@javax.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  /**
   * Specifies the date for the transaction.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable String date) {
    this.date = date;
  }


  public TransactionsResponseRpnlItems cur(@javax.annotation.Nullable String cur) {
    this.cur = cur;
    return this;
  }

  /**
   * Specifies the currency of the realized value.
   * @return cur
   */
  @javax.annotation.Nullable
  public String getCur() {
    return cur;
  }

  public void setCur(@javax.annotation.Nullable String cur) {
    this.cur = cur;
  }


  public TransactionsResponseRpnlItems fxRate(@javax.annotation.Nullable Integer fxRate) {
    this.fxRate = fxRate;
    return this;
  }

  /**
   * Returns the foreign exchnage rate.
   * @return fxRate
   */
  @javax.annotation.Nullable
  public Integer getFxRate() {
    return fxRate;
  }

  public void setFxRate(@javax.annotation.Nullable Integer fxRate) {
    this.fxRate = fxRate;
  }


  public TransactionsResponseRpnlItems side(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Determines if the day was a loss or gain * &#x60;L&#x60; - LOSS * &#x60;G&#x60; - GAIN 
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
  }


  public TransactionsResponseRpnlItems acctid(@javax.annotation.Nullable String acctid) {
    this.acctid = acctid;
    return this;
  }

  /**
   * Returns the account ID the trade transacted on.
   * @return acctid
   */
  @javax.annotation.Nullable
  public String getAcctid() {
    return acctid;
  }

  public void setAcctid(@javax.annotation.Nullable String acctid) {
    this.acctid = acctid;
  }


  public TransactionsResponseRpnlItems amt(@javax.annotation.Nullable String amt) {
    this.amt = amt;
    return this;
  }

  /**
   * Returns the amount gained or lost on the day.
   * @return amt
   */
  @javax.annotation.Nullable
  public String getAmt() {
    return amt;
  }

  public void setAmt(@javax.annotation.Nullable String amt) {
    this.amt = amt;
  }


  public TransactionsResponseRpnlItems conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Returns the contract ID of the transaction.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsResponseRpnlItems transactionsResponseRpnlItems = (TransactionsResponseRpnlItems) o;
    return Objects.equals(this.date, transactionsResponseRpnlItems.date) &&
        Objects.equals(this.cur, transactionsResponseRpnlItems.cur) &&
        Objects.equals(this.fxRate, transactionsResponseRpnlItems.fxRate) &&
        Objects.equals(this.side, transactionsResponseRpnlItems.side) &&
        Objects.equals(this.acctid, transactionsResponseRpnlItems.acctid) &&
        Objects.equals(this.amt, transactionsResponseRpnlItems.amt) &&
        Objects.equals(this.conid, transactionsResponseRpnlItems.conid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, cur, fxRate, side, acctid, amt, conid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsResponseRpnlItems {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    cur: ").append(toIndentedString(cur)).append("\n");
    sb.append("    fxRate: ").append(toIndentedString(fxRate)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    acctid: ").append(toIndentedString(acctid)).append("\n");
    sb.append("    amt: ").append(toIndentedString(amt)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("cur");
    openapiFields.add("fxRate");
    openapiFields.add("side");
    openapiFields.add("acctid");
    openapiFields.add("amt");
    openapiFields.add("conid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionsResponseRpnlItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionsResponseRpnlItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionsResponseRpnlItems is not found in the empty JSON string", TransactionsResponseRpnlItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionsResponseRpnlItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionsResponseRpnlItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("cur") != null && !jsonObj.get("cur").isJsonNull()) && !jsonObj.get("cur").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cur` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cur").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `side`
      if (jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("side"));
      }
      if ((jsonObj.get("acctid") != null && !jsonObj.get("acctid").isJsonNull()) && !jsonObj.get("acctid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctid").toString()));
      }
      if ((jsonObj.get("amt") != null && !jsonObj.get("amt").isJsonNull()) && !jsonObj.get("amt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amt").toString()));
      }
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionsResponseRpnlItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionsResponseRpnlItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionsResponseRpnlItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionsResponseRpnlItems.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionsResponseRpnlItems>() {
           @Override
           public void write(JsonWriter out, TransactionsResponseRpnlItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionsResponseRpnlItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionsResponseRpnlItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionsResponseRpnlItems
   * @throws IOException if the JSON string is invalid with respect to TransactionsResponseRpnlItems
   */
  public static TransactionsResponseRpnlItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionsResponseRpnlItems.class);
  }

  /**
   * Convert an instance of TransactionsResponseRpnlItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

