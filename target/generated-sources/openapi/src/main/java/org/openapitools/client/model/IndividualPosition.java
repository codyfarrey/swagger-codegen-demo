/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IndividualPositionDisplayRule;
import org.openapitools.client.model.IndividualPositionIncrementRulesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific account&#39;s position in the requested conid.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IndividualPosition {
  public static final String SERIALIZED_NAME_ACCT_ID = "acctId";
  @SerializedName(SERIALIZED_NAME_ACCT_ID)
  @javax.annotation.Nullable
  private String acctId;

  public static final String SERIALIZED_NAME_ALL_EXCHANGES = "allExchanges";
  @SerializedName(SERIALIZED_NAME_ALL_EXCHANGES)
  @javax.annotation.Nullable
  private String allExchanges;

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  @javax.annotation.Nullable
  private String assetClass;

  public static final String SERIALIZED_NAME_AVG_COST = "avgCost";
  @SerializedName(SERIALIZED_NAME_AVG_COST)
  @javax.annotation.Nullable
  private BigDecimal avgCost;

  public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";
  @SerializedName(SERIALIZED_NAME_AVG_PRICE)
  @javax.annotation.Nullable
  private BigDecimal avgPrice;

  public static final String SERIALIZED_NAME_BASE_AVG_COST = "baseAvgCost";
  @SerializedName(SERIALIZED_NAME_BASE_AVG_COST)
  @javax.annotation.Nullable
  private BigDecimal baseAvgCost;

  public static final String SERIALIZED_NAME_BASE_AVG_PRICE = "baseAvgPrice";
  @SerializedName(SERIALIZED_NAME_BASE_AVG_PRICE)
  @javax.annotation.Nullable
  private BigDecimal baseAvgPrice;

  public static final String SERIALIZED_NAME_BASE_MKT_PRICE = "baseMktPrice";
  @SerializedName(SERIALIZED_NAME_BASE_MKT_PRICE)
  @javax.annotation.Nullable
  private BigDecimal baseMktPrice;

  public static final String SERIALIZED_NAME_BASE_MKT_VALUE = "baseMktValue";
  @SerializedName(SERIALIZED_NAME_BASE_MKT_VALUE)
  @javax.annotation.Nullable
  private BigDecimal baseMktValue;

  public static final String SERIALIZED_NAME_BASE_REALIZED_PNL = "baseRealizedPnl";
  @SerializedName(SERIALIZED_NAME_BASE_REALIZED_PNL)
  @javax.annotation.Nullable
  private BigDecimal baseRealizedPnl;

  public static final String SERIALIZED_NAME_BASE_UNREALIZED_PNL = "baseUnrealizedPnl";
  @SerializedName(SERIALIZED_NAME_BASE_UNREALIZED_PNL)
  @javax.annotation.Nullable
  private BigDecimal baseUnrealizedPnl;

  public static final String SERIALIZED_NAME_CHINESE_NAME = "chineseName";
  @SerializedName(SERIALIZED_NAME_CHINESE_NAME)
  @javax.annotation.Nullable
  private String chineseName;

  public static final String SERIALIZED_NAME_CON_EXCH_MAP = "conExchMap";
  @SerializedName(SERIALIZED_NAME_CON_EXCH_MAP)
  @javax.annotation.Nullable
  private List<String> conExchMap = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private Integer conid;

  public static final String SERIALIZED_NAME_CONTRACT_DESC = "contractDesc";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESC)
  @javax.annotation.Nullable
  private String contractDesc;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  @javax.annotation.Nullable
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_DISPLAY_RULE = "displayRule";
  @SerializedName(SERIALIZED_NAME_DISPLAY_RULE)
  @javax.annotation.Nullable
  private IndividualPositionDisplayRule displayRule;

  public static final String SERIALIZED_NAME_EXCHS = "exchs";
  @SerializedName(SERIALIZED_NAME_EXCHS)
  @javax.annotation.Nullable
  private Object exchs;

  public static final String SERIALIZED_NAME_EXERCISE_STYLE = "exerciseStyle";
  @SerializedName(SERIALIZED_NAME_EXERCISE_STYLE)
  @javax.annotation.Nullable
  private String exerciseStyle;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  @javax.annotation.Nullable
  private String expiry;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  @javax.annotation.Nullable
  private String group;

  public static final String SERIALIZED_NAME_HAS_OPTIONS = "hasOptions";
  @SerializedName(SERIALIZED_NAME_HAS_OPTIONS)
  @javax.annotation.Nullable
  private Boolean hasOptions;

  public static final String SERIALIZED_NAME_INCREMENT_RULES = "incrementRules";
  @SerializedName(SERIALIZED_NAME_INCREMENT_RULES)
  @javax.annotation.Nullable
  private List<IndividualPositionIncrementRulesInner> incrementRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_EVENT_CONTRACT = "isEventContract";
  @SerializedName(SERIALIZED_NAME_IS_EVENT_CONTRACT)
  @javax.annotation.Nullable
  private Boolean isEventContract;

  public static final String SERIALIZED_NAME_IS_U_S = "isUS";
  @SerializedName(SERIALIZED_NAME_IS_U_S)
  @javax.annotation.Nullable
  private Boolean isUS;

  public static final String SERIALIZED_NAME_LAST_TRADING_DAY = "lastTradingDay";
  @SerializedName(SERIALIZED_NAME_LAST_TRADING_DAY)
  @javax.annotation.Nullable
  private String lastTradingDay;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_MKT_PRICE = "mktPrice";
  @SerializedName(SERIALIZED_NAME_MKT_PRICE)
  @javax.annotation.Nullable
  private BigDecimal mktPrice;

  public static final String SERIALIZED_NAME_MKT_VALUE = "mktValue";
  @SerializedName(SERIALIZED_NAME_MKT_VALUE)
  @javax.annotation.Nullable
  private BigDecimal mktValue;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  @javax.annotation.Nullable
  private String model;

  public static final String SERIALIZED_NAME_MULTIPLIER = "multiplier";
  @SerializedName(SERIALIZED_NAME_MULTIPLIER)
  @javax.annotation.Nullable
  private BigDecimal multiplier;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  @javax.annotation.Nullable
  private BigDecimal position;

  /**
   * The right of an options contract, if applicable.
   */
  @JsonAdapter(PutOrCallEnum.Adapter.class)
  public enum PutOrCallEnum {
    P("P"),
    
    C("C");

    private String value;

    PutOrCallEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PutOrCallEnum fromValue(String value) {
      for (PutOrCallEnum b : PutOrCallEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PutOrCallEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PutOrCallEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PutOrCallEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PutOrCallEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PutOrCallEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUT_OR_CALL = "putOrCall";
  @SerializedName(SERIALIZED_NAME_PUT_OR_CALL)
  @javax.annotation.Nullable
  private PutOrCallEnum putOrCall;

  public static final String SERIALIZED_NAME_REALIZED_PNL = "realizedPnl";
  @SerializedName(SERIALIZED_NAME_REALIZED_PNL)
  @javax.annotation.Nullable
  private BigDecimal realizedPnl;

  public static final String SERIALIZED_NAME_SECTOR = "sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  @javax.annotation.Nullable
  private String sector;

  public static final String SERIALIZED_NAME_SECTOR_GROUP = "sectorGroup";
  @SerializedName(SERIALIZED_NAME_SECTOR_GROUP)
  @javax.annotation.Nullable
  private String sectorGroup;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  @javax.annotation.Nullable
  private String strike;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  @javax.annotation.Nullable
  private String ticker;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private Integer time;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_UND_CONID = "undConid";
  @SerializedName(SERIALIZED_NAME_UND_CONID)
  @javax.annotation.Nullable
  private Integer undConid;

  public static final String SERIALIZED_NAME_UNREALIZED_PNL = "unrealizedPnl";
  @SerializedName(SERIALIZED_NAME_UNREALIZED_PNL)
  @javax.annotation.Nullable
  private BigDecimal unrealizedPnl;

  public IndividualPosition() {
  }

  public IndividualPosition acctId(@javax.annotation.Nullable String acctId) {
    this.acctId = acctId;
    return this;
  }

  /**
   * IB accountId of an account with a position in the requested conid.
   * @return acctId
   */
  @javax.annotation.Nullable
  public String getAcctId() {
    return acctId;
  }

  public void setAcctId(@javax.annotation.Nullable String acctId) {
    this.acctId = acctId;
  }


  public IndividualPosition allExchanges(@javax.annotation.Nullable String allExchanges) {
    this.allExchanges = allExchanges;
    return this;
  }

  /**
   * Comma separated all exchanges on which the instrument trades.
   * @return allExchanges
   */
  @javax.annotation.Nullable
  public String getAllExchanges() {
    return allExchanges;
  }

  public void setAllExchanges(@javax.annotation.Nullable String allExchanges) {
    this.allExchanges = allExchanges;
  }


  public IndividualPosition assetClass(@javax.annotation.Nullable String assetClass) {
    this.assetClass = assetClass;
    return this;
  }

  /**
   * Asset class of the requested instrument.
   * @return assetClass
   */
  @javax.annotation.Nullable
  public String getAssetClass() {
    return assetClass;
  }

  public void setAssetClass(@javax.annotation.Nullable String assetClass) {
    this.assetClass = assetClass;
  }


  public IndividualPosition avgCost(@javax.annotation.Nullable BigDecimal avgCost) {
    this.avgCost = avgCost;
    return this;
  }

  /**
   * The account&#39;s average cost for its position.
   * @return avgCost
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgCost() {
    return avgCost;
  }

  public void setAvgCost(@javax.annotation.Nullable BigDecimal avgCost) {
    this.avgCost = avgCost;
  }


  public IndividualPosition avgPrice(@javax.annotation.Nullable BigDecimal avgPrice) {
    this.avgPrice = avgPrice;
    return this;
  }

  /**
   * The account&#39;s average price for its position.
   * @return avgPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgPrice() {
    return avgPrice;
  }

  public void setAvgPrice(@javax.annotation.Nullable BigDecimal avgPrice) {
    this.avgPrice = avgPrice;
  }


  public IndividualPosition baseAvgCost(@javax.annotation.Nullable BigDecimal baseAvgCost) {
    this.baseAvgCost = baseAvgCost;
    return this;
  }

  /**
   * Average cost in the account&#39;s base currency.
   * @return baseAvgCost
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseAvgCost() {
    return baseAvgCost;
  }

  public void setBaseAvgCost(@javax.annotation.Nullable BigDecimal baseAvgCost) {
    this.baseAvgCost = baseAvgCost;
  }


  public IndividualPosition baseAvgPrice(@javax.annotation.Nullable BigDecimal baseAvgPrice) {
    this.baseAvgPrice = baseAvgPrice;
    return this;
  }

  /**
   * Average price in the account&#39;s base currency.
   * @return baseAvgPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseAvgPrice() {
    return baseAvgPrice;
  }

  public void setBaseAvgPrice(@javax.annotation.Nullable BigDecimal baseAvgPrice) {
    this.baseAvgPrice = baseAvgPrice;
  }


  public IndividualPosition baseMktPrice(@javax.annotation.Nullable BigDecimal baseMktPrice) {
    this.baseMktPrice = baseMktPrice;
    return this;
  }

  /**
   * Market price of instrument in the account&#39;s base currency.
   * @return baseMktPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseMktPrice() {
    return baseMktPrice;
  }

  public void setBaseMktPrice(@javax.annotation.Nullable BigDecimal baseMktPrice) {
    this.baseMktPrice = baseMktPrice;
  }


  public IndividualPosition baseMktValue(@javax.annotation.Nullable BigDecimal baseMktValue) {
    this.baseMktValue = baseMktValue;
    return this;
  }

  /**
   * Market value of the position in the account&#39;s base currency.
   * @return baseMktValue
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseMktValue() {
    return baseMktValue;
  }

  public void setBaseMktValue(@javax.annotation.Nullable BigDecimal baseMktValue) {
    this.baseMktValue = baseMktValue;
  }


  public IndividualPosition baseRealizedPnl(@javax.annotation.Nullable BigDecimal baseRealizedPnl) {
    this.baseRealizedPnl = baseRealizedPnl;
    return this;
  }

  /**
   * Realized PnL for the instrument in the account&#39;s base currency.
   * @return baseRealizedPnl
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseRealizedPnl() {
    return baseRealizedPnl;
  }

  public void setBaseRealizedPnl(@javax.annotation.Nullable BigDecimal baseRealizedPnl) {
    this.baseRealizedPnl = baseRealizedPnl;
  }


  public IndividualPosition baseUnrealizedPnl(@javax.annotation.Nullable BigDecimal baseUnrealizedPnl) {
    this.baseUnrealizedPnl = baseUnrealizedPnl;
    return this;
  }

  /**
   * Unrealized PnL for the instrument in the account&#39;s base currency.
   * @return baseUnrealizedPnl
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseUnrealizedPnl() {
    return baseUnrealizedPnl;
  }

  public void setBaseUnrealizedPnl(@javax.annotation.Nullable BigDecimal baseUnrealizedPnl) {
    this.baseUnrealizedPnl = baseUnrealizedPnl;
  }


  public IndividualPosition chineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
    return this;
  }

  /**
   * Chinese name of the instrument.
   * @return chineseName
   */
  @javax.annotation.Nullable
  public String getChineseName() {
    return chineseName;
  }

  public void setChineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
  }


  public IndividualPosition conExchMap(@javax.annotation.Nullable List<String> conExchMap) {
    this.conExchMap = conExchMap;
    return this;
  }

  public IndividualPosition addConExchMapItem(String conExchMapItem) {
    if (this.conExchMap == null) {
      this.conExchMap = new ArrayList<>();
    }
    this.conExchMap.add(conExchMapItem);
    return this;
  }

  /**
   * Get conExchMap
   * @return conExchMap
   */
  @javax.annotation.Nullable
  public List<String> getConExchMap() {
    return conExchMap;
  }

  public void setConExchMap(@javax.annotation.Nullable List<String> conExchMap) {
    this.conExchMap = conExchMap;
  }


  public IndividualPosition conid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
    return this;
  }

  /**
   * IB contract ID for the instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public Integer getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable Integer conid) {
    this.conid = conid;
  }


  public IndividualPosition contractDesc(@javax.annotation.Nullable String contractDesc) {
    this.contractDesc = contractDesc;
    return this;
  }

  /**
   * Human-readable description of the instrument.
   * @return contractDesc
   */
  @javax.annotation.Nullable
  public String getContractDesc() {
    return contractDesc;
  }

  public void setContractDesc(@javax.annotation.Nullable String contractDesc) {
    this.contractDesc = contractDesc;
  }


  public IndividualPosition countryCode(@javax.annotation.Nullable String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country in which the instrument is issued.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(@javax.annotation.Nullable String countryCode) {
    this.countryCode = countryCode;
  }


  public IndividualPosition currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency in which the instrument trades.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public IndividualPosition displayRule(@javax.annotation.Nullable IndividualPositionDisplayRule displayRule) {
    this.displayRule = displayRule;
    return this;
  }

  /**
   * Get displayRule
   * @return displayRule
   */
  @javax.annotation.Nullable
  public IndividualPositionDisplayRule getDisplayRule() {
    return displayRule;
  }

  public void setDisplayRule(@javax.annotation.Nullable IndividualPositionDisplayRule displayRule) {
    this.displayRule = displayRule;
  }


  public IndividualPosition exchs(@javax.annotation.Nullable Object exchs) {
    this.exchs = exchs;
    return this;
  }

  /**
   * Get exchs
   * @return exchs
   */
  @javax.annotation.Nullable
  public Object getExchs() {
    return exchs;
  }

  public void setExchs(@javax.annotation.Nullable Object exchs) {
    this.exchs = exchs;
  }


  public IndividualPosition exerciseStyle(@javax.annotation.Nullable String exerciseStyle) {
    this.exerciseStyle = exerciseStyle;
    return this;
  }

  /**
   * Style of exercise for options.
   * @return exerciseStyle
   */
  @javax.annotation.Nullable
  public String getExerciseStyle() {
    return exerciseStyle;
  }

  public void setExerciseStyle(@javax.annotation.Nullable String exerciseStyle) {
    this.exerciseStyle = exerciseStyle;
  }


  public IndividualPosition expiry(@javax.annotation.Nullable String expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Expiration of instrument, if applicable.
   * @return expiry
   */
  @javax.annotation.Nullable
  public String getExpiry() {
    return expiry;
  }

  public void setExpiry(@javax.annotation.Nullable String expiry) {
    this.expiry = expiry;
  }


  public IndividualPosition fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full display name of the instrument.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public IndividualPosition group(@javax.annotation.Nullable String group) {
    this.group = group;
    return this;
  }

  /**
   * Industry sub-categorization of the instrument.
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(@javax.annotation.Nullable String group) {
    this.group = group;
  }


  public IndividualPosition hasOptions(@javax.annotation.Nullable Boolean hasOptions) {
    this.hasOptions = hasOptions;
    return this;
  }

  /**
   * Indicates whether instrument has options contracts available for trading at IB.
   * @return hasOptions
   */
  @javax.annotation.Nullable
  public Boolean getHasOptions() {
    return hasOptions;
  }

  public void setHasOptions(@javax.annotation.Nullable Boolean hasOptions) {
    this.hasOptions = hasOptions;
  }


  public IndividualPosition incrementRules(@javax.annotation.Nullable List<IndividualPositionIncrementRulesInner> incrementRules) {
    this.incrementRules = incrementRules;
    return this;
  }

  public IndividualPosition addIncrementRulesItem(IndividualPositionIncrementRulesInner incrementRulesItem) {
    if (this.incrementRules == null) {
      this.incrementRules = new ArrayList<>();
    }
    this.incrementRules.add(incrementRulesItem);
    return this;
  }

  /**
   * Array containing increment rules used when pricing orders for the instrument.
   * @return incrementRules
   */
  @javax.annotation.Nullable
  public List<IndividualPositionIncrementRulesInner> getIncrementRules() {
    return incrementRules;
  }

  public void setIncrementRules(@javax.annotation.Nullable List<IndividualPositionIncrementRulesInner> incrementRules) {
    this.incrementRules = incrementRules;
  }


  public IndividualPosition isEventContract(@javax.annotation.Nullable Boolean isEventContract) {
    this.isEventContract = isEventContract;
    return this;
  }

  /**
   * Indicates whether the instrument is an Event Contract.
   * @return isEventContract
   */
  @javax.annotation.Nullable
  public Boolean getIsEventContract() {
    return isEventContract;
  }

  public void setIsEventContract(@javax.annotation.Nullable Boolean isEventContract) {
    this.isEventContract = isEventContract;
  }


  public IndividualPosition isUS(@javax.annotation.Nullable Boolean isUS) {
    this.isUS = isUS;
    return this;
  }

  /**
   * Indicates whether the instrument is issued in the US.
   * @return isUS
   */
  @javax.annotation.Nullable
  public Boolean getIsUS() {
    return isUS;
  }

  public void setIsUS(@javax.annotation.Nullable Boolean isUS) {
    this.isUS = isUS;
  }


  public IndividualPosition lastTradingDay(@javax.annotation.Nullable String lastTradingDay) {
    this.lastTradingDay = lastTradingDay;
    return this;
  }

  /**
   * Last day of trading in the instrument, if applicable. Formatted &#x60;YYYYMMDD&#x60;.
   * @return lastTradingDay
   */
  @javax.annotation.Nullable
  public String getLastTradingDay() {
    return lastTradingDay;
  }

  public void setLastTradingDay(@javax.annotation.Nullable String lastTradingDay) {
    this.lastTradingDay = lastTradingDay;
  }


  public IndividualPosition listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * The exchange on which the instrument is listed, or the primary exchange recognized by IB for the instrument.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public IndividualPosition mktPrice(@javax.annotation.Nullable BigDecimal mktPrice) {
    this.mktPrice = mktPrice;
    return this;
  }

  /**
   * Current market price of the instrument, in the instrument&#39;s currency.
   * @return mktPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getMktPrice() {
    return mktPrice;
  }

  public void setMktPrice(@javax.annotation.Nullable BigDecimal mktPrice) {
    this.mktPrice = mktPrice;
  }


  public IndividualPosition mktValue(@javax.annotation.Nullable BigDecimal mktValue) {
    this.mktValue = mktValue;
    return this;
  }

  /**
   * Current market value of the account&#39;s position in the instrument, in the instrument&#39;s currency.
   * @return mktValue
   */
  @javax.annotation.Nullable
  public BigDecimal getMktValue() {
    return mktValue;
  }

  public void setMktValue(@javax.annotation.Nullable BigDecimal mktValue) {
    this.mktValue = mktValue;
  }


  public IndividualPosition model(@javax.annotation.Nullable String model) {
    this.model = model;
    return this;
  }

  /**
   * Name of the model portfolio in which the account is invested that contributes this position.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(@javax.annotation.Nullable String model) {
    this.model = model;
  }


  public IndividualPosition multiplier(@javax.annotation.Nullable BigDecimal multiplier) {
    this.multiplier = multiplier;
    return this;
  }

  /**
   * Instrument&#39;s multiplier, if applicable.
   * @return multiplier
   */
  @javax.annotation.Nullable
  public BigDecimal getMultiplier() {
    return multiplier;
  }

  public void setMultiplier(@javax.annotation.Nullable BigDecimal multiplier) {
    this.multiplier = multiplier;
  }


  public IndividualPosition name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Formal name of the entity or asset to which the instrument relates.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public IndividualPosition pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Maximum number of accounts that can be returned in a single request.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public IndividualPosition position(@javax.annotation.Nullable BigDecimal position) {
    this.position = position;
    return this;
  }

  /**
   * Size of position in units of instrument.
   * @return position
   */
  @javax.annotation.Nullable
  public BigDecimal getPosition() {
    return position;
  }

  public void setPosition(@javax.annotation.Nullable BigDecimal position) {
    this.position = position;
  }


  public IndividualPosition putOrCall(@javax.annotation.Nullable PutOrCallEnum putOrCall) {
    this.putOrCall = putOrCall;
    return this;
  }

  /**
   * The right of an options contract, if applicable.
   * @return putOrCall
   */
  @javax.annotation.Nullable
  public PutOrCallEnum getPutOrCall() {
    return putOrCall;
  }

  public void setPutOrCall(@javax.annotation.Nullable PutOrCallEnum putOrCall) {
    this.putOrCall = putOrCall;
  }


  public IndividualPosition realizedPnl(@javax.annotation.Nullable BigDecimal realizedPnl) {
    this.realizedPnl = realizedPnl;
    return this;
  }

  /**
   * Realized PnL for the instrument in the instrument&#39;s currency.
   * @return realizedPnl
   */
  @javax.annotation.Nullable
  public BigDecimal getRealizedPnl() {
    return realizedPnl;
  }

  public void setRealizedPnl(@javax.annotation.Nullable BigDecimal realizedPnl) {
    this.realizedPnl = realizedPnl;
  }


  public IndividualPosition sector(@javax.annotation.Nullable String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * Industry sector categorization of the instrument.
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }

  public void setSector(@javax.annotation.Nullable String sector) {
    this.sector = sector;
  }


  public IndividualPosition sectorGroup(@javax.annotation.Nullable String sectorGroup) {
    this.sectorGroup = sectorGroup;
    return this;
  }

  /**
   * Industry sub-categorization of the instrument.
   * @return sectorGroup
   */
  @javax.annotation.Nullable
  public String getSectorGroup() {
    return sectorGroup;
  }

  public void setSectorGroup(@javax.annotation.Nullable String sectorGroup) {
    this.sectorGroup = sectorGroup;
  }


  public IndividualPosition strike(@javax.annotation.Nullable String strike) {
    this.strike = strike;
    return this;
  }

  /**
   * Strike price, if applicable. Returned as string.
   * @return strike
   */
  @javax.annotation.Nullable
  public String getStrike() {
    return strike;
  }

  public void setStrike(@javax.annotation.Nullable String strike) {
    this.strike = strike;
  }


  public IndividualPosition ticker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Symbol associated with the instrument.
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
  }


  public IndividualPosition time(@javax.annotation.Nullable Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Time taken to retrieve position data in milliseconds.
   * @return time
   */
  @javax.annotation.Nullable
  public Integer getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable Integer time) {
    this.time = time;
  }


  public IndividualPosition type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Description of instrument, used to differentiate classes, if applicable.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public IndividualPosition undConid(@javax.annotation.Nullable Integer undConid) {
    this.undConid = undConid;
    return this;
  }

  /**
   * Contract ID of underlying instrument, if applicable.
   * @return undConid
   */
  @javax.annotation.Nullable
  public Integer getUndConid() {
    return undConid;
  }

  public void setUndConid(@javax.annotation.Nullable Integer undConid) {
    this.undConid = undConid;
  }


  public IndividualPosition unrealizedPnl(@javax.annotation.Nullable BigDecimal unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
    return this;
  }

  /**
   * Unrealized PnL for the instrument in the account.
   * @return unrealizedPnl
   */
  @javax.annotation.Nullable
  public BigDecimal getUnrealizedPnl() {
    return unrealizedPnl;
  }

  public void setUnrealizedPnl(@javax.annotation.Nullable BigDecimal unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualPosition individualPosition = (IndividualPosition) o;
    return Objects.equals(this.acctId, individualPosition.acctId) &&
        Objects.equals(this.allExchanges, individualPosition.allExchanges) &&
        Objects.equals(this.assetClass, individualPosition.assetClass) &&
        Objects.equals(this.avgCost, individualPosition.avgCost) &&
        Objects.equals(this.avgPrice, individualPosition.avgPrice) &&
        Objects.equals(this.baseAvgCost, individualPosition.baseAvgCost) &&
        Objects.equals(this.baseAvgPrice, individualPosition.baseAvgPrice) &&
        Objects.equals(this.baseMktPrice, individualPosition.baseMktPrice) &&
        Objects.equals(this.baseMktValue, individualPosition.baseMktValue) &&
        Objects.equals(this.baseRealizedPnl, individualPosition.baseRealizedPnl) &&
        Objects.equals(this.baseUnrealizedPnl, individualPosition.baseUnrealizedPnl) &&
        Objects.equals(this.chineseName, individualPosition.chineseName) &&
        Objects.equals(this.conExchMap, individualPosition.conExchMap) &&
        Objects.equals(this.conid, individualPosition.conid) &&
        Objects.equals(this.contractDesc, individualPosition.contractDesc) &&
        Objects.equals(this.countryCode, individualPosition.countryCode) &&
        Objects.equals(this.currency, individualPosition.currency) &&
        Objects.equals(this.displayRule, individualPosition.displayRule) &&
        Objects.equals(this.exchs, individualPosition.exchs) &&
        Objects.equals(this.exerciseStyle, individualPosition.exerciseStyle) &&
        Objects.equals(this.expiry, individualPosition.expiry) &&
        Objects.equals(this.fullName, individualPosition.fullName) &&
        Objects.equals(this.group, individualPosition.group) &&
        Objects.equals(this.hasOptions, individualPosition.hasOptions) &&
        Objects.equals(this.incrementRules, individualPosition.incrementRules) &&
        Objects.equals(this.isEventContract, individualPosition.isEventContract) &&
        Objects.equals(this.isUS, individualPosition.isUS) &&
        Objects.equals(this.lastTradingDay, individualPosition.lastTradingDay) &&
        Objects.equals(this.listingExchange, individualPosition.listingExchange) &&
        Objects.equals(this.mktPrice, individualPosition.mktPrice) &&
        Objects.equals(this.mktValue, individualPosition.mktValue) &&
        Objects.equals(this.model, individualPosition.model) &&
        Objects.equals(this.multiplier, individualPosition.multiplier) &&
        Objects.equals(this.name, individualPosition.name) &&
        Objects.equals(this.pageSize, individualPosition.pageSize) &&
        Objects.equals(this.position, individualPosition.position) &&
        Objects.equals(this.putOrCall, individualPosition.putOrCall) &&
        Objects.equals(this.realizedPnl, individualPosition.realizedPnl) &&
        Objects.equals(this.sector, individualPosition.sector) &&
        Objects.equals(this.sectorGroup, individualPosition.sectorGroup) &&
        Objects.equals(this.strike, individualPosition.strike) &&
        Objects.equals(this.ticker, individualPosition.ticker) &&
        Objects.equals(this.time, individualPosition.time) &&
        Objects.equals(this.type, individualPosition.type) &&
        Objects.equals(this.undConid, individualPosition.undConid) &&
        Objects.equals(this.unrealizedPnl, individualPosition.unrealizedPnl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctId, allExchanges, assetClass, avgCost, avgPrice, baseAvgCost, baseAvgPrice, baseMktPrice, baseMktValue, baseRealizedPnl, baseUnrealizedPnl, chineseName, conExchMap, conid, contractDesc, countryCode, currency, displayRule, exchs, exerciseStyle, expiry, fullName, group, hasOptions, incrementRules, isEventContract, isUS, lastTradingDay, listingExchange, mktPrice, mktValue, model, multiplier, name, pageSize, position, putOrCall, realizedPnl, sector, sectorGroup, strike, ticker, time, type, undConid, unrealizedPnl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualPosition {\n");
    sb.append("    acctId: ").append(toIndentedString(acctId)).append("\n");
    sb.append("    allExchanges: ").append(toIndentedString(allExchanges)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    avgCost: ").append(toIndentedString(avgCost)).append("\n");
    sb.append("    avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
    sb.append("    baseAvgCost: ").append(toIndentedString(baseAvgCost)).append("\n");
    sb.append("    baseAvgPrice: ").append(toIndentedString(baseAvgPrice)).append("\n");
    sb.append("    baseMktPrice: ").append(toIndentedString(baseMktPrice)).append("\n");
    sb.append("    baseMktValue: ").append(toIndentedString(baseMktValue)).append("\n");
    sb.append("    baseRealizedPnl: ").append(toIndentedString(baseRealizedPnl)).append("\n");
    sb.append("    baseUnrealizedPnl: ").append(toIndentedString(baseUnrealizedPnl)).append("\n");
    sb.append("    chineseName: ").append(toIndentedString(chineseName)).append("\n");
    sb.append("    conExchMap: ").append(toIndentedString(conExchMap)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    contractDesc: ").append(toIndentedString(contractDesc)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    displayRule: ").append(toIndentedString(displayRule)).append("\n");
    sb.append("    exchs: ").append(toIndentedString(exchs)).append("\n");
    sb.append("    exerciseStyle: ").append(toIndentedString(exerciseStyle)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    hasOptions: ").append(toIndentedString(hasOptions)).append("\n");
    sb.append("    incrementRules: ").append(toIndentedString(incrementRules)).append("\n");
    sb.append("    isEventContract: ").append(toIndentedString(isEventContract)).append("\n");
    sb.append("    isUS: ").append(toIndentedString(isUS)).append("\n");
    sb.append("    lastTradingDay: ").append(toIndentedString(lastTradingDay)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    mktPrice: ").append(toIndentedString(mktPrice)).append("\n");
    sb.append("    mktValue: ").append(toIndentedString(mktValue)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    multiplier: ").append(toIndentedString(multiplier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    putOrCall: ").append(toIndentedString(putOrCall)).append("\n");
    sb.append("    realizedPnl: ").append(toIndentedString(realizedPnl)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    sectorGroup: ").append(toIndentedString(sectorGroup)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    undConid: ").append(toIndentedString(undConid)).append("\n");
    sb.append("    unrealizedPnl: ").append(toIndentedString(unrealizedPnl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctId");
    openapiFields.add("allExchanges");
    openapiFields.add("assetClass");
    openapiFields.add("avgCost");
    openapiFields.add("avgPrice");
    openapiFields.add("baseAvgCost");
    openapiFields.add("baseAvgPrice");
    openapiFields.add("baseMktPrice");
    openapiFields.add("baseMktValue");
    openapiFields.add("baseRealizedPnl");
    openapiFields.add("baseUnrealizedPnl");
    openapiFields.add("chineseName");
    openapiFields.add("conExchMap");
    openapiFields.add("conid");
    openapiFields.add("contractDesc");
    openapiFields.add("countryCode");
    openapiFields.add("currency");
    openapiFields.add("displayRule");
    openapiFields.add("exchs");
    openapiFields.add("exerciseStyle");
    openapiFields.add("expiry");
    openapiFields.add("fullName");
    openapiFields.add("group");
    openapiFields.add("hasOptions");
    openapiFields.add("incrementRules");
    openapiFields.add("isEventContract");
    openapiFields.add("isUS");
    openapiFields.add("lastTradingDay");
    openapiFields.add("listingExchange");
    openapiFields.add("mktPrice");
    openapiFields.add("mktValue");
    openapiFields.add("model");
    openapiFields.add("multiplier");
    openapiFields.add("name");
    openapiFields.add("pageSize");
    openapiFields.add("position");
    openapiFields.add("putOrCall");
    openapiFields.add("realizedPnl");
    openapiFields.add("sector");
    openapiFields.add("sectorGroup");
    openapiFields.add("strike");
    openapiFields.add("ticker");
    openapiFields.add("time");
    openapiFields.add("type");
    openapiFields.add("undConid");
    openapiFields.add("unrealizedPnl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndividualPosition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndividualPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndividualPosition is not found in the empty JSON string", IndividualPosition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndividualPosition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndividualPosition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acctId") != null && !jsonObj.get("acctId").isJsonNull()) && !jsonObj.get("acctId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctId").toString()));
      }
      if ((jsonObj.get("allExchanges") != null && !jsonObj.get("allExchanges").isJsonNull()) && !jsonObj.get("allExchanges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allExchanges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allExchanges").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      if ((jsonObj.get("chineseName") != null && !jsonObj.get("chineseName").isJsonNull()) && !jsonObj.get("chineseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chineseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chineseName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conExchMap") != null && !jsonObj.get("conExchMap").isJsonNull() && !jsonObj.get("conExchMap").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conExchMap` to be an array in the JSON string but got `%s`", jsonObj.get("conExchMap").toString()));
      }
      if ((jsonObj.get("contractDesc") != null && !jsonObj.get("contractDesc").isJsonNull()) && !jsonObj.get("contractDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractDesc").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `displayRule`
      if (jsonObj.get("displayRule") != null && !jsonObj.get("displayRule").isJsonNull()) {
        IndividualPositionDisplayRule.validateJsonElement(jsonObj.get("displayRule"));
      }
      if ((jsonObj.get("exerciseStyle") != null && !jsonObj.get("exerciseStyle").isJsonNull()) && !jsonObj.get("exerciseStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exerciseStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exerciseStyle").toString()));
      }
      if ((jsonObj.get("expiry") != null && !jsonObj.get("expiry").isJsonNull()) && !jsonObj.get("expiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (jsonObj.get("incrementRules") != null && !jsonObj.get("incrementRules").isJsonNull()) {
        JsonArray jsonArrayincrementRules = jsonObj.getAsJsonArray("incrementRules");
        if (jsonArrayincrementRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("incrementRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `incrementRules` to be an array in the JSON string but got `%s`", jsonObj.get("incrementRules").toString()));
          }

          // validate the optional field `incrementRules` (array)
          for (int i = 0; i < jsonArrayincrementRules.size(); i++) {
            IndividualPositionIncrementRulesInner.validateJsonElement(jsonArrayincrementRules.get(i));
          };
        }
      }
      if ((jsonObj.get("lastTradingDay") != null && !jsonObj.get("lastTradingDay").isJsonNull()) && !jsonObj.get("lastTradingDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTradingDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTradingDay").toString()));
      }
      if ((jsonObj.get("listingExchange") != null && !jsonObj.get("listingExchange").isJsonNull()) && !jsonObj.get("listingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingExchange").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("putOrCall") != null && !jsonObj.get("putOrCall").isJsonNull()) && !jsonObj.get("putOrCall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `putOrCall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("putOrCall").toString()));
      }
      // validate the optional field `putOrCall`
      if (jsonObj.get("putOrCall") != null && !jsonObj.get("putOrCall").isJsonNull()) {
        PutOrCallEnum.validateJsonElement(jsonObj.get("putOrCall"));
      }
      if ((jsonObj.get("sector") != null && !jsonObj.get("sector").isJsonNull()) && !jsonObj.get("sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sector").toString()));
      }
      if ((jsonObj.get("sectorGroup") != null && !jsonObj.get("sectorGroup").isJsonNull()) && !jsonObj.get("sectorGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectorGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectorGroup").toString()));
      }
      if ((jsonObj.get("strike") != null && !jsonObj.get("strike").isJsonNull()) && !jsonObj.get("strike").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strike` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strike").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndividualPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndividualPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndividualPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndividualPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<IndividualPosition>() {
           @Override
           public void write(JsonWriter out, IndividualPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndividualPosition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndividualPosition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndividualPosition
   * @throws IOException if the JSON string is invalid with respect to IndividualPosition
   */
  public static IndividualPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndividualPosition.class);
  }

  /**
   * Convert an instance of IndividualPosition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

