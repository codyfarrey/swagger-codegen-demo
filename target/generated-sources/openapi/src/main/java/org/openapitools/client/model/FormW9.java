/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalTaxForm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormW9
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class FormW9 {
  public static final String SERIALIZED_NAME_LOCAL_TAX_FORMS = "localTaxForms";
  @SerializedName(SERIALIZED_NAME_LOCAL_TAX_FORMS)
  @javax.annotation.Nullable
  private List<LocalTaxForm> localTaxForms = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_BUSINESS_NAME = "businessName";
  @SerializedName(SERIALIZED_NAME_BUSINESS_NAME)
  @javax.annotation.Nullable
  private String businessName;

  /**
   * Gets or Sets customerType
   */
  @JsonAdapter(CustomerTypeEnum.Adapter.class)
  public enum CustomerTypeEnum {
    INDIVIDUAL("Individual"),
    
    CORPORATION("Corporation"),
    
    PARTNERSHIP("Partnership"),
    
    LLC("LLC"),
    
    OTHER("Other");

    private String value;

    CustomerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerTypeEnum fromValue(String value) {
      for (CustomerTypeEnum b : CustomerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_TYPE = "customerType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPE)
  @javax.annotation.Nullable
  private CustomerTypeEnum customerType;

  public static final String SERIALIZED_NAME_TAX_CLASSIFICATION = "taxClassification";
  @SerializedName(SERIALIZED_NAME_TAX_CLASSIFICATION)
  @javax.annotation.Nullable
  private String taxClassification;

  public static final String SERIALIZED_NAME_OTHER_CUSTOMER_TYPE = "otherCustomerType";
  @SerializedName(SERIALIZED_NAME_OTHER_CUSTOMER_TYPE)
  @javax.annotation.Nullable
  private String otherCustomerType;

  public static final String SERIALIZED_NAME_TIN = "tin";
  @SerializedName(SERIALIZED_NAME_TIN)
  @javax.annotation.Nullable
  private String tin;

  /**
   * Gets or Sets tinType
   */
  @JsonAdapter(TinTypeEnum.Adapter.class)
  public enum TinTypeEnum {
    SSN("SSN"),
    
    EIN("EIN"),
    
    NON_US_NATIONAL_ID("NonUS_NationalId");

    private String value;

    TinTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TinTypeEnum fromValue(String value) {
      for (TinTypeEnum b : TinTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TinTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TinTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TinTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TinTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TinTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIN_TYPE = "tinType";
  @SerializedName(SERIALIZED_NAME_TIN_TYPE)
  @javax.annotation.Nullable
  private TinTypeEnum tinType;

  public static final String SERIALIZED_NAME_CERT1 = "cert1";
  @SerializedName(SERIALIZED_NAME_CERT1)
  @javax.annotation.Nullable
  private Boolean cert1;

  public static final String SERIALIZED_NAME_CERT2 = "cert2";
  @SerializedName(SERIALIZED_NAME_CERT2)
  @javax.annotation.Nullable
  private Boolean cert2;

  public static final String SERIALIZED_NAME_CERT3 = "cert3";
  @SerializedName(SERIALIZED_NAME_CERT3)
  @javax.annotation.Nullable
  private Boolean cert3;

  public static final String SERIALIZED_NAME_CERT4 = "cert4";
  @SerializedName(SERIALIZED_NAME_CERT4)
  @javax.annotation.Nullable
  private Boolean cert4;

  /**
   * Gets or Sets signatureType
   */
  @JsonAdapter(SignatureTypeEnum.Adapter.class)
  public enum SignatureTypeEnum {
    ELECTRONIC("Electronic"),
    
    PHYSICAL("Physical");

    private String value;

    SignatureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureTypeEnum fromValue(String value) {
      for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignatureTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_TYPE = "signatureType";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_TYPE)
  @javax.annotation.Nullable
  private SignatureTypeEnum signatureType;

  public static final String SERIALIZED_NAME_BLANK_FORM = "blankForm";
  @SerializedName(SERIALIZED_NAME_BLANK_FORM)
  @javax.annotation.Nullable
  private Boolean blankForm;

  public static final String SERIALIZED_NAME_TAX_FORM_FILE = "taxFormFile";
  @SerializedName(SERIALIZED_NAME_TAX_FORM_FILE)
  @javax.annotation.Nullable
  private String taxFormFile;

  public static final String SERIALIZED_NAME_PROPRIETARY_FORM_NUMBER = "proprietaryFormNumber";
  @SerializedName(SERIALIZED_NAME_PROPRIETARY_FORM_NUMBER)
  @javax.annotation.Nullable
  private Integer proprietaryFormNumber;

  public FormW9() {
  }

  public FormW9 localTaxForms(@javax.annotation.Nullable List<LocalTaxForm> localTaxForms) {
    this.localTaxForms = localTaxForms;
    return this;
  }

  public FormW9 addLocalTaxFormsItem(LocalTaxForm localTaxFormsItem) {
    if (this.localTaxForms == null) {
      this.localTaxForms = new ArrayList<>();
    }
    this.localTaxForms.add(localTaxFormsItem);
    return this;
  }

  /**
   * Get localTaxForms
   * @return localTaxForms
   */
  @javax.annotation.Nullable
  public List<LocalTaxForm> getLocalTaxForms() {
    return localTaxForms;
  }

  public void setLocalTaxForms(@javax.annotation.Nullable List<LocalTaxForm> localTaxForms) {
    this.localTaxForms = localTaxForms;
  }


  public FormW9 name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public FormW9 businessName(@javax.annotation.Nullable String businessName) {
    this.businessName = businessName;
    return this;
  }

  /**
   * Get businessName
   * @return businessName
   */
  @javax.annotation.Nullable
  public String getBusinessName() {
    return businessName;
  }

  public void setBusinessName(@javax.annotation.Nullable String businessName) {
    this.businessName = businessName;
  }


  public FormW9 customerType(@javax.annotation.Nullable CustomerTypeEnum customerType) {
    this.customerType = customerType;
    return this;
  }

  /**
   * Get customerType
   * @return customerType
   */
  @javax.annotation.Nullable
  public CustomerTypeEnum getCustomerType() {
    return customerType;
  }

  public void setCustomerType(@javax.annotation.Nullable CustomerTypeEnum customerType) {
    this.customerType = customerType;
  }


  public FormW9 taxClassification(@javax.annotation.Nullable String taxClassification) {
    this.taxClassification = taxClassification;
    return this;
  }

  /**
   * Get taxClassification
   * @return taxClassification
   */
  @javax.annotation.Nullable
  public String getTaxClassification() {
    return taxClassification;
  }

  public void setTaxClassification(@javax.annotation.Nullable String taxClassification) {
    this.taxClassification = taxClassification;
  }


  public FormW9 otherCustomerType(@javax.annotation.Nullable String otherCustomerType) {
    this.otherCustomerType = otherCustomerType;
    return this;
  }

  /**
   * Get otherCustomerType
   * @return otherCustomerType
   */
  @javax.annotation.Nullable
  public String getOtherCustomerType() {
    return otherCustomerType;
  }

  public void setOtherCustomerType(@javax.annotation.Nullable String otherCustomerType) {
    this.otherCustomerType = otherCustomerType;
  }


  public FormW9 tin(@javax.annotation.Nullable String tin) {
    this.tin = tin;
    return this;
  }

  /**
   * Get tin
   * @return tin
   */
  @javax.annotation.Nullable
  public String getTin() {
    return tin;
  }

  public void setTin(@javax.annotation.Nullable String tin) {
    this.tin = tin;
  }


  public FormW9 tinType(@javax.annotation.Nullable TinTypeEnum tinType) {
    this.tinType = tinType;
    return this;
  }

  /**
   * Get tinType
   * @return tinType
   */
  @javax.annotation.Nullable
  public TinTypeEnum getTinType() {
    return tinType;
  }

  public void setTinType(@javax.annotation.Nullable TinTypeEnum tinType) {
    this.tinType = tinType;
  }


  public FormW9 cert1(@javax.annotation.Nullable Boolean cert1) {
    this.cert1 = cert1;
    return this;
  }

  /**
   * Get cert1
   * @return cert1
   */
  @javax.annotation.Nullable
  public Boolean getCert1() {
    return cert1;
  }

  public void setCert1(@javax.annotation.Nullable Boolean cert1) {
    this.cert1 = cert1;
  }


  public FormW9 cert2(@javax.annotation.Nullable Boolean cert2) {
    this.cert2 = cert2;
    return this;
  }

  /**
   * Get cert2
   * @return cert2
   */
  @javax.annotation.Nullable
  public Boolean getCert2() {
    return cert2;
  }

  public void setCert2(@javax.annotation.Nullable Boolean cert2) {
    this.cert2 = cert2;
  }


  public FormW9 cert3(@javax.annotation.Nullable Boolean cert3) {
    this.cert3 = cert3;
    return this;
  }

  /**
   * Get cert3
   * @return cert3
   */
  @javax.annotation.Nullable
  public Boolean getCert3() {
    return cert3;
  }

  public void setCert3(@javax.annotation.Nullable Boolean cert3) {
    this.cert3 = cert3;
  }


  public FormW9 cert4(@javax.annotation.Nullable Boolean cert4) {
    this.cert4 = cert4;
    return this;
  }

  /**
   * Get cert4
   * @return cert4
   */
  @javax.annotation.Nullable
  public Boolean getCert4() {
    return cert4;
  }

  public void setCert4(@javax.annotation.Nullable Boolean cert4) {
    this.cert4 = cert4;
  }


  public FormW9 signatureType(@javax.annotation.Nullable SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
    return this;
  }

  /**
   * Get signatureType
   * @return signatureType
   */
  @javax.annotation.Nullable
  public SignatureTypeEnum getSignatureType() {
    return signatureType;
  }

  public void setSignatureType(@javax.annotation.Nullable SignatureTypeEnum signatureType) {
    this.signatureType = signatureType;
  }


  public FormW9 blankForm(@javax.annotation.Nullable Boolean blankForm) {
    this.blankForm = blankForm;
    return this;
  }

  /**
   * Get blankForm
   * @return blankForm
   */
  @javax.annotation.Nullable
  public Boolean getBlankForm() {
    return blankForm;
  }

  public void setBlankForm(@javax.annotation.Nullable Boolean blankForm) {
    this.blankForm = blankForm;
  }


  public FormW9 taxFormFile(@javax.annotation.Nullable String taxFormFile) {
    this.taxFormFile = taxFormFile;
    return this;
  }

  /**
   * Get taxFormFile
   * @return taxFormFile
   */
  @javax.annotation.Nullable
  public String getTaxFormFile() {
    return taxFormFile;
  }

  public void setTaxFormFile(@javax.annotation.Nullable String taxFormFile) {
    this.taxFormFile = taxFormFile;
  }


  public FormW9 proprietaryFormNumber(@javax.annotation.Nullable Integer proprietaryFormNumber) {
    this.proprietaryFormNumber = proprietaryFormNumber;
    return this;
  }

  /**
   * Get proprietaryFormNumber
   * @return proprietaryFormNumber
   */
  @javax.annotation.Nullable
  public Integer getProprietaryFormNumber() {
    return proprietaryFormNumber;
  }

  public void setProprietaryFormNumber(@javax.annotation.Nullable Integer proprietaryFormNumber) {
    this.proprietaryFormNumber = proprietaryFormNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormW9 formW9 = (FormW9) o;
    return Objects.equals(this.localTaxForms, formW9.localTaxForms) &&
        Objects.equals(this.name, formW9.name) &&
        Objects.equals(this.businessName, formW9.businessName) &&
        Objects.equals(this.customerType, formW9.customerType) &&
        Objects.equals(this.taxClassification, formW9.taxClassification) &&
        Objects.equals(this.otherCustomerType, formW9.otherCustomerType) &&
        Objects.equals(this.tin, formW9.tin) &&
        Objects.equals(this.tinType, formW9.tinType) &&
        Objects.equals(this.cert1, formW9.cert1) &&
        Objects.equals(this.cert2, formW9.cert2) &&
        Objects.equals(this.cert3, formW9.cert3) &&
        Objects.equals(this.cert4, formW9.cert4) &&
        Objects.equals(this.signatureType, formW9.signatureType) &&
        Objects.equals(this.blankForm, formW9.blankForm) &&
        Objects.equals(this.taxFormFile, formW9.taxFormFile) &&
        Objects.equals(this.proprietaryFormNumber, formW9.proprietaryFormNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localTaxForms, name, businessName, customerType, taxClassification, otherCustomerType, tin, tinType, cert1, cert2, cert3, cert4, signatureType, blankForm, taxFormFile, proprietaryFormNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormW9 {\n");
    sb.append("    localTaxForms: ").append(toIndentedString(localTaxForms)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    businessName: ").append(toIndentedString(businessName)).append("\n");
    sb.append("    customerType: ").append(toIndentedString(customerType)).append("\n");
    sb.append("    taxClassification: ").append(toIndentedString(taxClassification)).append("\n");
    sb.append("    otherCustomerType: ").append(toIndentedString(otherCustomerType)).append("\n");
    sb.append("    tin: ").append(toIndentedString(tin)).append("\n");
    sb.append("    tinType: ").append(toIndentedString(tinType)).append("\n");
    sb.append("    cert1: ").append(toIndentedString(cert1)).append("\n");
    sb.append("    cert2: ").append(toIndentedString(cert2)).append("\n");
    sb.append("    cert3: ").append(toIndentedString(cert3)).append("\n");
    sb.append("    cert4: ").append(toIndentedString(cert4)).append("\n");
    sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
    sb.append("    blankForm: ").append(toIndentedString(blankForm)).append("\n");
    sb.append("    taxFormFile: ").append(toIndentedString(taxFormFile)).append("\n");
    sb.append("    proprietaryFormNumber: ").append(toIndentedString(proprietaryFormNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localTaxForms");
    openapiFields.add("name");
    openapiFields.add("businessName");
    openapiFields.add("customerType");
    openapiFields.add("taxClassification");
    openapiFields.add("otherCustomerType");
    openapiFields.add("tin");
    openapiFields.add("tinType");
    openapiFields.add("cert1");
    openapiFields.add("cert2");
    openapiFields.add("cert3");
    openapiFields.add("cert4");
    openapiFields.add("signatureType");
    openapiFields.add("blankForm");
    openapiFields.add("taxFormFile");
    openapiFields.add("proprietaryFormNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormW9
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormW9.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormW9 is not found in the empty JSON string", FormW9.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormW9.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormW9` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("localTaxForms") != null && !jsonObj.get("localTaxForms").isJsonNull()) {
        JsonArray jsonArraylocalTaxForms = jsonObj.getAsJsonArray("localTaxForms");
        if (jsonArraylocalTaxForms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localTaxForms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localTaxForms` to be an array in the JSON string but got `%s`", jsonObj.get("localTaxForms").toString()));
          }

          // validate the optional field `localTaxForms` (array)
          for (int i = 0; i < jsonArraylocalTaxForms.size(); i++) {
            LocalTaxForm.validateJsonElement(jsonArraylocalTaxForms.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("businessName") != null && !jsonObj.get("businessName").isJsonNull()) && !jsonObj.get("businessName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessName").toString()));
      }
      if ((jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) && !jsonObj.get("customerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerType").toString()));
      }
      // validate the optional field `customerType`
      if (jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) {
        CustomerTypeEnum.validateJsonElement(jsonObj.get("customerType"));
      }
      if ((jsonObj.get("taxClassification") != null && !jsonObj.get("taxClassification").isJsonNull()) && !jsonObj.get("taxClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxClassification").toString()));
      }
      if ((jsonObj.get("otherCustomerType") != null && !jsonObj.get("otherCustomerType").isJsonNull()) && !jsonObj.get("otherCustomerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherCustomerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherCustomerType").toString()));
      }
      if ((jsonObj.get("tin") != null && !jsonObj.get("tin").isJsonNull()) && !jsonObj.get("tin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tin").toString()));
      }
      if ((jsonObj.get("tinType") != null && !jsonObj.get("tinType").isJsonNull()) && !jsonObj.get("tinType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tinType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tinType").toString()));
      }
      // validate the optional field `tinType`
      if (jsonObj.get("tinType") != null && !jsonObj.get("tinType").isJsonNull()) {
        TinTypeEnum.validateJsonElement(jsonObj.get("tinType"));
      }
      if ((jsonObj.get("signatureType") != null && !jsonObj.get("signatureType").isJsonNull()) && !jsonObj.get("signatureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureType").toString()));
      }
      // validate the optional field `signatureType`
      if (jsonObj.get("signatureType") != null && !jsonObj.get("signatureType").isJsonNull()) {
        SignatureTypeEnum.validateJsonElement(jsonObj.get("signatureType"));
      }
      if ((jsonObj.get("taxFormFile") != null && !jsonObj.get("taxFormFile").isJsonNull()) && !jsonObj.get("taxFormFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxFormFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxFormFile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormW9.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormW9' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormW9> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormW9.class));

       return (TypeAdapter<T>) new TypeAdapter<FormW9>() {
           @Override
           public void write(JsonWriter out, FormW9 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormW9 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormW9 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormW9
   * @throws IOException if the JSON string is invalid with respect to FormW9
   */
  public static FormW9 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormW9.class);
  }

  /**
   * Convert an instance of FormW9 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

