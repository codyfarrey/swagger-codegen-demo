/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing one order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class LiveOrdersResponseOrdersInner {
  public static final String SERIALIZED_NAME_ACCT = "acct";
  @SerializedName(SERIALIZED_NAME_ACCT)
  @javax.annotation.Nullable
  private String acct;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_CONIDEX = "conidex";
  @SerializedName(SERIALIZED_NAME_CONIDEX)
  @javax.annotation.Nullable
  private String conidex;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private Integer orderId;

  public static final String SERIALIZED_NAME_CASH_CCY = "cashCcy";
  @SerializedName(SERIALIZED_NAME_CASH_CCY)
  @javax.annotation.Nullable
  private String cashCcy;

  public static final String SERIALIZED_NAME_SIZE_AND_FILLS = "sizeAndFills";
  @SerializedName(SERIALIZED_NAME_SIZE_AND_FILLS)
  @javax.annotation.Nullable
  private String sizeAndFills;

  public static final String SERIALIZED_NAME_ORDER_DESC = "orderDesc";
  @SerializedName(SERIALIZED_NAME_ORDER_DESC)
  @javax.annotation.Nullable
  private String orderDesc;

  public static final String SERIALIZED_NAME_DESCRIPTION1 = "description1";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION1)
  @javax.annotation.Nullable
  private String description1;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  @javax.annotation.Nullable
  private String ticker;

  public static final String SERIALIZED_NAME_SEC_TYPE = "secType";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private String secType;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_REMAINING_QUANTITY = "remainingQuantity";
  @SerializedName(SERIALIZED_NAME_REMAINING_QUANTITY)
  @javax.annotation.Nullable
  private String remainingQuantity;

  public static final String SERIALIZED_NAME_FILLED_QUANTITY = "filledQuantity";
  @SerializedName(SERIALIZED_NAME_FILLED_QUANTITY)
  @javax.annotation.Nullable
  private String filledQuantity;

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "totalSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  @javax.annotation.Nullable
  private String totalSize;

  public static final String SERIALIZED_NAME_TOTAL_CASH_SIZE = "totalCashSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_CASH_SIZE)
  @javax.annotation.Nullable
  private String totalCashSize;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  /**
   * Status of the order ticket.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INACTIVE("Inactive"),
    
    PENDING_SUBMIT("PendingSubmit"),
    
    PRE_SUBMITTED("PreSubmitted"),
    
    SUBMITTED("Submitted"),
    
    FILLED("Filled"),
    
    PENDING_CANCEL("PendingCancel"),
    
    CANCELLED("Cancelled"),
    
    WARN_STATE("WarnState");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ORDER_CCP_STATUS = "order_ccp_status";
  @SerializedName(SERIALIZED_NAME_ORDER_CCP_STATUS)
  @javax.annotation.Nullable
  private String orderCcpStatus;

  public static final String SERIALIZED_NAME_ORIG_ORDER_TYPE = "origOrderType";
  @SerializedName(SERIALIZED_NAME_ORIG_ORDER_TYPE)
  @javax.annotation.Nullable
  private String origOrderType;

  /**
   * Indicates whether the order is supported by IB&#39;s Tax Optimization tool.
   */
  @JsonAdapter(SupportsTaxOptEnum.Adapter.class)
  public enum SupportsTaxOptEnum {
    _0("0"),
    
    _1("1");

    private String value;

    SupportsTaxOptEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportsTaxOptEnum fromValue(String value) {
      for (SupportsTaxOptEnum b : SupportsTaxOptEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportsTaxOptEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportsTaxOptEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportsTaxOptEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportsTaxOptEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportsTaxOptEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTS_TAX_OPT = "supportsTaxOpt";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_TAX_OPT)
  @javax.annotation.Nullable
  private SupportsTaxOptEnum supportsTaxOpt;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_TIME = "lastExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_TIME)
  @javax.annotation.Nullable
  private String lastExecutionTime;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  @javax.annotation.Nullable
  private String orderType;

  public static final String SERIALIZED_NAME_BG_COLOR = "bgColor";
  @SerializedName(SERIALIZED_NAME_BG_COLOR)
  @javax.annotation.Nullable
  private String bgColor;

  public static final String SERIALIZED_NAME_FG_COLOR = "fgColor";
  @SerializedName(SERIALIZED_NAME_FG_COLOR)
  @javax.annotation.Nullable
  private String fgColor;

  /**
   * Indicates whether the order ticket is an Event Trading order.
   */
  @JsonAdapter(IsEventTradingEnum.Adapter.class)
  public enum IsEventTradingEnum {
    _0("0"),
    
    _1("1");

    private String value;

    IsEventTradingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsEventTradingEnum fromValue(String value) {
      for (IsEventTradingEnum b : IsEventTradingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsEventTradingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsEventTradingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsEventTradingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsEventTradingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IsEventTradingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IS_EVENT_TRADING = "isEventTrading";
  @SerializedName(SERIALIZED_NAME_IS_EVENT_TRADING)
  @javax.annotation.Nullable
  private IsEventTradingEnum isEventTrading;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private String price;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  @javax.annotation.Nullable
  private String timeInForce;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_TIME_R = "lastExecutionTime_r";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_TIME_R)
  @javax.annotation.Nullable
  private String lastExecutionTimeR;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  @javax.annotation.Nullable
  private String side;

  public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";
  @SerializedName(SERIALIZED_NAME_AVG_PRICE)
  @javax.annotation.Nullable
  private String avgPrice;

  public LiveOrdersResponseOrdersInner() {
  }

  public LiveOrdersResponseOrdersInner acct(@javax.annotation.Nullable String acct) {
    this.acct = acct;
    return this;
  }

  /**
   * IB account ID to which the order was placed.
   * @return acct
   */
  @javax.annotation.Nullable
  public String getAcct() {
    return acct;
  }

  public void setAcct(@javax.annotation.Nullable String acct) {
    this.acct = acct;
  }


  public LiveOrdersResponseOrdersInner exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * Routing destination of the order ticket.
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public LiveOrdersResponseOrdersInner conidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
    return this;
  }

  /**
   * Contract ID and routing destination in format 123456@EXCHANGE.
   * @return conidex
   */
  @javax.annotation.Nullable
  public String getConidex() {
    return conidex;
  }

  public void setConidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
  }


  public LiveOrdersResponseOrdersInner conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Contract ID of the order&#39;s instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }


  public LiveOrdersResponseOrdersInner account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * IB account ID to which the order was placed.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public LiveOrdersResponseOrdersInner orderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * IB-assigned order identifier.
   * @return orderId
   */
  @javax.annotation.Nullable
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
  }


  public LiveOrdersResponseOrdersInner cashCcy(@javax.annotation.Nullable String cashCcy) {
    this.cashCcy = cashCcy;
    return this;
  }

  /**
   * Currency of the order ticket&#39;s Cash Quantity, if applicable.
   * @return cashCcy
   */
  @javax.annotation.Nullable
  public String getCashCcy() {
    return cashCcy;
  }

  public void setCashCcy(@javax.annotation.Nullable String cashCcy) {
    this.cashCcy = cashCcy;
  }


  public LiveOrdersResponseOrdersInner sizeAndFills(@javax.annotation.Nullable String sizeAndFills) {
    this.sizeAndFills = sizeAndFills;
    return this;
  }

  /**
   * Human-readable shorthand rendering of the filled and total quantities of the order.
   * @return sizeAndFills
   */
  @javax.annotation.Nullable
  public String getSizeAndFills() {
    return sizeAndFills;
  }

  public void setSizeAndFills(@javax.annotation.Nullable String sizeAndFills) {
    this.sizeAndFills = sizeAndFills;
  }


  public LiveOrdersResponseOrdersInner orderDesc(@javax.annotation.Nullable String orderDesc) {
    this.orderDesc = orderDesc;
    return this;
  }

  /**
   * Human-readable shorthand rendering of the order ticket.
   * @return orderDesc
   */
  @javax.annotation.Nullable
  public String getOrderDesc() {
    return orderDesc;
  }

  public void setOrderDesc(@javax.annotation.Nullable String orderDesc) {
    this.orderDesc = orderDesc;
  }


  public LiveOrdersResponseOrdersInner description1(@javax.annotation.Nullable String description1) {
    this.description1 = description1;
    return this;
  }

  /**
   * Descriptive text, or additional details that specific the instrument.
   * @return description1
   */
  @javax.annotation.Nullable
  public String getDescription1() {
    return description1;
  }

  public void setDescription1(@javax.annotation.Nullable String description1) {
    this.description1 = description1;
  }


  public LiveOrdersResponseOrdersInner ticker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Symbol or base product code of the instrument.
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(@javax.annotation.Nullable String ticker) {
    this.ticker = ticker;
  }


  public LiveOrdersResponseOrdersInner secType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
    return this;
  }

  /**
   * Asset class of the instrument.
   * @return secType
   */
  @javax.annotation.Nullable
  public String getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable String secType) {
    this.secType = secType;
  }


  public LiveOrdersResponseOrdersInner listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Exchange on which the instrument is listed.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public LiveOrdersResponseOrdersInner remainingQuantity(@javax.annotation.Nullable String remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

  /**
   * Quantity remaining to be filled in units of the instrument.
   * @return remainingQuantity
   */
  @javax.annotation.Nullable
  public String getRemainingQuantity() {
    return remainingQuantity;
  }

  public void setRemainingQuantity(@javax.annotation.Nullable String remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }


  public LiveOrdersResponseOrdersInner filledQuantity(@javax.annotation.Nullable String filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

  /**
   * Quantity filled in units of the instrument.
   * @return filledQuantity
   */
  @javax.annotation.Nullable
  public String getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(@javax.annotation.Nullable String filledQuantity) {
    this.filledQuantity = filledQuantity;
  }


  public LiveOrdersResponseOrdersInner totalSize(@javax.annotation.Nullable String totalSize) {
    this.totalSize = totalSize;
    return this;
  }

  /**
   * Total size of an order in the instrument&#39;s units.
   * @return totalSize
   */
  @javax.annotation.Nullable
  public String getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(@javax.annotation.Nullable String totalSize) {
    this.totalSize = totalSize;
  }


  public LiveOrdersResponseOrdersInner totalCashSize(@javax.annotation.Nullable String totalCashSize) {
    this.totalCashSize = totalCashSize;
    return this;
  }

  /**
   * Total size of a cash quantity order.
   * @return totalCashSize
   */
  @javax.annotation.Nullable
  public String getTotalCashSize() {
    return totalCashSize;
  }

  public void setTotalCashSize(@javax.annotation.Nullable String totalCashSize) {
    this.totalCashSize = totalCashSize;
  }


  public LiveOrdersResponseOrdersInner companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of business associated with instrument, or otherwise description of instrument.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public LiveOrdersResponseOrdersInner status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the order ticket.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public LiveOrdersResponseOrdersInner orderCcpStatus(@javax.annotation.Nullable String orderCcpStatus) {
    this.orderCcpStatus = orderCcpStatus;
    return this;
  }

  /**
   * IB internal order status.
   * @return orderCcpStatus
   */
  @javax.annotation.Nullable
  public String getOrderCcpStatus() {
    return orderCcpStatus;
  }

  public void setOrderCcpStatus(@javax.annotation.Nullable String orderCcpStatus) {
    this.orderCcpStatus = orderCcpStatus;
  }


  public LiveOrdersResponseOrdersInner origOrderType(@javax.annotation.Nullable String origOrderType) {
    this.origOrderType = origOrderType;
    return this;
  }

  /**
   * Order type of a filled order.
   * @return origOrderType
   */
  @javax.annotation.Nullable
  public String getOrigOrderType() {
    return origOrderType;
  }

  public void setOrigOrderType(@javax.annotation.Nullable String origOrderType) {
    this.origOrderType = origOrderType;
  }


  public LiveOrdersResponseOrdersInner supportsTaxOpt(@javax.annotation.Nullable SupportsTaxOptEnum supportsTaxOpt) {
    this.supportsTaxOpt = supportsTaxOpt;
    return this;
  }

  /**
   * Indicates whether the order is supported by IB&#39;s Tax Optimization tool.
   * @return supportsTaxOpt
   */
  @javax.annotation.Nullable
  public SupportsTaxOptEnum getSupportsTaxOpt() {
    return supportsTaxOpt;
  }

  public void setSupportsTaxOpt(@javax.annotation.Nullable SupportsTaxOptEnum supportsTaxOpt) {
    this.supportsTaxOpt = supportsTaxOpt;
  }


  public LiveOrdersResponseOrdersInner lastExecutionTime(@javax.annotation.Nullable String lastExecutionTime) {
    this.lastExecutionTime = lastExecutionTime;
    return this;
  }

  /**
   * Time of last execution against the order in format YYMMDDhhmmss.
   * @return lastExecutionTime
   */
  @javax.annotation.Nullable
  public String getLastExecutionTime() {
    return lastExecutionTime;
  }

  public void setLastExecutionTime(@javax.annotation.Nullable String lastExecutionTime) {
    this.lastExecutionTime = lastExecutionTime;
  }


  public LiveOrdersResponseOrdersInner orderType(@javax.annotation.Nullable String orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Order type of a working order ticket.
   * @return orderType
   */
  @javax.annotation.Nullable
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(@javax.annotation.Nullable String orderType) {
    this.orderType = orderType;
  }


  public LiveOrdersResponseOrdersInner bgColor(@javax.annotation.Nullable String bgColor) {
    this.bgColor = bgColor;
    return this;
  }

  /**
   * Internal use. IB&#39;s UI background color in hex.
   * @return bgColor
   */
  @javax.annotation.Nullable
  public String getBgColor() {
    return bgColor;
  }

  public void setBgColor(@javax.annotation.Nullable String bgColor) {
    this.bgColor = bgColor;
  }


  public LiveOrdersResponseOrdersInner fgColor(@javax.annotation.Nullable String fgColor) {
    this.fgColor = fgColor;
    return this;
  }

  /**
   * Internal use. IB&#39;s UI foreground color in hex.
   * @return fgColor
   */
  @javax.annotation.Nullable
  public String getFgColor() {
    return fgColor;
  }

  public void setFgColor(@javax.annotation.Nullable String fgColor) {
    this.fgColor = fgColor;
  }


  public LiveOrdersResponseOrdersInner isEventTrading(@javax.annotation.Nullable IsEventTradingEnum isEventTrading) {
    this.isEventTrading = isEventTrading;
    return this;
  }

  /**
   * Indicates whether the order ticket is an Event Trading order.
   * @return isEventTrading
   */
  @javax.annotation.Nullable
  public IsEventTradingEnum getIsEventTrading() {
    return isEventTrading;
  }

  public void setIsEventTrading(@javax.annotation.Nullable IsEventTradingEnum isEventTrading) {
    this.isEventTrading = isEventTrading;
  }


  public LiveOrdersResponseOrdersInner price(@javax.annotation.Nullable String price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the order, if applicable to the order type.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable String price) {
    this.price = price;
  }


  public LiveOrdersResponseOrdersInner timeInForce(@javax.annotation.Nullable String timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

  /**
   * Time of force of the order.
   * @return timeInForce
   */
  @javax.annotation.Nullable
  public String getTimeInForce() {
    return timeInForce;
  }

  public void setTimeInForce(@javax.annotation.Nullable String timeInForce) {
    this.timeInForce = timeInForce;
  }


  public LiveOrdersResponseOrdersInner lastExecutionTimeR(@javax.annotation.Nullable String lastExecutionTimeR) {
    this.lastExecutionTimeR = lastExecutionTimeR;
    return this;
  }

  /**
   * Unix timestamp of the last execution against the order.
   * @return lastExecutionTimeR
   */
  @javax.annotation.Nullable
  public String getLastExecutionTimeR() {
    return lastExecutionTimeR;
  }

  public void setLastExecutionTimeR(@javax.annotation.Nullable String lastExecutionTimeR) {
    this.lastExecutionTimeR = lastExecutionTimeR;
  }


  public LiveOrdersResponseOrdersInner side(@javax.annotation.Nullable String side) {
    this.side = side;
    return this;
  }

  /**
   * Side of the order.
   * @return side
   */
  @javax.annotation.Nullable
  public String getSide() {
    return side;
  }

  public void setSide(@javax.annotation.Nullable String side) {
    this.side = side;
  }


  public LiveOrdersResponseOrdersInner avgPrice(@javax.annotation.Nullable String avgPrice) {
    this.avgPrice = avgPrice;
    return this;
  }

  /**
   * Average price of fills against the order, if any.
   * @return avgPrice
   */
  @javax.annotation.Nullable
  public String getAvgPrice() {
    return avgPrice;
  }

  public void setAvgPrice(@javax.annotation.Nullable String avgPrice) {
    this.avgPrice = avgPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveOrdersResponseOrdersInner liveOrdersResponseOrdersInner = (LiveOrdersResponseOrdersInner) o;
    return Objects.equals(this.acct, liveOrdersResponseOrdersInner.acct) &&
        Objects.equals(this.exchange, liveOrdersResponseOrdersInner.exchange) &&
        Objects.equals(this.conidex, liveOrdersResponseOrdersInner.conidex) &&
        Objects.equals(this.conid, liveOrdersResponseOrdersInner.conid) &&
        Objects.equals(this.account, liveOrdersResponseOrdersInner.account) &&
        Objects.equals(this.orderId, liveOrdersResponseOrdersInner.orderId) &&
        Objects.equals(this.cashCcy, liveOrdersResponseOrdersInner.cashCcy) &&
        Objects.equals(this.sizeAndFills, liveOrdersResponseOrdersInner.sizeAndFills) &&
        Objects.equals(this.orderDesc, liveOrdersResponseOrdersInner.orderDesc) &&
        Objects.equals(this.description1, liveOrdersResponseOrdersInner.description1) &&
        Objects.equals(this.ticker, liveOrdersResponseOrdersInner.ticker) &&
        Objects.equals(this.secType, liveOrdersResponseOrdersInner.secType) &&
        Objects.equals(this.listingExchange, liveOrdersResponseOrdersInner.listingExchange) &&
        Objects.equals(this.remainingQuantity, liveOrdersResponseOrdersInner.remainingQuantity) &&
        Objects.equals(this.filledQuantity, liveOrdersResponseOrdersInner.filledQuantity) &&
        Objects.equals(this.totalSize, liveOrdersResponseOrdersInner.totalSize) &&
        Objects.equals(this.totalCashSize, liveOrdersResponseOrdersInner.totalCashSize) &&
        Objects.equals(this.companyName, liveOrdersResponseOrdersInner.companyName) &&
        Objects.equals(this.status, liveOrdersResponseOrdersInner.status) &&
        Objects.equals(this.orderCcpStatus, liveOrdersResponseOrdersInner.orderCcpStatus) &&
        Objects.equals(this.origOrderType, liveOrdersResponseOrdersInner.origOrderType) &&
        Objects.equals(this.supportsTaxOpt, liveOrdersResponseOrdersInner.supportsTaxOpt) &&
        Objects.equals(this.lastExecutionTime, liveOrdersResponseOrdersInner.lastExecutionTime) &&
        Objects.equals(this.orderType, liveOrdersResponseOrdersInner.orderType) &&
        Objects.equals(this.bgColor, liveOrdersResponseOrdersInner.bgColor) &&
        Objects.equals(this.fgColor, liveOrdersResponseOrdersInner.fgColor) &&
        Objects.equals(this.isEventTrading, liveOrdersResponseOrdersInner.isEventTrading) &&
        Objects.equals(this.price, liveOrdersResponseOrdersInner.price) &&
        Objects.equals(this.timeInForce, liveOrdersResponseOrdersInner.timeInForce) &&
        Objects.equals(this.lastExecutionTimeR, liveOrdersResponseOrdersInner.lastExecutionTimeR) &&
        Objects.equals(this.side, liveOrdersResponseOrdersInner.side) &&
        Objects.equals(this.avgPrice, liveOrdersResponseOrdersInner.avgPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acct, exchange, conidex, conid, account, orderId, cashCcy, sizeAndFills, orderDesc, description1, ticker, secType, listingExchange, remainingQuantity, filledQuantity, totalSize, totalCashSize, companyName, status, orderCcpStatus, origOrderType, supportsTaxOpt, lastExecutionTime, orderType, bgColor, fgColor, isEventTrading, price, timeInForce, lastExecutionTimeR, side, avgPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveOrdersResponseOrdersInner {\n");
    sb.append("    acct: ").append(toIndentedString(acct)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    conidex: ").append(toIndentedString(conidex)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    cashCcy: ").append(toIndentedString(cashCcy)).append("\n");
    sb.append("    sizeAndFills: ").append(toIndentedString(sizeAndFills)).append("\n");
    sb.append("    orderDesc: ").append(toIndentedString(orderDesc)).append("\n");
    sb.append("    description1: ").append(toIndentedString(description1)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    totalCashSize: ").append(toIndentedString(totalCashSize)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    orderCcpStatus: ").append(toIndentedString(orderCcpStatus)).append("\n");
    sb.append("    origOrderType: ").append(toIndentedString(origOrderType)).append("\n");
    sb.append("    supportsTaxOpt: ").append(toIndentedString(supportsTaxOpt)).append("\n");
    sb.append("    lastExecutionTime: ").append(toIndentedString(lastExecutionTime)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    bgColor: ").append(toIndentedString(bgColor)).append("\n");
    sb.append("    fgColor: ").append(toIndentedString(fgColor)).append("\n");
    sb.append("    isEventTrading: ").append(toIndentedString(isEventTrading)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    lastExecutionTimeR: ").append(toIndentedString(lastExecutionTimeR)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acct");
    openapiFields.add("exchange");
    openapiFields.add("conidex");
    openapiFields.add("conid");
    openapiFields.add("account");
    openapiFields.add("orderId");
    openapiFields.add("cashCcy");
    openapiFields.add("sizeAndFills");
    openapiFields.add("orderDesc");
    openapiFields.add("description1");
    openapiFields.add("ticker");
    openapiFields.add("secType");
    openapiFields.add("listingExchange");
    openapiFields.add("remainingQuantity");
    openapiFields.add("filledQuantity");
    openapiFields.add("totalSize");
    openapiFields.add("totalCashSize");
    openapiFields.add("companyName");
    openapiFields.add("status");
    openapiFields.add("order_ccp_status");
    openapiFields.add("origOrderType");
    openapiFields.add("supportsTaxOpt");
    openapiFields.add("lastExecutionTime");
    openapiFields.add("orderType");
    openapiFields.add("bgColor");
    openapiFields.add("fgColor");
    openapiFields.add("isEventTrading");
    openapiFields.add("price");
    openapiFields.add("timeInForce");
    openapiFields.add("lastExecutionTime_r");
    openapiFields.add("side");
    openapiFields.add("avgPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveOrdersResponseOrdersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveOrdersResponseOrdersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveOrdersResponseOrdersInner is not found in the empty JSON string", LiveOrdersResponseOrdersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveOrdersResponseOrdersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveOrdersResponseOrdersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acct") != null && !jsonObj.get("acct").isJsonNull()) && !jsonObj.get("acct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acct").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("conidex") != null && !jsonObj.get("conidex").isJsonNull()) && !jsonObj.get("conidex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidex").toString()));
      }
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("cashCcy") != null && !jsonObj.get("cashCcy").isJsonNull()) && !jsonObj.get("cashCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashCcy").toString()));
      }
      if ((jsonObj.get("sizeAndFills") != null && !jsonObj.get("sizeAndFills").isJsonNull()) && !jsonObj.get("sizeAndFills").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeAndFills` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeAndFills").toString()));
      }
      if ((jsonObj.get("orderDesc") != null && !jsonObj.get("orderDesc").isJsonNull()) && !jsonObj.get("orderDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderDesc").toString()));
      }
      if ((jsonObj.get("description1") != null && !jsonObj.get("description1").isJsonNull()) && !jsonObj.get("description1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description1").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) && !jsonObj.get("secType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secType").toString()));
      }
      if ((jsonObj.get("listingExchange") != null && !jsonObj.get("listingExchange").isJsonNull()) && !jsonObj.get("listingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingExchange").toString()));
      }
      if ((jsonObj.get("remainingQuantity") != null && !jsonObj.get("remainingQuantity").isJsonNull()) && !jsonObj.get("remainingQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remainingQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remainingQuantity").toString()));
      }
      if ((jsonObj.get("filledQuantity") != null && !jsonObj.get("filledQuantity").isJsonNull()) && !jsonObj.get("filledQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filledQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filledQuantity").toString()));
      }
      if ((jsonObj.get("totalSize") != null && !jsonObj.get("totalSize").isJsonNull()) && !jsonObj.get("totalSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSize").toString()));
      }
      if ((jsonObj.get("totalCashSize") != null && !jsonObj.get("totalCashSize").isJsonNull()) && !jsonObj.get("totalCashSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCashSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCashSize").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("order_ccp_status") != null && !jsonObj.get("order_ccp_status").isJsonNull()) && !jsonObj.get("order_ccp_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_ccp_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_ccp_status").toString()));
      }
      if ((jsonObj.get("origOrderType") != null && !jsonObj.get("origOrderType").isJsonNull()) && !jsonObj.get("origOrderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origOrderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origOrderType").toString()));
      }
      if ((jsonObj.get("supportsTaxOpt") != null && !jsonObj.get("supportsTaxOpt").isJsonNull()) && !jsonObj.get("supportsTaxOpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportsTaxOpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportsTaxOpt").toString()));
      }
      // validate the optional field `supportsTaxOpt`
      if (jsonObj.get("supportsTaxOpt") != null && !jsonObj.get("supportsTaxOpt").isJsonNull()) {
        SupportsTaxOptEnum.validateJsonElement(jsonObj.get("supportsTaxOpt"));
      }
      if ((jsonObj.get("lastExecutionTime") != null && !jsonObj.get("lastExecutionTime").isJsonNull()) && !jsonObj.get("lastExecutionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastExecutionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastExecutionTime").toString()));
      }
      if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull()) && !jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
      if ((jsonObj.get("bgColor") != null && !jsonObj.get("bgColor").isJsonNull()) && !jsonObj.get("bgColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bgColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bgColor").toString()));
      }
      if ((jsonObj.get("fgColor") != null && !jsonObj.get("fgColor").isJsonNull()) && !jsonObj.get("fgColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fgColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fgColor").toString()));
      }
      if ((jsonObj.get("isEventTrading") != null && !jsonObj.get("isEventTrading").isJsonNull()) && !jsonObj.get("isEventTrading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isEventTrading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isEventTrading").toString()));
      }
      // validate the optional field `isEventTrading`
      if (jsonObj.get("isEventTrading") != null && !jsonObj.get("isEventTrading").isJsonNull()) {
        IsEventTradingEnum.validateJsonElement(jsonObj.get("isEventTrading"));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) && !jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
      if ((jsonObj.get("lastExecutionTime_r") != null && !jsonObj.get("lastExecutionTime_r").isJsonNull()) && !jsonObj.get("lastExecutionTime_r").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastExecutionTime_r` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastExecutionTime_r").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull()) && !jsonObj.get("avgPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avgPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avgPrice").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveOrdersResponseOrdersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveOrdersResponseOrdersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveOrdersResponseOrdersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveOrdersResponseOrdersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveOrdersResponseOrdersInner>() {
           @Override
           public void write(JsonWriter out, LiveOrdersResponseOrdersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveOrdersResponseOrdersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveOrdersResponseOrdersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveOrdersResponseOrdersInner
   * @throws IOException if the JSON string is invalid with respect to LiveOrdersResponseOrdersInner
   */
  public static LiveOrdersResponseOrdersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveOrdersResponseOrdersInner.class);
  }

  /**
   * Convert an instance of LiveOrdersResponseOrdersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

