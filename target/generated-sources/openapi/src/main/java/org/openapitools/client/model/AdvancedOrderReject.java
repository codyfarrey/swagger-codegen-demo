/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Relates a message generated in response to the rejection of the submitted order ticket. In some cases, it may also present a mechanism to resubmit the same order following a prompted decision.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AdvancedOrderReject {
  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private Integer orderId;

  public static final String SERIALIZED_NAME_REQ_ID = "reqId";
  @SerializedName(SERIALIZED_NAME_REQ_ID)
  @javax.annotation.Nullable
  private String reqId;

  public static final String SERIALIZED_NAME_DISMISSABLE = "dismissable";
  @SerializedName(SERIALIZED_NAME_DISMISSABLE)
  @javax.annotation.Nullable
  private List<String> dismissable = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  @javax.annotation.Nullable
  private List<String> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nullable
  private String messageId;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  @javax.annotation.Nullable
  private Boolean prompt;

  public AdvancedOrderReject() {
  }

  public AdvancedOrderReject orderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The order ID assigned by IB to the rejected order ticket.
   * @return orderId
   */
  @javax.annotation.Nullable
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
  }


  public AdvancedOrderReject reqId(@javax.annotation.Nullable String reqId) {
    this.reqId = reqId;
    return this;
  }

  /**
   * IB&#39;s internal identifier assigned to the returned message.
   * @return reqId
   */
  @javax.annotation.Nullable
  public String getReqId() {
    return reqId;
  }

  public void setReqId(@javax.annotation.Nullable String reqId) {
    this.reqId = reqId;
  }


  public AdvancedOrderReject dismissable(@javax.annotation.Nullable List<String> dismissable) {
    this.dismissable = dismissable;
    return this;
  }

  public AdvancedOrderReject addDismissableItem(String dismissableItem) {
    if (this.dismissable == null) {
      this.dismissable = new ArrayList<>();
    }
    this.dismissable.add(dismissableItem);
    return this;
  }

  /**
   * Indicates whether this prompt is dismissable.
   * @return dismissable
   */
  @javax.annotation.Nullable
  public List<String> getDismissable() {
    return dismissable;
  }

  public void setDismissable(@javax.annotation.Nullable List<String> dismissable) {
    this.dismissable = dismissable;
  }


  public AdvancedOrderReject text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Human-readable text of the messages emitted by IB in response to order submission.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }


  public AdvancedOrderReject options(@javax.annotation.Nullable List<String> options) {
    this.options = options;
    return this;
  }

  public AdvancedOrderReject addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Choices available to the client in response to the rejection message.
   * @return options
   */
  @javax.annotation.Nullable
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(@javax.annotation.Nullable List<String> options) {
    this.options = options;
  }


  public AdvancedOrderReject type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * The specific type of message returned.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public AdvancedOrderReject messageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * IB internal identifier for the nature or category of the returned message.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
  }


  public AdvancedOrderReject prompt(@javax.annotation.Nullable Boolean prompt) {
    this.prompt = prompt;
    return this;
  }

  /**
   * Indicates that the message is a prompt offering a set of decisions, one or more of which may permit the rejected order to be resubmitted.
   * @return prompt
   */
  @javax.annotation.Nullable
  public Boolean getPrompt() {
    return prompt;
  }

  public void setPrompt(@javax.annotation.Nullable Boolean prompt) {
    this.prompt = prompt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedOrderReject advancedOrderReject = (AdvancedOrderReject) o;
    return Objects.equals(this.orderId, advancedOrderReject.orderId) &&
        Objects.equals(this.reqId, advancedOrderReject.reqId) &&
        Objects.equals(this.dismissable, advancedOrderReject.dismissable) &&
        Objects.equals(this.text, advancedOrderReject.text) &&
        Objects.equals(this.options, advancedOrderReject.options) &&
        Objects.equals(this.type, advancedOrderReject.type) &&
        Objects.equals(this.messageId, advancedOrderReject.messageId) &&
        Objects.equals(this.prompt, advancedOrderReject.prompt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, reqId, dismissable, text, options, type, messageId, prompt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedOrderReject {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    reqId: ").append(toIndentedString(reqId)).append("\n");
    sb.append("    dismissable: ").append(toIndentedString(dismissable)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderId");
    openapiFields.add("reqId");
    openapiFields.add("dismissable");
    openapiFields.add("text");
    openapiFields.add("options");
    openapiFields.add("type");
    openapiFields.add("messageId");
    openapiFields.add("prompt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedOrderReject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedOrderReject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedOrderReject is not found in the empty JSON string", AdvancedOrderReject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvancedOrderReject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvancedOrderReject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reqId") != null && !jsonObj.get("reqId").isJsonNull()) && !jsonObj.get("reqId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reqId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reqId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dismissable") != null && !jsonObj.get("dismissable").isJsonNull() && !jsonObj.get("dismissable").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissable` to be an array in the JSON string but got `%s`", jsonObj.get("dismissable").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull() && !jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvancedOrderReject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvancedOrderReject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvancedOrderReject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvancedOrderReject.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvancedOrderReject>() {
           @Override
           public void write(JsonWriter out, AdvancedOrderReject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvancedOrderReject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvancedOrderReject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedOrderReject
   * @throws IOException if the JSON string is invalid with respect to AdvancedOrderReject
   */
  public static AdvancedOrderReject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedOrderReject.class);
  }

  /**
   * Convert an instance of AdvancedOrderReject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

