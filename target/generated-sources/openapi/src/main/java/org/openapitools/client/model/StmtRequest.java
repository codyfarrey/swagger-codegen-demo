/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StmtRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class StmtRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  @javax.annotation.Nullable
  private List<String> accountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nonnull
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nonnull
  private String endDate;

  public static final String SERIALIZED_NAME_MULTI_ACCOUNT_FORMAT = "multiAccountFormat";
  @SerializedName(SERIALIZED_NAME_MULTI_ACCOUNT_FORMAT)
  @javax.annotation.Nullable
  private String multiAccountFormat;

  public static final String SERIALIZED_NAME_CRYPTO_CONSOL_IF_AVAILABLE = "cryptoConsolIfAvailable";
  @SerializedName(SERIALIZED_NAME_CRYPTO_CONSOL_IF_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean cryptoConsolIfAvailable = false;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  @javax.annotation.Nullable
  private String mimeType;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language = "en";

  public static final String SERIALIZED_NAME_GZIP = "gzip";
  @SerializedName(SERIALIZED_NAME_GZIP)
  @javax.annotation.Nullable
  private Boolean gzip = false;

  public StmtRequest() {
  }

  public StmtRequest accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * account id
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public StmtRequest accountIds(@javax.annotation.Nullable List<String> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public StmtRequest addAccountIdsItem(String accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

  /**
   * array of account id&#39;s
   * @return accountIds
   */
  @javax.annotation.Nullable
  public List<String> getAccountIds() {
    return accountIds;
  }

  public void setAccountIds(@javax.annotation.Nullable List<String> accountIds) {
    this.accountIds = accountIds;
  }


  public StmtRequest startDate(@javax.annotation.Nonnull String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * from date
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nonnull String startDate) {
    this.startDate = startDate;
  }


  public StmtRequest endDate(@javax.annotation.Nonnull String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * to date
   * @return endDate
   */
  @javax.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nonnull String endDate) {
    this.endDate = endDate;
  }


  public StmtRequest multiAccountFormat(@javax.annotation.Nullable String multiAccountFormat) {
    this.multiAccountFormat = multiAccountFormat;
    return this;
  }

  /**
   * possible values are consolidate, concatenate, or customConsolidate
   * @return multiAccountFormat
   */
  @javax.annotation.Nullable
  public String getMultiAccountFormat() {
    return multiAccountFormat;
  }

  public void setMultiAccountFormat(@javax.annotation.Nullable String multiAccountFormat) {
    this.multiAccountFormat = multiAccountFormat;
  }


  public StmtRequest cryptoConsolIfAvailable(@javax.annotation.Nullable Boolean cryptoConsolIfAvailable) {
    this.cryptoConsolIfAvailable = cryptoConsolIfAvailable;
    return this;
  }

  /**
   * crypto consolidate flag, If request contains any accounts with crypto segment, will turn request into Crypto Consolidated
   * @return cryptoConsolIfAvailable
   */
  @javax.annotation.Nullable
  public Boolean getCryptoConsolIfAvailable() {
    return cryptoConsolIfAvailable;
  }

  public void setCryptoConsolIfAvailable(@javax.annotation.Nullable Boolean cryptoConsolIfAvailable) {
    this.cryptoConsolIfAvailable = cryptoConsolIfAvailable;
  }


  public StmtRequest mimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * output format
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(@javax.annotation.Nullable String mimeType) {
    this.mimeType = mimeType;
  }


  public StmtRequest language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * two character ISO language code
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public StmtRequest gzip(@javax.annotation.Nullable Boolean gzip) {
    this.gzip = gzip;
    return this;
  }

  /**
   * to gzip the whole response pass true
   * @return gzip
   */
  @javax.annotation.Nullable
  public Boolean getGzip() {
    return gzip;
  }

  public void setGzip(@javax.annotation.Nullable Boolean gzip) {
    this.gzip = gzip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StmtRequest stmtRequest = (StmtRequest) o;
    return Objects.equals(this.accountId, stmtRequest.accountId) &&
        Objects.equals(this.accountIds, stmtRequest.accountIds) &&
        Objects.equals(this.startDate, stmtRequest.startDate) &&
        Objects.equals(this.endDate, stmtRequest.endDate) &&
        Objects.equals(this.multiAccountFormat, stmtRequest.multiAccountFormat) &&
        Objects.equals(this.cryptoConsolIfAvailable, stmtRequest.cryptoConsolIfAvailable) &&
        Objects.equals(this.mimeType, stmtRequest.mimeType) &&
        Objects.equals(this.language, stmtRequest.language) &&
        Objects.equals(this.gzip, stmtRequest.gzip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountIds, startDate, endDate, multiAccountFormat, cryptoConsolIfAvailable, mimeType, language, gzip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StmtRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    multiAccountFormat: ").append(toIndentedString(multiAccountFormat)).append("\n");
    sb.append("    cryptoConsolIfAvailable: ").append(toIndentedString(cryptoConsolIfAvailable)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    gzip: ").append(toIndentedString(gzip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountIds");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("multiAccountFormat");
    openapiFields.add("cryptoConsolIfAvailable");
    openapiFields.add("mimeType");
    openapiFields.add("language");
    openapiFields.add("gzip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StmtRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StmtRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StmtRequest is not found in the empty JSON string", StmtRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StmtRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StmtRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StmtRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountIds") != null && !jsonObj.get("accountIds").isJsonNull() && !jsonObj.get("accountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("multiAccountFormat") != null && !jsonObj.get("multiAccountFormat").isJsonNull()) && !jsonObj.get("multiAccountFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiAccountFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiAccountFormat").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StmtRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StmtRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StmtRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StmtRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StmtRequest>() {
           @Override
           public void write(JsonWriter out, StmtRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StmtRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StmtRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StmtRequest
   * @throws IOException if the JSON string is invalid with respect to StmtRequest
   */
  public static StmtRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StmtRequest.class);
  }

  /**
   * Convert an instance of StmtRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

