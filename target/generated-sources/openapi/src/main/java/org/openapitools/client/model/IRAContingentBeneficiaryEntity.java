/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Individual;
import org.openapitools.client.model.Title;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IRAContingentBeneficiaryEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IRAContingentBeneficiaryEntity {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private Address address;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_OWNERSHIP_PERCENTAGE = "ownershipPercentage";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_PERCENTAGE)
  @javax.annotation.Nullable
  private BigDecimal ownershipPercentage;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private Title title;

  /**
   * Gets or Sets relationship
   */
  @JsonAdapter(RelationshipEnum.Adapter.class)
  public enum RelationshipEnum {
    BROTHER("Brother"),
    
    DAUGHTER("Daughter"),
    
    ESTATE("Estate"),
    
    FATHER("Father"),
    
    HUSBAND("Husband"),
    
    MOTHER("Mother"),
    
    OTHER("Other"),
    
    SISTER("Sister"),
    
    SON("Son"),
    
    WIFE("Wife"),
    
    CHARITY("Charity"),
    
    TRUST("Trust"),
    
    SPOUSE("Spouse"),
    
    CHILD("Child"),
    
    SIBLING("Sibling"),
    
    PARENT("Parent"),
    
    GRANDCHILD("Grandchild"),
    
    COMMON_LAW_PARTNER("Common Law Partner");

    private String value;

    RelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipEnum fromValue(String value) {
      for (RelationshipEnum b : RelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  @javax.annotation.Nullable
  private RelationshipEnum relationship;

  public static final String SERIALIZED_NAME_EXECUTOR = "executor";
  @SerializedName(SERIALIZED_NAME_EXECUTOR)
  @javax.annotation.Nullable
  private Individual executor;

  public static final String SERIALIZED_NAME_EXECUTION_DATE = "executionDate";
  @SerializedName(SERIALIZED_NAME_EXECUTION_DATE)
  @javax.annotation.Nullable
  private LocalDate executionDate;

  public static final String SERIALIZED_NAME_ARTICLE_OF_WILL = "articleOfWill";
  @SerializedName(SERIALIZED_NAME_ARTICLE_OF_WILL)
  @javax.annotation.Nullable
  private String articleOfWill;

  /**
   * Gets or Sets entityType
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    TRUST("Trust"),
    
    ESTATE("Estate"),
    
    CHARITY("Charity");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nullable
  private EntityTypeEnum entityType;

  public IRAContingentBeneficiaryEntity() {
  }

  public IRAContingentBeneficiaryEntity name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public IRAContingentBeneficiaryEntity address(@javax.annotation.Nullable Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable Address address) {
    this.address = address;
  }


  public IRAContingentBeneficiaryEntity id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public IRAContingentBeneficiaryEntity externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public IRAContingentBeneficiaryEntity ownershipPercentage(@javax.annotation.Nullable BigDecimal ownershipPercentage) {
    this.ownershipPercentage = ownershipPercentage;
    return this;
  }

  /**
   * Get ownershipPercentage
   * @return ownershipPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getOwnershipPercentage() {
    return ownershipPercentage;
  }

  public void setOwnershipPercentage(@javax.annotation.Nullable BigDecimal ownershipPercentage) {
    this.ownershipPercentage = ownershipPercentage;
  }


  public IRAContingentBeneficiaryEntity title(@javax.annotation.Nullable Title title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public Title getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable Title title) {
    this.title = title;
  }


  public IRAContingentBeneficiaryEntity relationship(@javax.annotation.Nullable RelationshipEnum relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * Get relationship
   * @return relationship
   */
  @javax.annotation.Nullable
  public RelationshipEnum getRelationship() {
    return relationship;
  }

  public void setRelationship(@javax.annotation.Nullable RelationshipEnum relationship) {
    this.relationship = relationship;
  }


  public IRAContingentBeneficiaryEntity executor(@javax.annotation.Nullable Individual executor) {
    this.executor = executor;
    return this;
  }

  /**
   * Get executor
   * @return executor
   */
  @javax.annotation.Nullable
  public Individual getExecutor() {
    return executor;
  }

  public void setExecutor(@javax.annotation.Nullable Individual executor) {
    this.executor = executor;
  }


  public IRAContingentBeneficiaryEntity executionDate(@javax.annotation.Nullable LocalDate executionDate) {
    this.executionDate = executionDate;
    return this;
  }

  /**
   * Get executionDate
   * @return executionDate
   */
  @javax.annotation.Nullable
  public LocalDate getExecutionDate() {
    return executionDate;
  }

  public void setExecutionDate(@javax.annotation.Nullable LocalDate executionDate) {
    this.executionDate = executionDate;
  }


  public IRAContingentBeneficiaryEntity articleOfWill(@javax.annotation.Nullable String articleOfWill) {
    this.articleOfWill = articleOfWill;
    return this;
  }

  /**
   * Get articleOfWill
   * @return articleOfWill
   */
  @javax.annotation.Nullable
  public String getArticleOfWill() {
    return articleOfWill;
  }

  public void setArticleOfWill(@javax.annotation.Nullable String articleOfWill) {
    this.articleOfWill = articleOfWill;
  }


  public IRAContingentBeneficiaryEntity entityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IRAContingentBeneficiaryEntity irAContingentBeneficiaryEntity = (IRAContingentBeneficiaryEntity) o;
    return Objects.equals(this.name, irAContingentBeneficiaryEntity.name) &&
        Objects.equals(this.address, irAContingentBeneficiaryEntity.address) &&
        Objects.equals(this.id, irAContingentBeneficiaryEntity.id) &&
        Objects.equals(this.externalId, irAContingentBeneficiaryEntity.externalId) &&
        Objects.equals(this.ownershipPercentage, irAContingentBeneficiaryEntity.ownershipPercentage) &&
        Objects.equals(this.title, irAContingentBeneficiaryEntity.title) &&
        Objects.equals(this.relationship, irAContingentBeneficiaryEntity.relationship) &&
        Objects.equals(this.executor, irAContingentBeneficiaryEntity.executor) &&
        Objects.equals(this.executionDate, irAContingentBeneficiaryEntity.executionDate) &&
        Objects.equals(this.articleOfWill, irAContingentBeneficiaryEntity.articleOfWill) &&
        Objects.equals(this.entityType, irAContingentBeneficiaryEntity.entityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, id, externalId, ownershipPercentage, title, relationship, executor, executionDate, articleOfWill, entityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IRAContingentBeneficiaryEntity {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    ownershipPercentage: ").append(toIndentedString(ownershipPercentage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    executor: ").append(toIndentedString(executor)).append("\n");
    sb.append("    executionDate: ").append(toIndentedString(executionDate)).append("\n");
    sb.append("    articleOfWill: ").append(toIndentedString(articleOfWill)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("ownershipPercentage");
    openapiFields.add("title");
    openapiFields.add("relationship");
    openapiFields.add("executor");
    openapiFields.add("executionDate");
    openapiFields.add("articleOfWill");
    openapiFields.add("entityType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IRAContingentBeneficiaryEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IRAContingentBeneficiaryEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IRAContingentBeneficiaryEntity is not found in the empty JSON string", IRAContingentBeneficiaryEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IRAContingentBeneficiaryEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IRAContingentBeneficiaryEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        Title.validateJsonElement(jsonObj.get("title"));
      }
      if ((jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) && !jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      // validate the optional field `relationship`
      if (jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) {
        RelationshipEnum.validateJsonElement(jsonObj.get("relationship"));
      }
      // validate the optional field `executor`
      if (jsonObj.get("executor") != null && !jsonObj.get("executor").isJsonNull()) {
        Individual.validateJsonElement(jsonObj.get("executor"));
      }
      if ((jsonObj.get("articleOfWill") != null && !jsonObj.get("articleOfWill").isJsonNull()) && !jsonObj.get("articleOfWill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `articleOfWill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("articleOfWill").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IRAContingentBeneficiaryEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IRAContingentBeneficiaryEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IRAContingentBeneficiaryEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IRAContingentBeneficiaryEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<IRAContingentBeneficiaryEntity>() {
           @Override
           public void write(JsonWriter out, IRAContingentBeneficiaryEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IRAContingentBeneficiaryEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IRAContingentBeneficiaryEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IRAContingentBeneficiaryEntity
   * @throws IOException if the JSON string is invalid with respect to IRAContingentBeneficiaryEntity
   */
  public static IRAContingentBeneficiaryEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IRAContingentBeneficiaryEntity.class);
  }

  /**
   * Convert an instance of IRAContingentBeneficiaryEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

