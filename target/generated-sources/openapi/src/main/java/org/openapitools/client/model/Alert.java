/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An array containing all alerts as separate objects.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class Alert {
  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private Integer orderId;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_ALERT_NAME = "alert_name";
  @SerializedName(SERIALIZED_NAME_ALERT_NAME)
  @javax.annotation.Nullable
  private String alertName;

  public static final String SERIALIZED_NAME_ALERT_ACTIVE = "alert_active";
  @SerializedName(SERIALIZED_NAME_ALERT_ACTIVE)
  @javax.annotation.Nullable
  private Integer alertActive;

  public static final String SERIALIZED_NAME_ORDER_TIME = "order_time";
  @SerializedName(SERIALIZED_NAME_ORDER_TIME)
  @javax.annotation.Nullable
  private String orderTime;

  public static final String SERIALIZED_NAME_ALERT_TRIGGERED = "alert_triggered";
  @SerializedName(SERIALIZED_NAME_ALERT_TRIGGERED)
  @javax.annotation.Nullable
  private Boolean alertTriggered;

  public static final String SERIALIZED_NAME_ALERT_REPEATABLE = "alert_repeatable";
  @SerializedName(SERIALIZED_NAME_ALERT_REPEATABLE)
  @javax.annotation.Nullable
  private Integer alertRepeatable;

  public Alert() {
  }

  public Alert orderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The order id (alert id)
   * @return orderId
   */
  @javax.annotation.Nullable
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
  }


  public Alert account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * The account the alert was attributed to.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public Alert alertName(@javax.annotation.Nullable String alertName) {
    this.alertName = alertName;
    return this;
  }

  /**
   * The requested name for the alert.
   * @return alertName
   */
  @javax.annotation.Nullable
  public String getAlertName() {
    return alertName;
  }

  public void setAlertName(@javax.annotation.Nullable String alertName) {
    this.alertName = alertName;
  }


  public Alert alertActive(@javax.annotation.Nullable Integer alertActive) {
    this.alertActive = alertActive;
    return this;
  }

  /**
   * Determines if the alert is active [1] or not [0]
   * @return alertActive
   */
  @javax.annotation.Nullable
  public Integer getAlertActive() {
    return alertActive;
  }

  public void setAlertActive(@javax.annotation.Nullable Integer alertActive) {
    this.alertActive = alertActive;
  }


  public Alert orderTime(@javax.annotation.Nullable String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  /**
   * UTC-formatted time of the alertâ€™s creation.
   * @return orderTime
   */
  @javax.annotation.Nullable
  public String getOrderTime() {
    return orderTime;
  }

  public void setOrderTime(@javax.annotation.Nullable String orderTime) {
    this.orderTime = orderTime;
  }


  public Alert alertTriggered(@javax.annotation.Nullable Boolean alertTriggered) {
    this.alertTriggered = alertTriggered;
    return this;
  }

  /**
   * Confirms if the order is triggered or not.
   * @return alertTriggered
   */
  @javax.annotation.Nullable
  public Boolean getAlertTriggered() {
    return alertTriggered;
  }

  public void setAlertTriggered(@javax.annotation.Nullable Boolean alertTriggered) {
    this.alertTriggered = alertTriggered;
  }


  public Alert alertRepeatable(@javax.annotation.Nullable Integer alertRepeatable) {
    this.alertRepeatable = alertRepeatable;
    return this;
  }

  /**
   * Confirms if the alert is enabled to occur more than once.
   * @return alertRepeatable
   */
  @javax.annotation.Nullable
  public Integer getAlertRepeatable() {
    return alertRepeatable;
  }

  public void setAlertRepeatable(@javax.annotation.Nullable Integer alertRepeatable) {
    this.alertRepeatable = alertRepeatable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.orderId, alert.orderId) &&
        Objects.equals(this.account, alert.account) &&
        Objects.equals(this.alertName, alert.alertName) &&
        Objects.equals(this.alertActive, alert.alertActive) &&
        Objects.equals(this.orderTime, alert.orderTime) &&
        Objects.equals(this.alertTriggered, alert.alertTriggered) &&
        Objects.equals(this.alertRepeatable, alert.alertRepeatable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, account, alertName, alertActive, orderTime, alertTriggered, alertRepeatable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    alertActive: ").append(toIndentedString(alertActive)).append("\n");
    sb.append("    orderTime: ").append(toIndentedString(orderTime)).append("\n");
    sb.append("    alertTriggered: ").append(toIndentedString(alertTriggered)).append("\n");
    sb.append("    alertRepeatable: ").append(toIndentedString(alertRepeatable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("order_id");
    openapiFields.add("account");
    openapiFields.add("alert_name");
    openapiFields.add("alert_active");
    openapiFields.add("order_time");
    openapiFields.add("alert_triggered");
    openapiFields.add("alert_repeatable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alert is not found in the empty JSON string", Alert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("alert_name") != null && !jsonObj.get("alert_name").isJsonNull()) && !jsonObj.get("alert_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert_name").toString()));
      }
      if ((jsonObj.get("order_time") != null && !jsonObj.get("order_time").isJsonNull()) && !jsonObj.get("order_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alert.class));

       return (TypeAdapter<T>) new TypeAdapter<Alert>() {
           @Override
           public void write(JsonWriter out, Alert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alert
   * @throws IOException if the JSON string is invalid with respect to Alert
   */
  public static Alert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alert.class);
  }

  /**
   * Convert an instance of Alert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

