/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StocksValueInnerContractsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a series of objects for each symbol that matches the requested
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class StocksValueInner {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CHINESE_NAME = "chineseName";
  @SerializedName(SERIALIZED_NAME_CHINESE_NAME)
  @javax.annotation.Nullable
  private String chineseName;

  public static final String SERIALIZED_NAME_ASSET_CLASS = "assetClass";
  @SerializedName(SERIALIZED_NAME_ASSET_CLASS)
  @javax.annotation.Nullable
  private String assetClass;

  public static final String SERIALIZED_NAME_CONTRACTS = "contracts";
  @SerializedName(SERIALIZED_NAME_CONTRACTS)
  @javax.annotation.Nullable
  private List<StocksValueInnerContractsInner> contracts = new ArrayList<>();

  public StocksValueInner() {
  }

  public StocksValueInner name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Full company name for the given contract.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public StocksValueInner chineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
    return this;
  }

  /**
   * Chinese name for the given company as unicode.
   * @return chineseName
   */
  @javax.annotation.Nullable
  public String getChineseName() {
    return chineseName;
  }

  public void setChineseName(@javax.annotation.Nullable String chineseName) {
    this.chineseName = chineseName;
  }


  public StocksValueInner assetClass(@javax.annotation.Nullable String assetClass) {
    this.assetClass = assetClass;
    return this;
  }

  /**
   * Asset class for the given company.
   * @return assetClass
   */
  @javax.annotation.Nullable
  public String getAssetClass() {
    return assetClass;
  }

  public void setAssetClass(@javax.annotation.Nullable String assetClass) {
    this.assetClass = assetClass;
  }


  public StocksValueInner contracts(@javax.annotation.Nullable List<StocksValueInnerContractsInner> contracts) {
    this.contracts = contracts;
    return this;
  }

  public StocksValueInner addContractsItem(StocksValueInnerContractsInner contractsItem) {
    if (this.contracts == null) {
      this.contracts = new ArrayList<>();
    }
    this.contracts.add(contractsItem);
    return this;
  }

  /**
   * A series of arrays pertaining to the same company listed by “name”. Typically differentiated based on currency of the primary exchange. 
   * @return contracts
   */
  @javax.annotation.Nullable
  public List<StocksValueInnerContractsInner> getContracts() {
    return contracts;
  }

  public void setContracts(@javax.annotation.Nullable List<StocksValueInnerContractsInner> contracts) {
    this.contracts = contracts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StocksValueInner stocksValueInner = (StocksValueInner) o;
    return Objects.equals(this.name, stocksValueInner.name) &&
        Objects.equals(this.chineseName, stocksValueInner.chineseName) &&
        Objects.equals(this.assetClass, stocksValueInner.assetClass) &&
        Objects.equals(this.contracts, stocksValueInner.contracts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, chineseName, assetClass, contracts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StocksValueInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    chineseName: ").append(toIndentedString(chineseName)).append("\n");
    sb.append("    assetClass: ").append(toIndentedString(assetClass)).append("\n");
    sb.append("    contracts: ").append(toIndentedString(contracts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("chineseName");
    openapiFields.add("assetClass");
    openapiFields.add("contracts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StocksValueInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StocksValueInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StocksValueInner is not found in the empty JSON string", StocksValueInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StocksValueInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StocksValueInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("chineseName") != null && !jsonObj.get("chineseName").isJsonNull()) && !jsonObj.get("chineseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chineseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chineseName").toString()));
      }
      if ((jsonObj.get("assetClass") != null && !jsonObj.get("assetClass").isJsonNull()) && !jsonObj.get("assetClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetClass").toString()));
      }
      if (jsonObj.get("contracts") != null && !jsonObj.get("contracts").isJsonNull()) {
        JsonArray jsonArraycontracts = jsonObj.getAsJsonArray("contracts");
        if (jsonArraycontracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contracts` to be an array in the JSON string but got `%s`", jsonObj.get("contracts").toString()));
          }

          // validate the optional field `contracts` (array)
          for (int i = 0; i < jsonArraycontracts.size(); i++) {
            StocksValueInnerContractsInner.validateJsonElement(jsonArraycontracts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StocksValueInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StocksValueInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StocksValueInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StocksValueInner.class));

       return (TypeAdapter<T>) new TypeAdapter<StocksValueInner>() {
           @Override
           public void write(JsonWriter out, StocksValueInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StocksValueInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StocksValueInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StocksValueInner
   * @throws IOException if the JSON string is invalid with respect to StocksValueInner
   */
  public static StocksValueInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StocksValueInner.class);
  }

  /**
   * Convert an instance of StocksValueInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

