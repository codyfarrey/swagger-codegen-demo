/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalEntityIdentification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class LegalEntityIdentification {
  public static final String SERIALIZED_NAME_PLACE_OF_BUSINESS_ADDRESS = "placeOfBusinessAddress";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BUSINESS_ADDRESS)
  @javax.annotation.Nullable
  private Address placeOfBusinessAddress;

  public static final String SERIALIZED_NAME_MAILING_ADDRESS = "mailingAddress";
  @SerializedName(SERIALIZED_NAME_MAILING_ADDRESS)
  @javax.annotation.Nullable
  private Address mailingAddress;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  @javax.annotation.Nullable
  private String identification;

  public static final String SERIALIZED_NAME_IDENTIFICATION_COUNTRY = "identificationCountry";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_COUNTRY)
  @javax.annotation.Nullable
  private String identificationCountry;

  public static final String SERIALIZED_NAME_FORMATION_COUNTRY = "formationCountry";
  @SerializedName(SERIALIZED_NAME_FORMATION_COUNTRY)
  @javax.annotation.Nullable
  private String formationCountry;

  /**
   * Gets or Sets formationType
   */
  @JsonAdapter(FormationTypeEnum.Adapter.class)
  public enum FormationTypeEnum {
    PUBLIC("PUBLIC"),
    
    PRIVATE("PRIVATE"),
    
    OTHER("OTHER");

    private String value;

    FormationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormationTypeEnum fromValue(String value) {
      for (FormationTypeEnum b : FormationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMATION_TYPE = "formationType";
  @SerializedName(SERIALIZED_NAME_FORMATION_TYPE)
  @javax.annotation.Nullable
  private FormationTypeEnum formationType;

  public static final String SERIALIZED_NAME_EXCHANGE_CODE = "exchangeCode";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_CODE)
  @javax.annotation.Nullable
  private String exchangeCode;

  public static final String SERIALIZED_NAME_EXCHANGE_SYMBOL = "exchangeSymbol";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_SYMBOL)
  @javax.annotation.Nullable
  private String exchangeSymbol;

  public static final String SERIALIZED_NAME_SAME_MAIL_ADDRESS = "sameMailAddress";
  @SerializedName(SERIALIZED_NAME_SAME_MAIL_ADDRESS)
  @javax.annotation.Nullable
  private Boolean sameMailAddress;

  public LegalEntityIdentification() {
  }

  public LegalEntityIdentification placeOfBusinessAddress(@javax.annotation.Nullable Address placeOfBusinessAddress) {
    this.placeOfBusinessAddress = placeOfBusinessAddress;
    return this;
  }

  /**
   * Get placeOfBusinessAddress
   * @return placeOfBusinessAddress
   */
  @javax.annotation.Nullable
  public Address getPlaceOfBusinessAddress() {
    return placeOfBusinessAddress;
  }

  public void setPlaceOfBusinessAddress(@javax.annotation.Nullable Address placeOfBusinessAddress) {
    this.placeOfBusinessAddress = placeOfBusinessAddress;
  }


  public LegalEntityIdentification mailingAddress(@javax.annotation.Nullable Address mailingAddress) {
    this.mailingAddress = mailingAddress;
    return this;
  }

  /**
   * Get mailingAddress
   * @return mailingAddress
   */
  @javax.annotation.Nullable
  public Address getMailingAddress() {
    return mailingAddress;
  }

  public void setMailingAddress(@javax.annotation.Nullable Address mailingAddress) {
    this.mailingAddress = mailingAddress;
  }


  public LegalEntityIdentification identification(@javax.annotation.Nullable String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Get identification
   * @return identification
   */
  @javax.annotation.Nullable
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(@javax.annotation.Nullable String identification) {
    this.identification = identification;
  }


  public LegalEntityIdentification identificationCountry(@javax.annotation.Nullable String identificationCountry) {
    this.identificationCountry = identificationCountry;
    return this;
  }

  /**
   * Get identificationCountry
   * @return identificationCountry
   */
  @javax.annotation.Nullable
  public String getIdentificationCountry() {
    return identificationCountry;
  }

  public void setIdentificationCountry(@javax.annotation.Nullable String identificationCountry) {
    this.identificationCountry = identificationCountry;
  }


  public LegalEntityIdentification formationCountry(@javax.annotation.Nullable String formationCountry) {
    this.formationCountry = formationCountry;
    return this;
  }

  /**
   * Get formationCountry
   * @return formationCountry
   */
  @javax.annotation.Nullable
  public String getFormationCountry() {
    return formationCountry;
  }

  public void setFormationCountry(@javax.annotation.Nullable String formationCountry) {
    this.formationCountry = formationCountry;
  }


  public LegalEntityIdentification formationType(@javax.annotation.Nullable FormationTypeEnum formationType) {
    this.formationType = formationType;
    return this;
  }

  /**
   * Get formationType
   * @return formationType
   */
  @javax.annotation.Nullable
  public FormationTypeEnum getFormationType() {
    return formationType;
  }

  public void setFormationType(@javax.annotation.Nullable FormationTypeEnum formationType) {
    this.formationType = formationType;
  }


  public LegalEntityIdentification exchangeCode(@javax.annotation.Nullable String exchangeCode) {
    this.exchangeCode = exchangeCode;
    return this;
  }

  /**
   * Get exchangeCode
   * @return exchangeCode
   */
  @javax.annotation.Nullable
  public String getExchangeCode() {
    return exchangeCode;
  }

  public void setExchangeCode(@javax.annotation.Nullable String exchangeCode) {
    this.exchangeCode = exchangeCode;
  }


  public LegalEntityIdentification exchangeSymbol(@javax.annotation.Nullable String exchangeSymbol) {
    this.exchangeSymbol = exchangeSymbol;
    return this;
  }

  /**
   * Get exchangeSymbol
   * @return exchangeSymbol
   */
  @javax.annotation.Nullable
  public String getExchangeSymbol() {
    return exchangeSymbol;
  }

  public void setExchangeSymbol(@javax.annotation.Nullable String exchangeSymbol) {
    this.exchangeSymbol = exchangeSymbol;
  }


  public LegalEntityIdentification sameMailAddress(@javax.annotation.Nullable Boolean sameMailAddress) {
    this.sameMailAddress = sameMailAddress;
    return this;
  }

  /**
   * Get sameMailAddress
   * @return sameMailAddress
   */
  @javax.annotation.Nullable
  public Boolean getSameMailAddress() {
    return sameMailAddress;
  }

  public void setSameMailAddress(@javax.annotation.Nullable Boolean sameMailAddress) {
    this.sameMailAddress = sameMailAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityIdentification legalEntityIdentification = (LegalEntityIdentification) o;
    return Objects.equals(this.placeOfBusinessAddress, legalEntityIdentification.placeOfBusinessAddress) &&
        Objects.equals(this.mailingAddress, legalEntityIdentification.mailingAddress) &&
        Objects.equals(this.identification, legalEntityIdentification.identification) &&
        Objects.equals(this.identificationCountry, legalEntityIdentification.identificationCountry) &&
        Objects.equals(this.formationCountry, legalEntityIdentification.formationCountry) &&
        Objects.equals(this.formationType, legalEntityIdentification.formationType) &&
        Objects.equals(this.exchangeCode, legalEntityIdentification.exchangeCode) &&
        Objects.equals(this.exchangeSymbol, legalEntityIdentification.exchangeSymbol) &&
        Objects.equals(this.sameMailAddress, legalEntityIdentification.sameMailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placeOfBusinessAddress, mailingAddress, identification, identificationCountry, formationCountry, formationType, exchangeCode, exchangeSymbol, sameMailAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityIdentification {\n");
    sb.append("    placeOfBusinessAddress: ").append(toIndentedString(placeOfBusinessAddress)).append("\n");
    sb.append("    mailingAddress: ").append(toIndentedString(mailingAddress)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    identificationCountry: ").append(toIndentedString(identificationCountry)).append("\n");
    sb.append("    formationCountry: ").append(toIndentedString(formationCountry)).append("\n");
    sb.append("    formationType: ").append(toIndentedString(formationType)).append("\n");
    sb.append("    exchangeCode: ").append(toIndentedString(exchangeCode)).append("\n");
    sb.append("    exchangeSymbol: ").append(toIndentedString(exchangeSymbol)).append("\n");
    sb.append("    sameMailAddress: ").append(toIndentedString(sameMailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("placeOfBusinessAddress");
    openapiFields.add("mailingAddress");
    openapiFields.add("identification");
    openapiFields.add("identificationCountry");
    openapiFields.add("formationCountry");
    openapiFields.add("formationType");
    openapiFields.add("exchangeCode");
    openapiFields.add("exchangeSymbol");
    openapiFields.add("sameMailAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalEntityIdentification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalEntityIdentification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityIdentification is not found in the empty JSON string", LegalEntityIdentification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalEntityIdentification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalEntityIdentification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `placeOfBusinessAddress`
      if (jsonObj.get("placeOfBusinessAddress") != null && !jsonObj.get("placeOfBusinessAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("placeOfBusinessAddress"));
      }
      // validate the optional field `mailingAddress`
      if (jsonObj.get("mailingAddress") != null && !jsonObj.get("mailingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("mailingAddress"));
      }
      if ((jsonObj.get("identification") != null && !jsonObj.get("identification").isJsonNull()) && !jsonObj.get("identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identification").toString()));
      }
      if ((jsonObj.get("identificationCountry") != null && !jsonObj.get("identificationCountry").isJsonNull()) && !jsonObj.get("identificationCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationCountry").toString()));
      }
      if ((jsonObj.get("formationCountry") != null && !jsonObj.get("formationCountry").isJsonNull()) && !jsonObj.get("formationCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formationCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formationCountry").toString()));
      }
      if ((jsonObj.get("formationType") != null && !jsonObj.get("formationType").isJsonNull()) && !jsonObj.get("formationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formationType").toString()));
      }
      // validate the optional field `formationType`
      if (jsonObj.get("formationType") != null && !jsonObj.get("formationType").isJsonNull()) {
        FormationTypeEnum.validateJsonElement(jsonObj.get("formationType"));
      }
      if ((jsonObj.get("exchangeCode") != null && !jsonObj.get("exchangeCode").isJsonNull()) && !jsonObj.get("exchangeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeCode").toString()));
      }
      if ((jsonObj.get("exchangeSymbol") != null && !jsonObj.get("exchangeSymbol").isJsonNull()) && !jsonObj.get("exchangeSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeSymbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityIdentification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityIdentification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityIdentification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityIdentification.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityIdentification>() {
           @Override
           public void write(JsonWriter out, LegalEntityIdentification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityIdentification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalEntityIdentification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalEntityIdentification
   * @throws IOException if the JSON string is invalid with respect to LegalEntityIdentification
   */
  public static LegalEntityIdentification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityIdentification.class);
  }

  /**
   * Convert an instance of LegalEntityIdentification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

