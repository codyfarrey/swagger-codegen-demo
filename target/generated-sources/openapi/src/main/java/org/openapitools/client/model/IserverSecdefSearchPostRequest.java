/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IserverSecdefSearchPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class IserverSecdefSearchPostRequest {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nonnull
  private String symbol;

  /**
   * Available underlying security types:   * &#x60;STK&#x60; - Represents an underlying as a Stock security type.   * &#x60;IND&#x60; - Represents an underlying as an Index security type.   * &#x60;BOND&#x60; - Represents an underlying as a Bond security type. 
   */
  @JsonAdapter(SecTypeEnum.Adapter.class)
  public enum SecTypeEnum {
    STK("STK"),
    
    IND("IND"),
    
    BOND("BOND");

    private String value;

    SecTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecTypeEnum fromValue(String value) {
      for (SecTypeEnum b : SecTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEC_TYPE = "secType";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private SecTypeEnum secType = SecTypeEnum.STK;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private Boolean name;

  public static final String SERIALIZED_NAME_MORE = "more";
  @SerializedName(SERIALIZED_NAME_MORE)
  @javax.annotation.Nullable
  private Boolean more;

  public static final String SERIALIZED_NAME_FUND = "fund";
  @SerializedName(SERIALIZED_NAME_FUND)
  @javax.annotation.Nullable
  private Boolean fund;

  public static final String SERIALIZED_NAME_FUND_FAMILY_CONID_EX = "fundFamilyConidEx";
  @SerializedName(SERIALIZED_NAME_FUND_FAMILY_CONID_EX)
  @javax.annotation.Nullable
  private String fundFamilyConidEx;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  @javax.annotation.Nullable
  private Boolean pattern;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  @javax.annotation.Nullable
  private String referrer;

  public IserverSecdefSearchPostRequest() {
  }

  public IserverSecdefSearchPostRequest symbol(@javax.annotation.Nonnull String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The ticker symbol, bond issuer type, or company name of the equity you are looking to trade.
   * @return symbol
   */
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nonnull String symbol) {
    this.symbol = symbol;
  }


  public IserverSecdefSearchPostRequest secType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
    return this;
  }

  /**
   * Available underlying security types:   * &#x60;STK&#x60; - Represents an underlying as a Stock security type.   * &#x60;IND&#x60; - Represents an underlying as an Index security type.   * &#x60;BOND&#x60; - Represents an underlying as a Bond security type. 
   * @return secType
   */
  @javax.annotation.Nullable
  public SecTypeEnum getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
  }


  public IserverSecdefSearchPostRequest name(@javax.annotation.Nullable Boolean name) {
    this.name = name;
    return this;
  }

  /**
   * Denotes if the symbol value is the ticker symbol or part of the company&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public Boolean getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable Boolean name) {
    this.name = name;
  }


  public IserverSecdefSearchPostRequest more(@javax.annotation.Nullable Boolean more) {
    this.more = more;
    return this;
  }

  /**
   * Get more
   * @return more
   */
  @javax.annotation.Nullable
  public Boolean getMore() {
    return more;
  }

  public void setMore(@javax.annotation.Nullable Boolean more) {
    this.more = more;
  }


  public IserverSecdefSearchPostRequest fund(@javax.annotation.Nullable Boolean fund) {
    this.fund = fund;
    return this;
  }

  /**
   * fund search
   * @return fund
   */
  @javax.annotation.Nullable
  public Boolean getFund() {
    return fund;
  }

  public void setFund(@javax.annotation.Nullable Boolean fund) {
    this.fund = fund;
  }


  public IserverSecdefSearchPostRequest fundFamilyConidEx(@javax.annotation.Nullable String fundFamilyConidEx) {
    this.fundFamilyConidEx = fundFamilyConidEx;
    return this;
  }

  /**
   * Get fundFamilyConidEx
   * @return fundFamilyConidEx
   */
  @javax.annotation.Nullable
  public String getFundFamilyConidEx() {
    return fundFamilyConidEx;
  }

  public void setFundFamilyConidEx(@javax.annotation.Nullable String fundFamilyConidEx) {
    this.fundFamilyConidEx = fundFamilyConidEx;
  }


  public IserverSecdefSearchPostRequest pattern(@javax.annotation.Nullable Boolean pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * pattern search
   * @return pattern
   */
  @javax.annotation.Nullable
  public Boolean getPattern() {
    return pattern;
  }

  public void setPattern(@javax.annotation.Nullable Boolean pattern) {
    this.pattern = pattern;
  }


  public IserverSecdefSearchPostRequest referrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Get referrer
   * @return referrer
   */
  @javax.annotation.Nullable
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IserverSecdefSearchPostRequest iserverSecdefSearchPostRequest = (IserverSecdefSearchPostRequest) o;
    return Objects.equals(this.symbol, iserverSecdefSearchPostRequest.symbol) &&
        Objects.equals(this.secType, iserverSecdefSearchPostRequest.secType) &&
        Objects.equals(this.name, iserverSecdefSearchPostRequest.name) &&
        Objects.equals(this.more, iserverSecdefSearchPostRequest.more) &&
        Objects.equals(this.fund, iserverSecdefSearchPostRequest.fund) &&
        Objects.equals(this.fundFamilyConidEx, iserverSecdefSearchPostRequest.fundFamilyConidEx) &&
        Objects.equals(this.pattern, iserverSecdefSearchPostRequest.pattern) &&
        Objects.equals(this.referrer, iserverSecdefSearchPostRequest.referrer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, secType, name, more, fund, fundFamilyConidEx, pattern, referrer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IserverSecdefSearchPostRequest {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    more: ").append(toIndentedString(more)).append("\n");
    sb.append("    fund: ").append(toIndentedString(fund)).append("\n");
    sb.append("    fundFamilyConidEx: ").append(toIndentedString(fundFamilyConidEx)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("symbol");
    openapiFields.add("secType");
    openapiFields.add("name");
    openapiFields.add("more");
    openapiFields.add("fund");
    openapiFields.add("fundFamilyConidEx");
    openapiFields.add("pattern");
    openapiFields.add("referrer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("symbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IserverSecdefSearchPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IserverSecdefSearchPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IserverSecdefSearchPostRequest is not found in the empty JSON string", IserverSecdefSearchPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IserverSecdefSearchPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IserverSecdefSearchPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IserverSecdefSearchPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) && !jsonObj.get("secType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secType").toString()));
      }
      // validate the optional field `secType`
      if (jsonObj.get("secType") != null && !jsonObj.get("secType").isJsonNull()) {
        SecTypeEnum.validateJsonElement(jsonObj.get("secType"));
      }
      if ((jsonObj.get("fundFamilyConidEx") != null && !jsonObj.get("fundFamilyConidEx").isJsonNull()) && !jsonObj.get("fundFamilyConidEx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundFamilyConidEx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundFamilyConidEx").toString()));
      }
      if ((jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IserverSecdefSearchPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IserverSecdefSearchPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IserverSecdefSearchPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IserverSecdefSearchPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IserverSecdefSearchPostRequest>() {
           @Override
           public void write(JsonWriter out, IserverSecdefSearchPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IserverSecdefSearchPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IserverSecdefSearchPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IserverSecdefSearchPostRequest
   * @throws IOException if the JSON string is invalid with respect to IserverSecdefSearchPostRequest
   */
  public static IserverSecdefSearchPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IserverSecdefSearchPostRequest.class);
  }

  /**
   * Convert an instance of IserverSecdefSearchPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

