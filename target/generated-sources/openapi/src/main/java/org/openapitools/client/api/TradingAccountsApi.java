/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountSummaryResponse;
import org.openapitools.client.model.AvailableFundsResponse;
import org.openapitools.client.model.DynAccountSearchResponse;
import org.openapitools.client.model.ErrorOnlyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.IserverAccountPostRequest;
import org.openapitools.client.model.IserverDynaccountPostRequest;
import org.openapitools.client.model.PnlPartitionedResponse;
import org.openapitools.client.model.SetAccountResponse;
import org.openapitools.client.model.SignatureAndOwners;
import org.openapitools.client.model.SummaryMarketValueResponse;
import org.openapitools.client.model.SummaryOfAccountBalancesResponse;
import org.openapitools.client.model.SummaryOfAccountMarginResponse;
import org.openapitools.client.model.UserAccountsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradingAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TradingAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradingAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aceswsAccountIdSignaturesAndOwnersGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; accountId is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aceswsAccountIdSignaturesAndOwnersGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/acesws/{accountId}/signatures-and-owners"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aceswsAccountIdSignaturesAndOwnersGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling aceswsAccountIdSignaturesAndOwnersGet(Async)");
        }

        return aceswsAccountIdSignaturesAndOwnersGetCall(accountId, _callback);

    }

    /**
     * Signatures And Owners
     * Receive a list of all applicant names on the account and for which account and entity is represented.
     * @param accountId  (required)
     * @return SignatureAndOwners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; accountId is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SignatureAndOwners aceswsAccountIdSignaturesAndOwnersGet(String accountId) throws ApiException {
        ApiResponse<SignatureAndOwners> localVarResp = aceswsAccountIdSignaturesAndOwnersGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Signatures And Owners
     * Receive a list of all applicant names on the account and for which account and entity is represented.
     * @param accountId  (required)
     * @return ApiResponse&lt;SignatureAndOwners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; accountId is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignatureAndOwners> aceswsAccountIdSignaturesAndOwnersGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = aceswsAccountIdSignaturesAndOwnersGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SignatureAndOwners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Signatures And Owners (asynchronously)
     * Receive a list of all applicant names on the account and for which account and entity is represented.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; accountId is empty </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aceswsAccountIdSignaturesAndOwnersGetAsync(String accountId, final ApiCallback<SignatureAndOwners> _callback) throws ApiException {

        okhttp3.Call localVarCall = aceswsAccountIdSignaturesAndOwnersGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SignatureAndOwners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdSummaryAvailableFundsGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryAvailableFundsGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/summary/available_funds"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdSummaryAvailableFundsGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdSummaryAvailableFundsGet(Async)");
        }

        return iserverAccountAccountIdSummaryAvailableFundsGetCall(accountId, _callback);

    }

    /**
     * Summary Of Available Funds
     * Provides a summary specific for avilable funds giving more depth than the standard /summary endpoint.
     * @param accountId  (required)
     * @return AvailableFundsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public AvailableFundsResponse iserverAccountAccountIdSummaryAvailableFundsGet(String accountId) throws ApiException {
        ApiResponse<AvailableFundsResponse> localVarResp = iserverAccountAccountIdSummaryAvailableFundsGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Summary Of Available Funds
     * Provides a summary specific for avilable funds giving more depth than the standard /summary endpoint.
     * @param accountId  (required)
     * @return ApiResponse&lt;AvailableFundsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailableFundsResponse> iserverAccountAccountIdSummaryAvailableFundsGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryAvailableFundsGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AvailableFundsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Of Available Funds (asynchronously)
     * Provides a summary specific for avilable funds giving more depth than the standard /summary endpoint.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryAvailableFundsGetAsync(String accountId, final ApiCallback<AvailableFundsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryAvailableFundsGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AvailableFundsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdSummaryBalancesGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryBalancesGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/summary/balances"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdSummaryBalancesGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdSummaryBalancesGet(Async)");
        }

        return iserverAccountAccountIdSummaryBalancesGetCall(accountId, _callback);

    }

    /**
     * Summary Of Account Balances
     * 
     * @param accountId  (required)
     * @return SummaryOfAccountBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SummaryOfAccountBalancesResponse iserverAccountAccountIdSummaryBalancesGet(String accountId) throws ApiException {
        ApiResponse<SummaryOfAccountBalancesResponse> localVarResp = iserverAccountAccountIdSummaryBalancesGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Summary Of Account Balances
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;SummaryOfAccountBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryOfAccountBalancesResponse> iserverAccountAccountIdSummaryBalancesGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryBalancesGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SummaryOfAccountBalancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Of Account Balances (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful return of available funds. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryBalancesGetAsync(String accountId, final ApiCallback<SummaryOfAccountBalancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryBalancesGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SummaryOfAccountBalancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdSummaryGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides a general overview of the account details such as balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/summary"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdSummaryGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdSummaryGet(Async)");
        }

        return iserverAccountAccountIdSummaryGetCall(accountId, _callback);

    }

    /**
     * General Account Summary
     * Provides a general overview of the account details such as balance values.
     * @param accountId  (required)
     * @return AccountSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides a general overview of the account details such as balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public AccountSummaryResponse iserverAccountAccountIdSummaryGet(String accountId) throws ApiException {
        ApiResponse<AccountSummaryResponse> localVarResp = iserverAccountAccountIdSummaryGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * General Account Summary
     * Provides a general overview of the account details such as balance values.
     * @param accountId  (required)
     * @return ApiResponse&lt;AccountSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides a general overview of the account details such as balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSummaryResponse> iserverAccountAccountIdSummaryGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * General Account Summary (asynchronously)
     * Provides a general overview of the account details such as balance values.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides a general overview of the account details such as balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryGetAsync(String accountId, final ApiCallback<AccountSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdSummaryMarginsGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a success request to receive margin balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryMarginsGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/summary/margins"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdSummaryMarginsGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdSummaryMarginsGet(Async)");
        }

        return iserverAccountAccountIdSummaryMarginsGetCall(accountId, _callback);

    }

    /**
     * Summary Of Account Margin
     * 
     * @param accountId  (required)
     * @return SummaryOfAccountMarginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a success request to receive margin balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SummaryOfAccountMarginResponse iserverAccountAccountIdSummaryMarginsGet(String accountId) throws ApiException {
        ApiResponse<SummaryOfAccountMarginResponse> localVarResp = iserverAccountAccountIdSummaryMarginsGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Summary Of Account Margin
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;SummaryOfAccountMarginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a success request to receive margin balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryOfAccountMarginResponse> iserverAccountAccountIdSummaryMarginsGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryMarginsGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SummaryOfAccountMarginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Of Account Margin (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a success request to receive margin balance values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryMarginsGetAsync(String accountId, final ApiCallback<SummaryOfAccountMarginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryMarginsGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SummaryOfAccountMarginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountAccountIdSummaryMarketValueGet
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful market value request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryMarketValueGetCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/{accountId}/summary/market_value"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountAccountIdSummaryMarketValueGetValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling iserverAccountAccountIdSummaryMarketValueGet(Async)");
        }

        return iserverAccountAccountIdSummaryMarketValueGetCall(accountId, _callback);

    }

    /**
     * Summary Of Account&#39;s Market Value
     * 
     * @param accountId  (required)
     * @return SummaryMarketValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful market value request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SummaryMarketValueResponse iserverAccountAccountIdSummaryMarketValueGet(String accountId) throws ApiException {
        ApiResponse<SummaryMarketValueResponse> localVarResp = iserverAccountAccountIdSummaryMarketValueGetWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Summary Of Account&#39;s Market Value
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;SummaryMarketValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful market value request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SummaryMarketValueResponse> iserverAccountAccountIdSummaryMarketValueGetWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryMarketValueGetValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<SummaryMarketValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Of Account&#39;s Market Value (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates a successful market value request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountAccountIdSummaryMarketValueGetAsync(String accountId, final ApiCallback<SummaryMarketValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountAccountIdSummaryMarketValueGetValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<SummaryMarketValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountPnlPartitionedGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refers to “updated PnL”. Holds a json object of key-value paired pnl details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountPnlPartitionedGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/pnl/partitioned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json; charset=utf-8",
            "text/plain; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountPnlPartitionedGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverAccountPnlPartitionedGetCall(_callback);

    }

    /**
     * Account Profit And Loss
     * 
     * @return PnlPartitionedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refers to “updated PnL”. Holds a json object of key-value paired pnl details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public PnlPartitionedResponse iserverAccountPnlPartitionedGet() throws ApiException {
        ApiResponse<PnlPartitionedResponse> localVarResp = iserverAccountPnlPartitionedGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Account Profit And Loss
     * 
     * @return ApiResponse&lt;PnlPartitionedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refers to “updated PnL”. Holds a json object of key-value paired pnl details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PnlPartitionedResponse> iserverAccountPnlPartitionedGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverAccountPnlPartitionedGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PnlPartitionedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account Profit And Loss (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Refers to “updated PnL”. Holds a json object of key-value paired pnl details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request; passed input cannot pass initial validation and detected right away </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountPnlPartitionedGetAsync(final ApiCallback<PnlPartitionedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountPnlPartitionedGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PnlPartitionedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountPost
     * @param iserverAccountPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validates the account swapped to. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example accountId is not correct  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountPostCall(IserverAccountPostRequest iserverAccountPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverAccountPostRequest;

        // create path and map variables
        String localVarPath = "/iserver/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountPostValidateBeforeCall(IserverAccountPostRequest iserverAccountPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iserverAccountPostRequest' is set
        if (iserverAccountPostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverAccountPostRequest' when calling iserverAccountPost(Async)");
        }

        return iserverAccountPostCall(iserverAccountPostRequest, _callback);

    }

    /**
     * Switch Account
     * Switch the active account for how you request data. Only available for financial advisors and multi-account structures. 
     * @param iserverAccountPostRequest  (required)
     * @return SetAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validates the account swapped to. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example accountId is not correct  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SetAccountResponse iserverAccountPost(IserverAccountPostRequest iserverAccountPostRequest) throws ApiException {
        ApiResponse<SetAccountResponse> localVarResp = iserverAccountPostWithHttpInfo(iserverAccountPostRequest);
        return localVarResp.getData();
    }

    /**
     * Switch Account
     * Switch the active account for how you request data. Only available for financial advisors and multi-account structures. 
     * @param iserverAccountPostRequest  (required)
     * @return ApiResponse&lt;SetAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validates the account swapped to. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example accountId is not correct  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetAccountResponse> iserverAccountPostWithHttpInfo(IserverAccountPostRequest iserverAccountPostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountPostValidateBeforeCall(iserverAccountPostRequest, null);
        Type localVarReturnType = new TypeToken<SetAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Switch Account (asynchronously)
     * Switch the active account for how you request data. Only available for financial advisors and multi-account structures. 
     * @param iserverAccountPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validates the account swapped to. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Unable to process request if incoming values are not valid. For example accountId is not correct  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountPostAsync(IserverAccountPostRequest iserverAccountPostRequest, final ApiCallback<SetAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountPostValidateBeforeCall(iserverAccountPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SetAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountSearchSearchPatternGet
     * @param searchPattern  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all accounts that match the searchPattern string. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountSearchSearchPatternGetCall(String searchPattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.ibkr.com/v1/api", "https://api.ibkr.com/alpha/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/account/search/{searchPattern}"
            .replace("{" + "searchPattern" + "}", localVarApiClient.escapeString(searchPattern.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountSearchSearchPatternGetValidateBeforeCall(String searchPattern, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchPattern' is set
        if (searchPattern == null) {
            throw new ApiException("Missing the required parameter 'searchPattern' when calling iserverAccountSearchSearchPatternGet(Async)");
        }

        return iserverAccountSearchSearchPatternGetCall(searchPattern, _callback);

    }

    /**
     * Search Dynamic Account
     * Returns a list of accounts matching a query pattern set in the request. Broker accounts configured with the DYNACCT property will not receive account information at login. Instead, they must dynamically query then set their account number. Customers without the DYNACCT property will receive a 503 error. 
     * @param searchPattern  (required)
     * @return DynAccountSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all accounts that match the searchPattern string. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public DynAccountSearchResponse iserverAccountSearchSearchPatternGet(String searchPattern) throws ApiException {
        ApiResponse<DynAccountSearchResponse> localVarResp = iserverAccountSearchSearchPatternGetWithHttpInfo(searchPattern);
        return localVarResp.getData();
    }

    /**
     * Search Dynamic Account
     * Returns a list of accounts matching a query pattern set in the request. Broker accounts configured with the DYNACCT property will not receive account information at login. Instead, they must dynamically query then set their account number. Customers without the DYNACCT property will receive a 503 error. 
     * @param searchPattern  (required)
     * @return ApiResponse&lt;DynAccountSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all accounts that match the searchPattern string. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynAccountSearchResponse> iserverAccountSearchSearchPatternGetWithHttpInfo(String searchPattern) throws ApiException {
        okhttp3.Call localVarCall = iserverAccountSearchSearchPatternGetValidateBeforeCall(searchPattern, null);
        Type localVarReturnType = new TypeToken<DynAccountSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Dynamic Account (asynchronously)
     * Returns a list of accounts matching a query pattern set in the request. Broker accounts configured with the DYNACCT property will not receive account information at login. Instead, they must dynamically query then set their account number. Customers without the DYNACCT property will receive a 503 error. 
     * @param searchPattern  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all accounts that match the searchPattern string. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountSearchSearchPatternGetAsync(String searchPattern, final ApiCallback<DynAccountSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountSearchSearchPatternGetValidateBeforeCall(searchPattern, _callback);
        Type localVarReturnType = new TypeToken<DynAccountSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverAccountsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iserver/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverAccountsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return iserverAccountsGetCall(_callback);

    }

    /**
     * Receive Brokerage Accounts For The Current User.
     * Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
     * @return UserAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public UserAccountsResponse iserverAccountsGet() throws ApiException {
        ApiResponse<UserAccountsResponse> localVarResp = iserverAccountsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Receive Brokerage Accounts For The Current User.
     * Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
     * @return ApiResponse&lt;UserAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccountsResponse> iserverAccountsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = iserverAccountsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Receive Brokerage Accounts For The Current User. (asynchronously)
     * Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing valid accounts and the account properties regarding trading access. This endpoint is also used to confirm account validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverAccountsGetAsync(final ApiCallback<UserAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverAccountsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iserverDynaccountPost
     * @param iserverDynaccountPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverDynaccountPostCall(IserverDynaccountPostRequest iserverDynaccountPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iserverDynaccountPostRequest;

        // create path and map variables
        String localVarPath = "/iserver/dynaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iserverDynaccountPostValidateBeforeCall(IserverDynaccountPostRequest iserverDynaccountPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iserverDynaccountPostRequest' is set
        if (iserverDynaccountPostRequest == null) {
            throw new ApiException("Missing the required parameter 'iserverDynaccountPostRequest' when calling iserverDynaccountPost(Async)");
        }

        return iserverDynaccountPostCall(iserverDynaccountPostRequest, _callback);

    }

    /**
     * Set Dynamic Account
     * Set the active dynamic account.
     * @param iserverDynaccountPostRequest  (required)
     * @return SetAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public SetAccountResponse iserverDynaccountPost(IserverDynaccountPostRequest iserverDynaccountPostRequest) throws ApiException {
        ApiResponse<SetAccountResponse> localVarResp = iserverDynaccountPostWithHttpInfo(iserverDynaccountPostRequest);
        return localVarResp.getData();
    }

    /**
     * Set Dynamic Account
     * Set the active dynamic account.
     * @param iserverDynaccountPostRequest  (required)
     * @return ApiResponse&lt;SetAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetAccountResponse> iserverDynaccountPostWithHttpInfo(IserverDynaccountPostRequest iserverDynaccountPostRequest) throws ApiException {
        okhttp3.Call localVarCall = iserverDynaccountPostValidateBeforeCall(iserverDynaccountPostRequest, null);
        Type localVarReturnType = new TypeToken<SetAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Dynamic Account (asynchronously)
     * Set the active dynamic account.
     * @param iserverDynaccountPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of objects detailing contract information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error, returned when incoming request cannot be processed. It can sometimes include subset of bad requests.  For example, wrong accountId passed and it can only be detected later in handling request. Error contains reason of the problem.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> service is unavailable. For example if request takes more than 10s due to some internal service unavailability,  request aborted and this status returned  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iserverDynaccountPostAsync(IserverDynaccountPostRequest iserverDynaccountPostRequest, final ApiCallback<SetAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iserverDynaccountPostValidateBeforeCall(iserverDynaccountPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SetAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
