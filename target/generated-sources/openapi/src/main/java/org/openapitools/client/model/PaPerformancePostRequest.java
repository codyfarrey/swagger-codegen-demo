/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaPerformancePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PaPerformancePostRequest {
  public static final String SERIALIZED_NAME_ACCT_IDS = "acctIds";
  @SerializedName(SERIALIZED_NAME_ACCT_IDS)
  @javax.annotation.Nullable
  private List<String> acctIds = new ArrayList<>();

  /**
   * Specify the period for which the account should be analyzed. Available period lengths:   * &#x60;1D&#x60; - The last 24 hours.   * &#x60;7D&#x60; - The last 7 full days.   * &#x60;MTD&#x60; - Performance since the 1st of the month.   * &#x60;1M&#x60; - A full calendar month from the last full trade day.   * &#x60;3M&#x60; - 3 full calendar months from the last full trade day.   * &#x60;6M&#x60; - 6 full calendar months from the last full trade day.   * &#x60;12M&#x60; - 12 full calendar month from the last full trade day.   * &#x60;YTD&#x60; - Performance since January 1st. 
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
  public enum PeriodEnum {
    _1_D("1D"),
    
    _7_D("7D"),
    
    MTD("MTD"),
    
    _1_M("1M"),
    
    _3_M("3M"),
    
    _6_M("6M"),
    
    _12_M("12M"),
    
    YTD("YTD");

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String value) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  @javax.annotation.Nullable
  private PeriodEnum period = PeriodEnum._12_M;

  public PaPerformancePostRequest() {
  }

  public PaPerformancePostRequest acctIds(@javax.annotation.Nullable List<String> acctIds) {
    this.acctIds = acctIds;
    return this;
  }

  public PaPerformancePostRequest addAcctIdsItem(String acctIdsItem) {
    if (this.acctIds == null) {
      this.acctIds = new ArrayList<>();
    }
    this.acctIds.add(acctIdsItem);
    return this;
  }

  /**
   * An array of strings containing each account identifier to retrieve performance details for.
   * @return acctIds
   */
  @javax.annotation.Nullable
  public List<String> getAcctIds() {
    return acctIds;
  }

  public void setAcctIds(@javax.annotation.Nullable List<String> acctIds) {
    this.acctIds = acctIds;
  }


  public PaPerformancePostRequest period(@javax.annotation.Nullable PeriodEnum period) {
    this.period = period;
    return this;
  }

  /**
   * Specify the period for which the account should be analyzed. Available period lengths:   * &#x60;1D&#x60; - The last 24 hours.   * &#x60;7D&#x60; - The last 7 full days.   * &#x60;MTD&#x60; - Performance since the 1st of the month.   * &#x60;1M&#x60; - A full calendar month from the last full trade day.   * &#x60;3M&#x60; - 3 full calendar months from the last full trade day.   * &#x60;6M&#x60; - 6 full calendar months from the last full trade day.   * &#x60;12M&#x60; - 12 full calendar month from the last full trade day.   * &#x60;YTD&#x60; - Performance since January 1st. 
   * @return period
   */
  @javax.annotation.Nullable
  public PeriodEnum getPeriod() {
    return period;
  }

  public void setPeriod(@javax.annotation.Nullable PeriodEnum period) {
    this.period = period;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaPerformancePostRequest paPerformancePostRequest = (PaPerformancePostRequest) o;
    return Objects.equals(this.acctIds, paPerformancePostRequest.acctIds) &&
        Objects.equals(this.period, paPerformancePostRequest.period);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctIds, period);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaPerformancePostRequest {\n");
    sb.append("    acctIds: ").append(toIndentedString(acctIds)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctIds");
    openapiFields.add("period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaPerformancePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaPerformancePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaPerformancePostRequest is not found in the empty JSON string", PaPerformancePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaPerformancePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaPerformancePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("acctIds") != null && !jsonObj.get("acctIds").isJsonNull() && !jsonObj.get("acctIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctIds` to be an array in the JSON string but got `%s`", jsonObj.get("acctIds").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      // validate the optional field `period`
      if (jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) {
        PeriodEnum.validateJsonElement(jsonObj.get("period"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaPerformancePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaPerformancePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaPerformancePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaPerformancePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaPerformancePostRequest>() {
           @Override
           public void write(JsonWriter out, PaPerformancePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaPerformancePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaPerformancePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaPerformancePostRequest
   * @throws IOException if the JSON string is invalid with respect to PaPerformancePostRequest
   */
  public static PaPerformancePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaPerformancePostRequest.class);
  }

  /**
   * Convert an instance of PaPerformancePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

