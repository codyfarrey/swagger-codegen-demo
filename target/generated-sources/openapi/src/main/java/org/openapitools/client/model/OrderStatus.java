/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object containing information about the status of an order ticket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class OrderStatus {
  public static final String SERIALIZED_NAME_SUB_TYPE = "sub_type";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  @javax.annotation.Nullable
  private String subType;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  @javax.annotation.Nullable
  private String requestId;

  public static final String SERIALIZED_NAME_SERVER_ID = "server_id";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  @javax.annotation.Nullable
  private String serverId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private Integer orderId;

  public static final String SERIALIZED_NAME_CONIDEX = "conidex";
  @SerializedName(SERIALIZED_NAME_CONIDEX)
  @javax.annotation.Nullable
  private String conidex;

  public static final String SERIALIZED_NAME_CONID = "conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  @javax.annotation.Nullable
  private String conid;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  /**
   * Side of the order ticket.
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    BUY("BUY"),
    
    SELL("SELL");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  @javax.annotation.Nullable
  private SideEnum side;

  public static final String SERIALIZED_NAME_CONTRACT_DESCRIPTION1 = "contract_description_1";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DESCRIPTION1)
  @javax.annotation.Nullable
  private String contractDescription1;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listing_exchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  @javax.annotation.Nullable
  private String listingExchange;

  public static final String SERIALIZED_NAME_OPTION_ACCT = "option_acct";
  @SerializedName(SERIALIZED_NAME_OPTION_ACCT)
  @javax.annotation.Nullable
  private String optionAcct;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private String size;

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "total_size";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  @javax.annotation.Nullable
  private String totalSize;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "order_type";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  @javax.annotation.Nullable
  private String orderType;

  public static final String SERIALIZED_NAME_CUM_FILL = "cum_fill";
  @SerializedName(SERIALIZED_NAME_CUM_FILL)
  @javax.annotation.Nullable
  private String cumFill;

  /**
   * Status of the order ticket.
   */
  @JsonAdapter(OrderStatusEnum.Adapter.class)
  public enum OrderStatusEnum {
    INACTIVE("Inactive"),
    
    PENDING_SUBMIT("PendingSubmit"),
    
    PRE_SUBMITTED("PreSubmitted"),
    
    SUBMITTED("Submitted"),
    
    FILLED("Filled"),
    
    PENDING_CANCEL("PendingCancel"),
    
    CANCELLED("Cancelled"),
    
    WARN_STATE("WarnState");

    private String value;

    OrderStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderStatusEnum fromValue(String value) {
      for (OrderStatusEnum b : OrderStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_STATUS = "order_status";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
  @javax.annotation.Nullable
  private OrderStatusEnum orderStatus;

  public static final String SERIALIZED_NAME_ORDER_CCP_STATUS = "order_ccp_status";
  @SerializedName(SERIALIZED_NAME_ORDER_CCP_STATUS)
  @javax.annotation.Nullable
  private String orderCcpStatus;

  public static final String SERIALIZED_NAME_ORDER_STATUS_DESCRIPTION = "order_status_description";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS_DESCRIPTION)
  @javax.annotation.Nullable
  private String orderStatusDescription;

  /**
   * Time in force of the order ticket.
   */
  @JsonAdapter(TifEnum.Adapter.class)
  public enum TifEnum {
    DAY("DAY"),
    
    IOC("IOC"),
    
    GTC("GTC"),
    
    OPG("OPG"),
    
    PAX("PAX");

    private String value;

    TifEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TifEnum fromValue(String value) {
      for (TifEnum b : TifEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TifEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TifEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TifEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TifEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TifEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIF = "tif";
  @SerializedName(SERIALIZED_NAME_TIF)
  @javax.annotation.Nullable
  private TifEnum tif;

  public static final String SERIALIZED_NAME_FG_COLOR = "fgColor";
  @SerializedName(SERIALIZED_NAME_FG_COLOR)
  @javax.annotation.Nullable
  private String fgColor;

  public static final String SERIALIZED_NAME_BG_COLOR = "bgColor";
  @SerializedName(SERIALIZED_NAME_BG_COLOR)
  @javax.annotation.Nullable
  private String bgColor;

  public static final String SERIALIZED_NAME_ORDER_NOT_EDITABLE = "order_not_editable";
  @SerializedName(SERIALIZED_NAME_ORDER_NOT_EDITABLE)
  @javax.annotation.Nullable
  private Boolean orderNotEditable;

  public static final String SERIALIZED_NAME_EDITABLE_FIELDS = "editable_fields";
  @SerializedName(SERIALIZED_NAME_EDITABLE_FIELDS)
  @javax.annotation.Nullable
  private String editableFields;

  public static final String SERIALIZED_NAME_CANNOT_CANCEL_ORDER = "cannot_cancel_order";
  @SerializedName(SERIALIZED_NAME_CANNOT_CANCEL_ORDER)
  @javax.annotation.Nullable
  private Boolean cannotCancelOrder;

  public static final String SERIALIZED_NAME_DEACTIVATE_ORDER = "deactivate_order";
  @SerializedName(SERIALIZED_NAME_DEACTIVATE_ORDER)
  @javax.annotation.Nullable
  private Boolean deactivateOrder;

  /**
   * IB asset class identifier.
   */
  @JsonAdapter(SecTypeEnum.Adapter.class)
  public enum SecTypeEnum {
    STK("STK"),
    
    OPT("OPT"),
    
    FUT("FUT"),
    
    FOP("FOP"),
    
    CASH("CASH"),
    
    CRYPTO("CRYPTO"),
    
    BOND("BOND"),
    
    WAR("WAR"),
    
    FUND("FUND");

    private String value;

    SecTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecTypeEnum fromValue(String value) {
      for (SecTypeEnum b : SecTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEC_TYPE = "sec_type";
  @SerializedName(SERIALIZED_NAME_SEC_TYPE)
  @javax.annotation.Nullable
  private SecTypeEnum secType;

  public static final String SERIALIZED_NAME_AVAILABLE_CHART_PERIODS = "available_chart_periods";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CHART_PERIODS)
  @javax.annotation.Nullable
  private String availableChartPeriods;

  public static final String SERIALIZED_NAME_ORDER_DESCRIPTION = "order_description";
  @SerializedName(SERIALIZED_NAME_ORDER_DESCRIPTION)
  @javax.annotation.Nullable
  private String orderDescription;

  public static final String SERIALIZED_NAME_ORDER_DESCRIPTION_WITH_CONTRACT = "order_description_with_contract";
  @SerializedName(SERIALIZED_NAME_ORDER_DESCRIPTION_WITH_CONTRACT)
  @javax.annotation.Nullable
  private String orderDescriptionWithContract;

  public static final String SERIALIZED_NAME_ALERT_ACTIVE = "alert_active";
  @SerializedName(SERIALIZED_NAME_ALERT_ACTIVE)
  @javax.annotation.Nullable
  private Integer alertActive;

  /**
   * Indicates if the order ticket is hedged, and if so, in what way. 0 &#x3D; No hedge, A &#x3D; Attached child hedge order, B &#x3D; Beta/portfolio hedge
   */
  @JsonAdapter(ChildOrderTypeEnum.Adapter.class)
  public enum ChildOrderTypeEnum {
    _0("0"),
    
    A("A"),
    
    B("B");

    private String value;

    ChildOrderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChildOrderTypeEnum fromValue(String value) {
      for (ChildOrderTypeEnum b : ChildOrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChildOrderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChildOrderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChildOrderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChildOrderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChildOrderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHILD_ORDER_TYPE = "child_order_type";
  @SerializedName(SERIALIZED_NAME_CHILD_ORDER_TYPE)
  @javax.annotation.Nullable
  private ChildOrderTypeEnum childOrderType;

  public static final String SERIALIZED_NAME_ORDER_CLEARING_ACCOUNT = "order_clearing_account";
  @SerializedName(SERIALIZED_NAME_ORDER_CLEARING_ACCOUNT)
  @javax.annotation.Nullable
  private String orderClearingAccount;

  public static final String SERIALIZED_NAME_SIZE_AND_FILLS = "size_and_fills";
  @SerializedName(SERIALIZED_NAME_SIZE_AND_FILLS)
  @javax.annotation.Nullable
  private String sizeAndFills;

  public static final String SERIALIZED_NAME_EXIT_STRATEGY_DISPLAY_PRICE = "exit_strategy_display_price";
  @SerializedName(SERIALIZED_NAME_EXIT_STRATEGY_DISPLAY_PRICE)
  @javax.annotation.Nullable
  private String exitStrategyDisplayPrice;

  public static final String SERIALIZED_NAME_EXIT_STRATEGY_CHART_DESCRIPTION = "exit_strategy_chart_description";
  @SerializedName(SERIALIZED_NAME_EXIT_STRATEGY_CHART_DESCRIPTION)
  @javax.annotation.Nullable
  private String exitStrategyChartDescription;

  public static final String SERIALIZED_NAME_AVERAGE_PRICE = "average_price";
  @SerializedName(SERIALIZED_NAME_AVERAGE_PRICE)
  @javax.annotation.Nullable
  private String averagePrice;

  public static final String SERIALIZED_NAME_EXIT_STRATEGY_TOOL_AVAILABILITY = "exit_strategy_tool_availability";
  @SerializedName(SERIALIZED_NAME_EXIT_STRATEGY_TOOL_AVAILABILITY)
  @javax.annotation.Nullable
  private String exitStrategyToolAvailability;

  public static final String SERIALIZED_NAME_ALLOWED_DUPLICATE_OPPOSITE = "allowed_duplicate_opposite";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DUPLICATE_OPPOSITE)
  @javax.annotation.Nullable
  private Boolean allowedDuplicateOpposite;

  public static final String SERIALIZED_NAME_ORDER_TIME = "order_time";
  @SerializedName(SERIALIZED_NAME_ORDER_TIME)
  @javax.annotation.Nullable
  private String orderTime;

  public OrderStatus() {
  }

  public OrderStatus subType(@javax.annotation.Nullable String subType) {
    this.subType = subType;
    return this;
  }

  /**
   * Internal use only.
   * @return subType
   */
  @javax.annotation.Nullable
  public String getSubType() {
    return subType;
  }

  public void setSubType(@javax.annotation.Nullable String subType) {
    this.subType = subType;
  }


  public OrderStatus requestId(@javax.annotation.Nullable String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Internal use only. IB-assigned identifier for the status request.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(@javax.annotation.Nullable String requestId) {
    this.requestId = requestId;
  }


  public OrderStatus serverId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * IB-assigned meta-identifier used to associate rejected and resubmitted orders following Server Prompts.
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(@javax.annotation.Nullable String serverId) {
    this.serverId = serverId;
  }


  public OrderStatus orderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The IB-assigned order identifier of the order, as provided in the request path.
   * @return orderId
   */
  @javax.annotation.Nullable
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable Integer orderId) {
    this.orderId = orderId;
  }


  public OrderStatus conidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
    return this;
  }

  /**
   * Contract ID and routing destination in format 123456@EXCHANGE.
   * @return conidex
   */
  @javax.annotation.Nullable
  public String getConidex() {
    return conidex;
  }

  public void setConidex(@javax.annotation.Nullable String conidex) {
    this.conidex = conidex;
  }


  public OrderStatus conid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Contract ID of the order&#39;s instrument.
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(@javax.annotation.Nullable String conid) {
    this.conid = conid;
  }


  public OrderStatus symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Symbol of the order ticket&#39;s instrument.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public OrderStatus side(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Side of the order ticket.
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(@javax.annotation.Nullable SideEnum side) {
    this.side = side;
  }


  public OrderStatus contractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
    return this;
  }

  /**
   * Human-readable description of the order&#39;s instrument.
   * @return contractDescription1
   */
  @javax.annotation.Nullable
  public String getContractDescription1() {
    return contractDescription1;
  }

  public void setContractDescription1(@javax.annotation.Nullable String contractDescription1) {
    this.contractDescription1 = contractDescription1;
  }


  public OrderStatus listingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Primary listing exchange of the order ticket&#39;s instrument.
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(@javax.annotation.Nullable String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public OrderStatus optionAcct(@javax.annotation.Nullable String optionAcct) {
    this.optionAcct = optionAcct;
    return this;
  }

  /**
   * Internal use only.
   * @return optionAcct
   */
  @javax.annotation.Nullable
  public String getOptionAcct() {
    return optionAcct;
  }

  public void setOptionAcct(@javax.annotation.Nullable String optionAcct) {
    this.optionAcct = optionAcct;
  }


  public OrderStatus companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of the company or asset associated with the instrument.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public OrderStatus size(@javax.annotation.Nullable String size) {
    this.size = size;
    return this;
  }

  /**
   * Remaining unfilled size of the order ticket. Will reflect 0.0 if order is filled in full, cancelled, or otherwise resolved and no longer working.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable String size) {
    this.size = size;
  }


  public OrderStatus totalSize(@javax.annotation.Nullable String totalSize) {
    this.totalSize = totalSize;
    return this;
  }

  /**
   * The total size of the order ticket.
   * @return totalSize
   */
  @javax.annotation.Nullable
  public String getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(@javax.annotation.Nullable String totalSize) {
    this.totalSize = totalSize;
  }


  public OrderStatus currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency in which the instrument trades and executions are conducted.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public OrderStatus account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * The account receiving executions against this order ticket.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public OrderStatus orderType(@javax.annotation.Nullable String orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * The order&#39;s  IB order type.
   * @return orderType
   */
  @javax.annotation.Nullable
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(@javax.annotation.Nullable String orderType) {
    this.orderType = orderType;
  }


  public OrderStatus cumFill(@javax.annotation.Nullable String cumFill) {
    this.cumFill = cumFill;
    return this;
  }

  /**
   * Cumulative filled quantity of the instrument against the order ticket.
   * @return cumFill
   */
  @javax.annotation.Nullable
  public String getCumFill() {
    return cumFill;
  }

  public void setCumFill(@javax.annotation.Nullable String cumFill) {
    this.cumFill = cumFill;
  }


  public OrderStatus orderStatus(@javax.annotation.Nullable OrderStatusEnum orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  /**
   * Status of the order ticket.
   * @return orderStatus
   */
  @javax.annotation.Nullable
  public OrderStatusEnum getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(@javax.annotation.Nullable OrderStatusEnum orderStatus) {
    this.orderStatus = orderStatus;
  }


  public OrderStatus orderCcpStatus(@javax.annotation.Nullable String orderCcpStatus) {
    this.orderCcpStatus = orderCcpStatus;
    return this;
  }

  /**
   * IB internal order status.
   * @return orderCcpStatus
   */
  @javax.annotation.Nullable
  public String getOrderCcpStatus() {
    return orderCcpStatus;
  }

  public void setOrderCcpStatus(@javax.annotation.Nullable String orderCcpStatus) {
    this.orderCcpStatus = orderCcpStatus;
  }


  public OrderStatus orderStatusDescription(@javax.annotation.Nullable String orderStatusDescription) {
    this.orderStatusDescription = orderStatusDescription;
    return this;
  }

  /**
   * Human-readable rendering of the order&#39;s status meant for presentation in UI.
   * @return orderStatusDescription
   */
  @javax.annotation.Nullable
  public String getOrderStatusDescription() {
    return orderStatusDescription;
  }

  public void setOrderStatusDescription(@javax.annotation.Nullable String orderStatusDescription) {
    this.orderStatusDescription = orderStatusDescription;
  }


  public OrderStatus tif(@javax.annotation.Nullable TifEnum tif) {
    this.tif = tif;
    return this;
  }

  /**
   * Time in force of the order ticket.
   * @return tif
   */
  @javax.annotation.Nullable
  public TifEnum getTif() {
    return tif;
  }

  public void setTif(@javax.annotation.Nullable TifEnum tif) {
    this.tif = tif;
  }


  public OrderStatus fgColor(@javax.annotation.Nullable String fgColor) {
    this.fgColor = fgColor;
    return this;
  }

  /**
   * Internal use. IB&#39;s UI foreground color in hex.
   * @return fgColor
   */
  @javax.annotation.Nullable
  public String getFgColor() {
    return fgColor;
  }

  public void setFgColor(@javax.annotation.Nullable String fgColor) {
    this.fgColor = fgColor;
  }


  public OrderStatus bgColor(@javax.annotation.Nullable String bgColor) {
    this.bgColor = bgColor;
    return this;
  }

  /**
   * Internal use. IB&#39;s UI background color in hex.
   * @return bgColor
   */
  @javax.annotation.Nullable
  public String getBgColor() {
    return bgColor;
  }

  public void setBgColor(@javax.annotation.Nullable String bgColor) {
    this.bgColor = bgColor;
  }


  public OrderStatus orderNotEditable(@javax.annotation.Nullable Boolean orderNotEditable) {
    this.orderNotEditable = orderNotEditable;
    return this;
  }

  /**
   * Indicates whether the order ticket can be modified.
   * @return orderNotEditable
   */
  @javax.annotation.Nullable
  public Boolean getOrderNotEditable() {
    return orderNotEditable;
  }

  public void setOrderNotEditable(@javax.annotation.Nullable Boolean orderNotEditable) {
    this.orderNotEditable = orderNotEditable;
  }


  public OrderStatus editableFields(@javax.annotation.Nullable String editableFields) {
    this.editableFields = editableFields;
    return this;
  }

  /**
   * Indicates which fields of the order ticket can be modified currently.
   * @return editableFields
   */
  @javax.annotation.Nullable
  public String getEditableFields() {
    return editableFields;
  }

  public void setEditableFields(@javax.annotation.Nullable String editableFields) {
    this.editableFields = editableFields;
  }


  public OrderStatus cannotCancelOrder(@javax.annotation.Nullable Boolean cannotCancelOrder) {
    this.cannotCancelOrder = cannotCancelOrder;
    return this;
  }

  /**
   * Indicates whether the order ticket can be cancelled.
   * @return cannotCancelOrder
   */
  @javax.annotation.Nullable
  public Boolean getCannotCancelOrder() {
    return cannotCancelOrder;
  }

  public void setCannotCancelOrder(@javax.annotation.Nullable Boolean cannotCancelOrder) {
    this.cannotCancelOrder = cannotCancelOrder;
  }


  public OrderStatus deactivateOrder(@javax.annotation.Nullable Boolean deactivateOrder) {
    this.deactivateOrder = deactivateOrder;
    return this;
  }

  /**
   * Indicates whether the order ticket can be deactivated.
   * @return deactivateOrder
   */
  @javax.annotation.Nullable
  public Boolean getDeactivateOrder() {
    return deactivateOrder;
  }

  public void setDeactivateOrder(@javax.annotation.Nullable Boolean deactivateOrder) {
    this.deactivateOrder = deactivateOrder;
  }


  public OrderStatus secType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
    return this;
  }

  /**
   * IB asset class identifier.
   * @return secType
   */
  @javax.annotation.Nullable
  public SecTypeEnum getSecType() {
    return secType;
  }

  public void setSecType(@javax.annotation.Nullable SecTypeEnum secType) {
    this.secType = secType;
  }


  public OrderStatus availableChartPeriods(@javax.annotation.Nullable String availableChartPeriods) {
    this.availableChartPeriods = availableChartPeriods;
    return this;
  }

  /**
   * Internal use. Indicates chart periods available for the instrument.
   * @return availableChartPeriods
   */
  @javax.annotation.Nullable
  public String getAvailableChartPeriods() {
    return availableChartPeriods;
  }

  public void setAvailableChartPeriods(@javax.annotation.Nullable String availableChartPeriods) {
    this.availableChartPeriods = availableChartPeriods;
  }


  public OrderStatus orderDescription(@javax.annotation.Nullable String orderDescription) {
    this.orderDescription = orderDescription;
    return this;
  }

  /**
   * Human-readable description of the status or current result of the order ticket, meant for UI presentation.
   * @return orderDescription
   */
  @javax.annotation.Nullable
  public String getOrderDescription() {
    return orderDescription;
  }

  public void setOrderDescription(@javax.annotation.Nullable String orderDescription) {
    this.orderDescription = orderDescription;
  }


  public OrderStatus orderDescriptionWithContract(@javax.annotation.Nullable String orderDescriptionWithContract) {
    this.orderDescriptionWithContract = orderDescriptionWithContract;
    return this;
  }

  /**
   * Human-readable description of the status or current result of the order ticket, meant for UI presentation. Includes instrument name.
   * @return orderDescriptionWithContract
   */
  @javax.annotation.Nullable
  public String getOrderDescriptionWithContract() {
    return orderDescriptionWithContract;
  }

  public void setOrderDescriptionWithContract(@javax.annotation.Nullable String orderDescriptionWithContract) {
    this.orderDescriptionWithContract = orderDescriptionWithContract;
  }


  public OrderStatus alertActive(@javax.annotation.Nullable Integer alertActive) {
    this.alertActive = alertActive;
    return this;
  }

  /**
   * Indicates that an alert is active for the order ticket.
   * @return alertActive
   */
  @javax.annotation.Nullable
  public Integer getAlertActive() {
    return alertActive;
  }

  public void setAlertActive(@javax.annotation.Nullable Integer alertActive) {
    this.alertActive = alertActive;
  }


  public OrderStatus childOrderType(@javax.annotation.Nullable ChildOrderTypeEnum childOrderType) {
    this.childOrderType = childOrderType;
    return this;
  }

  /**
   * Indicates if the order ticket is hedged, and if so, in what way. 0 &#x3D; No hedge, A &#x3D; Attached child hedge order, B &#x3D; Beta/portfolio hedge
   * @return childOrderType
   */
  @javax.annotation.Nullable
  public ChildOrderTypeEnum getChildOrderType() {
    return childOrderType;
  }

  public void setChildOrderType(@javax.annotation.Nullable ChildOrderTypeEnum childOrderType) {
    this.childOrderType = childOrderType;
  }


  public OrderStatus orderClearingAccount(@javax.annotation.Nullable String orderClearingAccount) {
    this.orderClearingAccount = orderClearingAccount;
    return this;
  }

  /**
   * The IB account to which the order ticket clears.
   * @return orderClearingAccount
   */
  @javax.annotation.Nullable
  public String getOrderClearingAccount() {
    return orderClearingAccount;
  }

  public void setOrderClearingAccount(@javax.annotation.Nullable String orderClearingAccount) {
    this.orderClearingAccount = orderClearingAccount;
  }


  public OrderStatus sizeAndFills(@javax.annotation.Nullable String sizeAndFills) {
    this.sizeAndFills = sizeAndFills;
    return this;
  }

  /**
   * A string reflecting the cumulative fills and total size of the order.
   * @return sizeAndFills
   */
  @javax.annotation.Nullable
  public String getSizeAndFills() {
    return sizeAndFills;
  }

  public void setSizeAndFills(@javax.annotation.Nullable String sizeAndFills) {
    this.sizeAndFills = sizeAndFills;
  }


  public OrderStatus exitStrategyDisplayPrice(@javax.annotation.Nullable String exitStrategyDisplayPrice) {
    this.exitStrategyDisplayPrice = exitStrategyDisplayPrice;
    return this;
  }

  /**
   * Internal use. The UI-displayed price associated with a Client Portal exist strategy.
   * @return exitStrategyDisplayPrice
   */
  @javax.annotation.Nullable
  public String getExitStrategyDisplayPrice() {
    return exitStrategyDisplayPrice;
  }

  public void setExitStrategyDisplayPrice(@javax.annotation.Nullable String exitStrategyDisplayPrice) {
    this.exitStrategyDisplayPrice = exitStrategyDisplayPrice;
  }


  public OrderStatus exitStrategyChartDescription(@javax.annotation.Nullable String exitStrategyChartDescription) {
    this.exitStrategyChartDescription = exitStrategyChartDescription;
    return this;
  }

  /**
   * Internal use. A string describing an active Client Portal exit strategy, or the result of its execution.
   * @return exitStrategyChartDescription
   */
  @javax.annotation.Nullable
  public String getExitStrategyChartDescription() {
    return exitStrategyChartDescription;
  }

  public void setExitStrategyChartDescription(@javax.annotation.Nullable String exitStrategyChartDescription) {
    this.exitStrategyChartDescription = exitStrategyChartDescription;
  }


  public OrderStatus averagePrice(@javax.annotation.Nullable String averagePrice) {
    this.averagePrice = averagePrice;
    return this;
  }

  /**
   * Average price of fills against the order, if any.
   * @return averagePrice
   */
  @javax.annotation.Nullable
  public String getAveragePrice() {
    return averagePrice;
  }

  public void setAveragePrice(@javax.annotation.Nullable String averagePrice) {
    this.averagePrice = averagePrice;
  }


  public OrderStatus exitStrategyToolAvailability(@javax.annotation.Nullable String exitStrategyToolAvailability) {
    this.exitStrategyToolAvailability = exitStrategyToolAvailability;
    return this;
  }

  /**
   * Internal use. Indicates the availability of Client Portal exit strategy tool for the order.
   * @return exitStrategyToolAvailability
   */
  @javax.annotation.Nullable
  public String getExitStrategyToolAvailability() {
    return exitStrategyToolAvailability;
  }

  public void setExitStrategyToolAvailability(@javax.annotation.Nullable String exitStrategyToolAvailability) {
    this.exitStrategyToolAvailability = exitStrategyToolAvailability;
  }


  public OrderStatus allowedDuplicateOpposite(@javax.annotation.Nullable Boolean allowedDuplicateOpposite) {
    this.allowedDuplicateOpposite = allowedDuplicateOpposite;
    return this;
  }

  /**
   * Indicates whether an identical order on the opposite side can be placed.
   * @return allowedDuplicateOpposite
   */
  @javax.annotation.Nullable
  public Boolean getAllowedDuplicateOpposite() {
    return allowedDuplicateOpposite;
  }

  public void setAllowedDuplicateOpposite(@javax.annotation.Nullable Boolean allowedDuplicateOpposite) {
    this.allowedDuplicateOpposite = allowedDuplicateOpposite;
  }


  public OrderStatus orderTime(@javax.annotation.Nullable String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  /**
   * Time of the order&#39;s submission in format YYMMDDhhmmss.
   * @return orderTime
   */
  @javax.annotation.Nullable
  public String getOrderTime() {
    return orderTime;
  }

  public void setOrderTime(@javax.annotation.Nullable String orderTime) {
    this.orderTime = orderTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderStatus orderStatus = (OrderStatus) o;
    return Objects.equals(this.subType, orderStatus.subType) &&
        Objects.equals(this.requestId, orderStatus.requestId) &&
        Objects.equals(this.serverId, orderStatus.serverId) &&
        Objects.equals(this.orderId, orderStatus.orderId) &&
        Objects.equals(this.conidex, orderStatus.conidex) &&
        Objects.equals(this.conid, orderStatus.conid) &&
        Objects.equals(this.symbol, orderStatus.symbol) &&
        Objects.equals(this.side, orderStatus.side) &&
        Objects.equals(this.contractDescription1, orderStatus.contractDescription1) &&
        Objects.equals(this.listingExchange, orderStatus.listingExchange) &&
        Objects.equals(this.optionAcct, orderStatus.optionAcct) &&
        Objects.equals(this.companyName, orderStatus.companyName) &&
        Objects.equals(this.size, orderStatus.size) &&
        Objects.equals(this.totalSize, orderStatus.totalSize) &&
        Objects.equals(this.currency, orderStatus.currency) &&
        Objects.equals(this.account, orderStatus.account) &&
        Objects.equals(this.orderType, orderStatus.orderType) &&
        Objects.equals(this.cumFill, orderStatus.cumFill) &&
        Objects.equals(this.orderStatus, orderStatus.orderStatus) &&
        Objects.equals(this.orderCcpStatus, orderStatus.orderCcpStatus) &&
        Objects.equals(this.orderStatusDescription, orderStatus.orderStatusDescription) &&
        Objects.equals(this.tif, orderStatus.tif) &&
        Objects.equals(this.fgColor, orderStatus.fgColor) &&
        Objects.equals(this.bgColor, orderStatus.bgColor) &&
        Objects.equals(this.orderNotEditable, orderStatus.orderNotEditable) &&
        Objects.equals(this.editableFields, orderStatus.editableFields) &&
        Objects.equals(this.cannotCancelOrder, orderStatus.cannotCancelOrder) &&
        Objects.equals(this.deactivateOrder, orderStatus.deactivateOrder) &&
        Objects.equals(this.secType, orderStatus.secType) &&
        Objects.equals(this.availableChartPeriods, orderStatus.availableChartPeriods) &&
        Objects.equals(this.orderDescription, orderStatus.orderDescription) &&
        Objects.equals(this.orderDescriptionWithContract, orderStatus.orderDescriptionWithContract) &&
        Objects.equals(this.alertActive, orderStatus.alertActive) &&
        Objects.equals(this.childOrderType, orderStatus.childOrderType) &&
        Objects.equals(this.orderClearingAccount, orderStatus.orderClearingAccount) &&
        Objects.equals(this.sizeAndFills, orderStatus.sizeAndFills) &&
        Objects.equals(this.exitStrategyDisplayPrice, orderStatus.exitStrategyDisplayPrice) &&
        Objects.equals(this.exitStrategyChartDescription, orderStatus.exitStrategyChartDescription) &&
        Objects.equals(this.averagePrice, orderStatus.averagePrice) &&
        Objects.equals(this.exitStrategyToolAvailability, orderStatus.exitStrategyToolAvailability) &&
        Objects.equals(this.allowedDuplicateOpposite, orderStatus.allowedDuplicateOpposite) &&
        Objects.equals(this.orderTime, orderStatus.orderTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subType, requestId, serverId, orderId, conidex, conid, symbol, side, contractDescription1, listingExchange, optionAcct, companyName, size, totalSize, currency, account, orderType, cumFill, orderStatus, orderCcpStatus, orderStatusDescription, tif, fgColor, bgColor, orderNotEditable, editableFields, cannotCancelOrder, deactivateOrder, secType, availableChartPeriods, orderDescription, orderDescriptionWithContract, alertActive, childOrderType, orderClearingAccount, sizeAndFills, exitStrategyDisplayPrice, exitStrategyChartDescription, averagePrice, exitStrategyToolAvailability, allowedDuplicateOpposite, orderTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderStatus {\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    conidex: ").append(toIndentedString(conidex)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    contractDescription1: ").append(toIndentedString(contractDescription1)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    optionAcct: ").append(toIndentedString(optionAcct)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    cumFill: ").append(toIndentedString(cumFill)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("    orderCcpStatus: ").append(toIndentedString(orderCcpStatus)).append("\n");
    sb.append("    orderStatusDescription: ").append(toIndentedString(orderStatusDescription)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    fgColor: ").append(toIndentedString(fgColor)).append("\n");
    sb.append("    bgColor: ").append(toIndentedString(bgColor)).append("\n");
    sb.append("    orderNotEditable: ").append(toIndentedString(orderNotEditable)).append("\n");
    sb.append("    editableFields: ").append(toIndentedString(editableFields)).append("\n");
    sb.append("    cannotCancelOrder: ").append(toIndentedString(cannotCancelOrder)).append("\n");
    sb.append("    deactivateOrder: ").append(toIndentedString(deactivateOrder)).append("\n");
    sb.append("    secType: ").append(toIndentedString(secType)).append("\n");
    sb.append("    availableChartPeriods: ").append(toIndentedString(availableChartPeriods)).append("\n");
    sb.append("    orderDescription: ").append(toIndentedString(orderDescription)).append("\n");
    sb.append("    orderDescriptionWithContract: ").append(toIndentedString(orderDescriptionWithContract)).append("\n");
    sb.append("    alertActive: ").append(toIndentedString(alertActive)).append("\n");
    sb.append("    childOrderType: ").append(toIndentedString(childOrderType)).append("\n");
    sb.append("    orderClearingAccount: ").append(toIndentedString(orderClearingAccount)).append("\n");
    sb.append("    sizeAndFills: ").append(toIndentedString(sizeAndFills)).append("\n");
    sb.append("    exitStrategyDisplayPrice: ").append(toIndentedString(exitStrategyDisplayPrice)).append("\n");
    sb.append("    exitStrategyChartDescription: ").append(toIndentedString(exitStrategyChartDescription)).append("\n");
    sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
    sb.append("    exitStrategyToolAvailability: ").append(toIndentedString(exitStrategyToolAvailability)).append("\n");
    sb.append("    allowedDuplicateOpposite: ").append(toIndentedString(allowedDuplicateOpposite)).append("\n");
    sb.append("    orderTime: ").append(toIndentedString(orderTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sub_type");
    openapiFields.add("request_id");
    openapiFields.add("server_id");
    openapiFields.add("order_id");
    openapiFields.add("conidex");
    openapiFields.add("conid");
    openapiFields.add("symbol");
    openapiFields.add("side");
    openapiFields.add("contract_description_1");
    openapiFields.add("listing_exchange");
    openapiFields.add("option_acct");
    openapiFields.add("company_name");
    openapiFields.add("size");
    openapiFields.add("total_size");
    openapiFields.add("currency");
    openapiFields.add("account");
    openapiFields.add("order_type");
    openapiFields.add("cum_fill");
    openapiFields.add("order_status");
    openapiFields.add("order_ccp_status");
    openapiFields.add("order_status_description");
    openapiFields.add("tif");
    openapiFields.add("fgColor");
    openapiFields.add("bgColor");
    openapiFields.add("order_not_editable");
    openapiFields.add("editable_fields");
    openapiFields.add("cannot_cancel_order");
    openapiFields.add("deactivate_order");
    openapiFields.add("sec_type");
    openapiFields.add("available_chart_periods");
    openapiFields.add("order_description");
    openapiFields.add("order_description_with_contract");
    openapiFields.add("alert_active");
    openapiFields.add("child_order_type");
    openapiFields.add("order_clearing_account");
    openapiFields.add("size_and_fills");
    openapiFields.add("exit_strategy_display_price");
    openapiFields.add("exit_strategy_chart_description");
    openapiFields.add("average_price");
    openapiFields.add("exit_strategy_tool_availability");
    openapiFields.add("allowed_duplicate_opposite");
    openapiFields.add("order_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderStatus is not found in the empty JSON string", OrderStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sub_type") != null && !jsonObj.get("sub_type").isJsonNull()) && !jsonObj.get("sub_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_type").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("server_id") != null && !jsonObj.get("server_id").isJsonNull()) && !jsonObj.get("server_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_id").toString()));
      }
      if ((jsonObj.get("conidex") != null && !jsonObj.get("conidex").isJsonNull()) && !jsonObj.get("conidex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conidex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conidex").toString()));
      }
      if ((jsonObj.get("conid") != null && !jsonObj.get("conid").isJsonNull()) && !jsonObj.get("conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conid").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `side`
      if (jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("side"));
      }
      if ((jsonObj.get("contract_description_1") != null && !jsonObj.get("contract_description_1").isJsonNull()) && !jsonObj.get("contract_description_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_description_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_description_1").toString()));
      }
      if ((jsonObj.get("listing_exchange") != null && !jsonObj.get("listing_exchange").isJsonNull()) && !jsonObj.get("listing_exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listing_exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_exchange").toString()));
      }
      if ((jsonObj.get("option_acct") != null && !jsonObj.get("option_acct").isJsonNull()) && !jsonObj.get("option_acct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `option_acct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("option_acct").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("total_size") != null && !jsonObj.get("total_size").isJsonNull()) && !jsonObj.get("total_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_size").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("order_type") != null && !jsonObj.get("order_type").isJsonNull()) && !jsonObj.get("order_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_type").toString()));
      }
      if ((jsonObj.get("cum_fill") != null && !jsonObj.get("cum_fill").isJsonNull()) && !jsonObj.get("cum_fill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cum_fill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cum_fill").toString()));
      }
      if ((jsonObj.get("order_status") != null && !jsonObj.get("order_status").isJsonNull()) && !jsonObj.get("order_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_status").toString()));
      }
      // validate the optional field `order_status`
      if (jsonObj.get("order_status") != null && !jsonObj.get("order_status").isJsonNull()) {
        OrderStatusEnum.validateJsonElement(jsonObj.get("order_status"));
      }
      if ((jsonObj.get("order_ccp_status") != null && !jsonObj.get("order_ccp_status").isJsonNull()) && !jsonObj.get("order_ccp_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_ccp_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_ccp_status").toString()));
      }
      if ((jsonObj.get("order_status_description") != null && !jsonObj.get("order_status_description").isJsonNull()) && !jsonObj.get("order_status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_status_description").toString()));
      }
      if ((jsonObj.get("tif") != null && !jsonObj.get("tif").isJsonNull()) && !jsonObj.get("tif").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tif` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tif").toString()));
      }
      // validate the optional field `tif`
      if (jsonObj.get("tif") != null && !jsonObj.get("tif").isJsonNull()) {
        TifEnum.validateJsonElement(jsonObj.get("tif"));
      }
      if ((jsonObj.get("fgColor") != null && !jsonObj.get("fgColor").isJsonNull()) && !jsonObj.get("fgColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fgColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fgColor").toString()));
      }
      if ((jsonObj.get("bgColor") != null && !jsonObj.get("bgColor").isJsonNull()) && !jsonObj.get("bgColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bgColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bgColor").toString()));
      }
      if ((jsonObj.get("editable_fields") != null && !jsonObj.get("editable_fields").isJsonNull()) && !jsonObj.get("editable_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editable_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editable_fields").toString()));
      }
      if ((jsonObj.get("sec_type") != null && !jsonObj.get("sec_type").isJsonNull()) && !jsonObj.get("sec_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sec_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sec_type").toString()));
      }
      // validate the optional field `sec_type`
      if (jsonObj.get("sec_type") != null && !jsonObj.get("sec_type").isJsonNull()) {
        SecTypeEnum.validateJsonElement(jsonObj.get("sec_type"));
      }
      if ((jsonObj.get("available_chart_periods") != null && !jsonObj.get("available_chart_periods").isJsonNull()) && !jsonObj.get("available_chart_periods").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_chart_periods` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_chart_periods").toString()));
      }
      if ((jsonObj.get("order_description") != null && !jsonObj.get("order_description").isJsonNull()) && !jsonObj.get("order_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_description").toString()));
      }
      if ((jsonObj.get("order_description_with_contract") != null && !jsonObj.get("order_description_with_contract").isJsonNull()) && !jsonObj.get("order_description_with_contract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_description_with_contract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_description_with_contract").toString()));
      }
      if ((jsonObj.get("child_order_type") != null && !jsonObj.get("child_order_type").isJsonNull()) && !jsonObj.get("child_order_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `child_order_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("child_order_type").toString()));
      }
      // validate the optional field `child_order_type`
      if (jsonObj.get("child_order_type") != null && !jsonObj.get("child_order_type").isJsonNull()) {
        ChildOrderTypeEnum.validateJsonElement(jsonObj.get("child_order_type"));
      }
      if ((jsonObj.get("order_clearing_account") != null && !jsonObj.get("order_clearing_account").isJsonNull()) && !jsonObj.get("order_clearing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_clearing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_clearing_account").toString()));
      }
      if ((jsonObj.get("size_and_fills") != null && !jsonObj.get("size_and_fills").isJsonNull()) && !jsonObj.get("size_and_fills").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size_and_fills` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size_and_fills").toString()));
      }
      if ((jsonObj.get("exit_strategy_display_price") != null && !jsonObj.get("exit_strategy_display_price").isJsonNull()) && !jsonObj.get("exit_strategy_display_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exit_strategy_display_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exit_strategy_display_price").toString()));
      }
      if ((jsonObj.get("exit_strategy_chart_description") != null && !jsonObj.get("exit_strategy_chart_description").isJsonNull()) && !jsonObj.get("exit_strategy_chart_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exit_strategy_chart_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exit_strategy_chart_description").toString()));
      }
      if ((jsonObj.get("average_price") != null && !jsonObj.get("average_price").isJsonNull()) && !jsonObj.get("average_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `average_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("average_price").toString()));
      }
      if ((jsonObj.get("exit_strategy_tool_availability") != null && !jsonObj.get("exit_strategy_tool_availability").isJsonNull()) && !jsonObj.get("exit_strategy_tool_availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exit_strategy_tool_availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exit_strategy_tool_availability").toString()));
      }
      if ((jsonObj.get("order_time") != null && !jsonObj.get("order_time").isJsonNull()) && !jsonObj.get("order_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderStatus>() {
           @Override
           public void write(JsonWriter out, OrderStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderStatus
   * @throws IOException if the JSON string is invalid with respect to OrderStatus
   */
  public static OrderStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderStatus.class);
  }

  /**
   * Convert an instance of OrderStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

