/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EligibleContractParticipant;
import org.openapitools.client.model.QualifiedPurchaser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccreditedInvestor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AccreditedInvestor {
  public static final String SERIALIZED_NAME_QUALIFIED_PURCHASER = "qualifiedPurchaser";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_PURCHASER)
  @javax.annotation.Nullable
  private QualifiedPurchaser qualifiedPurchaser;

  public static final String SERIALIZED_NAME_ELIGIBLE_CONTRACT_PARTICIPANT = "eligibleContractParticipant";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_CONTRACT_PARTICIPANT)
  @javax.annotation.Nullable
  private EligibleContractParticipant eligibleContractParticipant;

  public static final String SERIALIZED_NAME_SIGNED_BY = "signedBy";
  @SerializedName(SERIALIZED_NAME_SIGNED_BY)
  @javax.annotation.Nullable
  private List<String> signedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private Boolean status;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  @javax.annotation.Nullable
  private String signature;

  public AccreditedInvestor() {
  }

  public AccreditedInvestor qualifiedPurchaser(@javax.annotation.Nullable QualifiedPurchaser qualifiedPurchaser) {
    this.qualifiedPurchaser = qualifiedPurchaser;
    return this;
  }

  /**
   * Get qualifiedPurchaser
   * @return qualifiedPurchaser
   */
  @javax.annotation.Nullable
  public QualifiedPurchaser getQualifiedPurchaser() {
    return qualifiedPurchaser;
  }

  public void setQualifiedPurchaser(@javax.annotation.Nullable QualifiedPurchaser qualifiedPurchaser) {
    this.qualifiedPurchaser = qualifiedPurchaser;
  }


  public AccreditedInvestor eligibleContractParticipant(@javax.annotation.Nullable EligibleContractParticipant eligibleContractParticipant) {
    this.eligibleContractParticipant = eligibleContractParticipant;
    return this;
  }

  /**
   * Get eligibleContractParticipant
   * @return eligibleContractParticipant
   */
  @javax.annotation.Nullable
  public EligibleContractParticipant getEligibleContractParticipant() {
    return eligibleContractParticipant;
  }

  public void setEligibleContractParticipant(@javax.annotation.Nullable EligibleContractParticipant eligibleContractParticipant) {
    this.eligibleContractParticipant = eligibleContractParticipant;
  }


  public AccreditedInvestor signedBy(@javax.annotation.Nullable List<String> signedBy) {
    this.signedBy = signedBy;
    return this;
  }

  public AccreditedInvestor addSignedByItem(String signedByItem) {
    if (this.signedBy == null) {
      this.signedBy = new ArrayList<>();
    }
    this.signedBy.add(signedByItem);
    return this;
  }

  /**
   * Get signedBy
   * @return signedBy
   */
  @javax.annotation.Nullable
  public List<String> getSignedBy() {
    return signedBy;
  }

  public void setSignedBy(@javax.annotation.Nullable List<String> signedBy) {
    this.signedBy = signedBy;
  }


  public AccreditedInvestor accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public AccreditedInvestor status(@javax.annotation.Nullable Boolean status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Boolean getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable Boolean status) {
    this.status = status;
  }


  public AccreditedInvestor signature(@javax.annotation.Nullable String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(@javax.annotation.Nullable String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccreditedInvestor accreditedInvestor = (AccreditedInvestor) o;
    return Objects.equals(this.qualifiedPurchaser, accreditedInvestor.qualifiedPurchaser) &&
        Objects.equals(this.eligibleContractParticipant, accreditedInvestor.eligibleContractParticipant) &&
        Objects.equals(this.signedBy, accreditedInvestor.signedBy) &&
        Objects.equals(this.accountId, accreditedInvestor.accountId) &&
        Objects.equals(this.status, accreditedInvestor.status) &&
        Objects.equals(this.signature, accreditedInvestor.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qualifiedPurchaser, eligibleContractParticipant, signedBy, accountId, status, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccreditedInvestor {\n");
    sb.append("    qualifiedPurchaser: ").append(toIndentedString(qualifiedPurchaser)).append("\n");
    sb.append("    eligibleContractParticipant: ").append(toIndentedString(eligibleContractParticipant)).append("\n");
    sb.append("    signedBy: ").append(toIndentedString(signedBy)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("qualifiedPurchaser");
    openapiFields.add("eligibleContractParticipant");
    openapiFields.add("signedBy");
    openapiFields.add("accountId");
    openapiFields.add("status");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccreditedInvestor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccreditedInvestor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccreditedInvestor is not found in the empty JSON string", AccreditedInvestor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccreditedInvestor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccreditedInvestor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `qualifiedPurchaser`
      if (jsonObj.get("qualifiedPurchaser") != null && !jsonObj.get("qualifiedPurchaser").isJsonNull()) {
        QualifiedPurchaser.validateJsonElement(jsonObj.get("qualifiedPurchaser"));
      }
      // validate the optional field `eligibleContractParticipant`
      if (jsonObj.get("eligibleContractParticipant") != null && !jsonObj.get("eligibleContractParticipant").isJsonNull()) {
        EligibleContractParticipant.validateJsonElement(jsonObj.get("eligibleContractParticipant"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("signedBy") != null && !jsonObj.get("signedBy").isJsonNull() && !jsonObj.get("signedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedBy` to be an array in the JSON string but got `%s`", jsonObj.get("signedBy").toString()));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccreditedInvestor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccreditedInvestor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccreditedInvestor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccreditedInvestor.class));

       return (TypeAdapter<T>) new TypeAdapter<AccreditedInvestor>() {
           @Override
           public void write(JsonWriter out, AccreditedInvestor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccreditedInvestor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccreditedInvestor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccreditedInvestor
   * @throws IOException if the JSON string is invalid with respect to AccreditedInvestor
   */
  public static AccreditedInvestor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccreditedInvestor.class);
  }

  /**
   * Convert an instance of AccreditedInvestor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

