/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertCreationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class AlertCreationRequest {
  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  @javax.annotation.Nullable
  private Long orderId;

  public static final String SERIALIZED_NAME_ALERT_NAME = "alertName";
  @SerializedName(SERIALIZED_NAME_ALERT_NAME)
  @javax.annotation.Nonnull
  private String alertName;

  public static final String SERIALIZED_NAME_ALERT_MESSAGE = "alertMessage";
  @SerializedName(SERIALIZED_NAME_ALERT_MESSAGE)
  @javax.annotation.Nonnull
  private String alertMessage;

  public static final String SERIALIZED_NAME_ALERT_REPEATABLE = "alertRepeatable";
  @SerializedName(SERIALIZED_NAME_ALERT_REPEATABLE)
  @javax.annotation.Nonnull
  private Integer alertRepeatable;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  @javax.annotation.Nullable
  private String expireTime;

  public static final String SERIALIZED_NAME_I_T_W_S_ORDERS_ONLY = "iTWSOrdersOnly";
  @SerializedName(SERIALIZED_NAME_I_T_W_S_ORDERS_ONLY)
  @javax.annotation.Nullable
  private Integer iTWSOrdersOnly;

  public static final String SERIALIZED_NAME_OUTSIDE_RTH = "outsideRth";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_RTH)
  @javax.annotation.Nonnull
  private Integer outsideRth;

  public static final String SERIALIZED_NAME_SEND_MESSAGE = "sendMessage";
  @SerializedName(SERIALIZED_NAME_SEND_MESSAGE)
  @javax.annotation.Nullable
  private Integer sendMessage;

  public static final String SERIALIZED_NAME_SHOW_POPUP = "showPopup";
  @SerializedName(SERIALIZED_NAME_SHOW_POPUP)
  @javax.annotation.Nullable
  private Integer showPopup;

  /**
   * Time in Force duration of alert.
   */
  @JsonAdapter(TifEnum.Adapter.class)
  public enum TifEnum {
    GTC("GTC"),
    
    GTD("GTD");

    private String value;

    TifEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TifEnum fromValue(String value) {
      for (TifEnum b : TifEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TifEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TifEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TifEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TifEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TifEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIF = "tif";
  @SerializedName(SERIALIZED_NAME_TIF)
  @javax.annotation.Nonnull
  private TifEnum tif;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nonnull
  private List<String> conditions = new ArrayList<>();

  public AlertCreationRequest() {
  }

  public AlertCreationRequest orderId(@javax.annotation.Nullable Long orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * optional; used in case of modification and represent Alert Id
   * @return orderId
   */
  @javax.annotation.Nullable
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(@javax.annotation.Nullable Long orderId) {
    this.orderId = orderId;
  }


  public AlertCreationRequest alertName(@javax.annotation.Nonnull String alertName) {
    this.alertName = alertName;
    return this;
  }

  /**
   * Alert name.
   * @return alertName
   */
  @javax.annotation.Nonnull
  public String getAlertName() {
    return alertName;
  }

  public void setAlertName(@javax.annotation.Nonnull String alertName) {
    this.alertName = alertName;
  }


  public AlertCreationRequest alertMessage(@javax.annotation.Nonnull String alertMessage) {
    this.alertMessage = alertMessage;
    return this;
  }

  /**
   * Alert message which will be sent
   * @return alertMessage
   */
  @javax.annotation.Nonnull
  public String getAlertMessage() {
    return alertMessage;
  }

  public void setAlertMessage(@javax.annotation.Nonnull String alertMessage) {
    this.alertMessage = alertMessage;
  }


  public AlertCreationRequest alertRepeatable(@javax.annotation.Nonnull Integer alertRepeatable) {
    this.alertRepeatable = alertRepeatable;
    return this;
  }

  /**
   * Boolean number (0, 1) signifies if an alert can be triggered more than once. A value of ‘1’ is required for MTA alerts
   * @return alertRepeatable
   */
  @javax.annotation.Nonnull
  public Integer getAlertRepeatable() {
    return alertRepeatable;
  }

  public void setAlertRepeatable(@javax.annotation.Nonnull Integer alertRepeatable) {
    this.alertRepeatable = alertRepeatable;
  }


  public AlertCreationRequest email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address you want to send email alerts to
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public AlertCreationRequest expireTime(@javax.annotation.Nullable String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Used with a tif of “GTD” only. Signifies time when the alert should terminate if no alert is triggered.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(@javax.annotation.Nullable String expireTime) {
    this.expireTime = expireTime;
  }


  public AlertCreationRequest iTWSOrdersOnly(@javax.annotation.Nullable Integer iTWSOrdersOnly) {
    this.iTWSOrdersOnly = iTWSOrdersOnly;
    return this;
  }

  /**
   * allow (0) or disallow (1) alerts to trigger alerts through the mobile app
   * @return iTWSOrdersOnly
   */
  @javax.annotation.Nullable
  public Integer getiTWSOrdersOnly() {
    return iTWSOrdersOnly;
  }

  public void setiTWSOrdersOnly(@javax.annotation.Nullable Integer iTWSOrdersOnly) {
    this.iTWSOrdersOnly = iTWSOrdersOnly;
  }


  public AlertCreationRequest outsideRth(@javax.annotation.Nonnull Integer outsideRth) {
    this.outsideRth = outsideRth;
    return this;
  }

  /**
   * Allow (1) or disallow (0) the alert to be triggered outside of regular trading hours
   * @return outsideRth
   */
  @javax.annotation.Nonnull
  public Integer getOutsideRth() {
    return outsideRth;
  }

  public void setOutsideRth(@javax.annotation.Nonnull Integer outsideRth) {
    this.outsideRth = outsideRth;
  }


  public AlertCreationRequest sendMessage(@javax.annotation.Nullable Integer sendMessage) {
    this.sendMessage = sendMessage;
    return this;
  }

  /**
   * allow (1) or disallow (0) alerts to trigger email messages
   * @return sendMessage
   */
  @javax.annotation.Nullable
  public Integer getSendMessage() {
    return sendMessage;
  }

  public void setSendMessage(@javax.annotation.Nullable Integer sendMessage) {
    this.sendMessage = sendMessage;
  }


  public AlertCreationRequest showPopup(@javax.annotation.Nullable Integer showPopup) {
    this.showPopup = showPopup;
    return this;
  }

  /**
   * allow (1) or disallow (0) alerts to trigger TWS Pop-up messages
   * @return showPopup
   */
  @javax.annotation.Nullable
  public Integer getShowPopup() {
    return showPopup;
  }

  public void setShowPopup(@javax.annotation.Nullable Integer showPopup) {
    this.showPopup = showPopup;
  }


  public AlertCreationRequest tif(@javax.annotation.Nonnull TifEnum tif) {
    this.tif = tif;
    return this;
  }

  /**
   * Time in Force duration of alert.
   * @return tif
   */
  @javax.annotation.Nonnull
  public TifEnum getTif() {
    return tif;
  }

  public void setTif(@javax.annotation.Nonnull TifEnum tif) {
    this.tif = tif;
  }


  public AlertCreationRequest conditions(@javax.annotation.Nonnull List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public AlertCreationRequest addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Container for all conditions applied for an alert to trigger.
   * @return conditions
   */
  @javax.annotation.Nonnull
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nonnull List<String> conditions) {
    this.conditions = conditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertCreationRequest alertCreationRequest = (AlertCreationRequest) o;
    return Objects.equals(this.orderId, alertCreationRequest.orderId) &&
        Objects.equals(this.alertName, alertCreationRequest.alertName) &&
        Objects.equals(this.alertMessage, alertCreationRequest.alertMessage) &&
        Objects.equals(this.alertRepeatable, alertCreationRequest.alertRepeatable) &&
        Objects.equals(this.email, alertCreationRequest.email) &&
        Objects.equals(this.expireTime, alertCreationRequest.expireTime) &&
        Objects.equals(this.iTWSOrdersOnly, alertCreationRequest.iTWSOrdersOnly) &&
        Objects.equals(this.outsideRth, alertCreationRequest.outsideRth) &&
        Objects.equals(this.sendMessage, alertCreationRequest.sendMessage) &&
        Objects.equals(this.showPopup, alertCreationRequest.showPopup) &&
        Objects.equals(this.tif, alertCreationRequest.tif) &&
        Objects.equals(this.conditions, alertCreationRequest.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, alertName, alertMessage, alertRepeatable, email, expireTime, iTWSOrdersOnly, outsideRth, sendMessage, showPopup, tif, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertCreationRequest {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    alertMessage: ").append(toIndentedString(alertMessage)).append("\n");
    sb.append("    alertRepeatable: ").append(toIndentedString(alertRepeatable)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    iTWSOrdersOnly: ").append(toIndentedString(iTWSOrdersOnly)).append("\n");
    sb.append("    outsideRth: ").append(toIndentedString(outsideRth)).append("\n");
    sb.append("    sendMessage: ").append(toIndentedString(sendMessage)).append("\n");
    sb.append("    showPopup: ").append(toIndentedString(showPopup)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderId");
    openapiFields.add("alertName");
    openapiFields.add("alertMessage");
    openapiFields.add("alertRepeatable");
    openapiFields.add("email");
    openapiFields.add("expireTime");
    openapiFields.add("iTWSOrdersOnly");
    openapiFields.add("outsideRth");
    openapiFields.add("sendMessage");
    openapiFields.add("showPopup");
    openapiFields.add("tif");
    openapiFields.add("conditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alertName");
    openapiRequiredFields.add("alertMessage");
    openapiRequiredFields.add("alertRepeatable");
    openapiRequiredFields.add("outsideRth");
    openapiRequiredFields.add("tif");
    openapiRequiredFields.add("conditions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertCreationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertCreationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertCreationRequest is not found in the empty JSON string", AlertCreationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertCreationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertCreationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertCreationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("alertName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertName").toString()));
      }
      if (!jsonObj.get("alertMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertMessage").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if (!jsonObj.get("tif").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tif` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tif").toString()));
      }
      // validate the required field `tif`
      TifEnum.validateJsonElement(jsonObj.get("tif"));
      // ensure the required json array is present
      if (jsonObj.get("conditions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertCreationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertCreationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertCreationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertCreationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertCreationRequest>() {
           @Override
           public void write(JsonWriter out, AlertCreationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertCreationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertCreationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertCreationRequest
   * @throws IOException if the JSON string is invalid with respect to AlertCreationRequest
   */
  public static AlertCreationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertCreationRequest.class);
  }

  /**
   * Convert an instance of AlertCreationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

