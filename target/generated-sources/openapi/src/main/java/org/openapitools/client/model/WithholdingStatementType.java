/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WithholdingStatementType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class WithholdingStatementType {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  /**
   * Gets or Sets fatcaCompliantType
   */
  @JsonAdapter(FatcaCompliantTypeEnum.Adapter.class)
  public enum FatcaCompliantTypeEnum {
    FATCA_COMPLIANT("FATCA_COMPLIANT"),
    
    NON_CONSENTING_US_ACCOUNT("NON_CONSENTING_US_ACCOUNT"),
    
    NON_COOPERATIVE_ACCOUNT("NON_COOPERATIVE_ACCOUNT");

    private String value;

    FatcaCompliantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FatcaCompliantTypeEnum fromValue(String value) {
      for (FatcaCompliantTypeEnum b : FatcaCompliantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FatcaCompliantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FatcaCompliantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FatcaCompliantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FatcaCompliantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FatcaCompliantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FATCA_COMPLIANT_TYPE = "fatcaCompliantType";
  @SerializedName(SERIALIZED_NAME_FATCA_COMPLIANT_TYPE)
  @javax.annotation.Nullable
  private FatcaCompliantTypeEnum fatcaCompliantType;

  public static final String SERIALIZED_NAME_US_BACKUP_WITHHOLDING = "usBackupWithholding";
  @SerializedName(SERIALIZED_NAME_US_BACKUP_WITHHOLDING)
  @javax.annotation.Nullable
  private Boolean usBackupWithholding;

  public static final String SERIALIZED_NAME_TREATY_COUNTRY = "treatyCountry";
  @SerializedName(SERIALIZED_NAME_TREATY_COUNTRY)
  @javax.annotation.Nullable
  private String treatyCountry;

  public static final String SERIALIZED_NAME_CORPORATION = "corporation";
  @SerializedName(SERIALIZED_NAME_CORPORATION)
  @javax.annotation.Nullable
  private Boolean corporation;

  public static final String SERIALIZED_NAME_FLOW_THROUGH = "flowThrough";
  @SerializedName(SERIALIZED_NAME_FLOW_THROUGH)
  @javax.annotation.Nullable
  private Boolean flowThrough;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  @javax.annotation.Nullable
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_DIVIDEND_RATE = "dividendRate";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_RATE)
  @javax.annotation.Nullable
  private Float dividendRate;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  @javax.annotation.Nullable
  private Float interestRate;

  public static final String SERIALIZED_NAME_US_OTHER_RATE = "usOtherRate";
  @SerializedName(SERIALIZED_NAME_US_OTHER_RATE)
  @javax.annotation.Nullable
  private Float usOtherRate;

  public static final String SERIALIZED_NAME_ECI_RATE = "eciRate";
  @SerializedName(SERIALIZED_NAME_ECI_RATE)
  @javax.annotation.Nullable
  private Float eciRate;

  public WithholdingStatementType() {
  }

  public WithholdingStatementType accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public WithholdingStatementType fatcaCompliantType(@javax.annotation.Nullable FatcaCompliantTypeEnum fatcaCompliantType) {
    this.fatcaCompliantType = fatcaCompliantType;
    return this;
  }

  /**
   * Get fatcaCompliantType
   * @return fatcaCompliantType
   */
  @javax.annotation.Nullable
  public FatcaCompliantTypeEnum getFatcaCompliantType() {
    return fatcaCompliantType;
  }

  public void setFatcaCompliantType(@javax.annotation.Nullable FatcaCompliantTypeEnum fatcaCompliantType) {
    this.fatcaCompliantType = fatcaCompliantType;
  }


  public WithholdingStatementType usBackupWithholding(@javax.annotation.Nullable Boolean usBackupWithholding) {
    this.usBackupWithholding = usBackupWithholding;
    return this;
  }

  /**
   * Get usBackupWithholding
   * @return usBackupWithholding
   */
  @javax.annotation.Nullable
  public Boolean getUsBackupWithholding() {
    return usBackupWithholding;
  }

  public void setUsBackupWithholding(@javax.annotation.Nullable Boolean usBackupWithholding) {
    this.usBackupWithholding = usBackupWithholding;
  }


  public WithholdingStatementType treatyCountry(@javax.annotation.Nullable String treatyCountry) {
    this.treatyCountry = treatyCountry;
    return this;
  }

  /**
   * Get treatyCountry
   * @return treatyCountry
   */
  @javax.annotation.Nullable
  public String getTreatyCountry() {
    return treatyCountry;
  }

  public void setTreatyCountry(@javax.annotation.Nullable String treatyCountry) {
    this.treatyCountry = treatyCountry;
  }


  public WithholdingStatementType corporation(@javax.annotation.Nullable Boolean corporation) {
    this.corporation = corporation;
    return this;
  }

  /**
   * Get corporation
   * @return corporation
   */
  @javax.annotation.Nullable
  public Boolean getCorporation() {
    return corporation;
  }

  public void setCorporation(@javax.annotation.Nullable Boolean corporation) {
    this.corporation = corporation;
  }


  public WithholdingStatementType flowThrough(@javax.annotation.Nullable Boolean flowThrough) {
    this.flowThrough = flowThrough;
    return this;
  }

  /**
   * Get flowThrough
   * @return flowThrough
   */
  @javax.annotation.Nullable
  public Boolean getFlowThrough() {
    return flowThrough;
  }

  public void setFlowThrough(@javax.annotation.Nullable Boolean flowThrough) {
    this.flowThrough = flowThrough;
  }


  public WithholdingStatementType effectiveDate(@javax.annotation.Nullable LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Get effectiveDate
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(@javax.annotation.Nullable LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public WithholdingStatementType dividendRate(@javax.annotation.Nullable Float dividendRate) {
    this.dividendRate = dividendRate;
    return this;
  }

  /**
   * Get dividendRate
   * @return dividendRate
   */
  @javax.annotation.Nullable
  public Float getDividendRate() {
    return dividendRate;
  }

  public void setDividendRate(@javax.annotation.Nullable Float dividendRate) {
    this.dividendRate = dividendRate;
  }


  public WithholdingStatementType interestRate(@javax.annotation.Nullable Float interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * Get interestRate
   * @return interestRate
   */
  @javax.annotation.Nullable
  public Float getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(@javax.annotation.Nullable Float interestRate) {
    this.interestRate = interestRate;
  }


  public WithholdingStatementType usOtherRate(@javax.annotation.Nullable Float usOtherRate) {
    this.usOtherRate = usOtherRate;
    return this;
  }

  /**
   * Get usOtherRate
   * @return usOtherRate
   */
  @javax.annotation.Nullable
  public Float getUsOtherRate() {
    return usOtherRate;
  }

  public void setUsOtherRate(@javax.annotation.Nullable Float usOtherRate) {
    this.usOtherRate = usOtherRate;
  }


  public WithholdingStatementType eciRate(@javax.annotation.Nullable Float eciRate) {
    this.eciRate = eciRate;
    return this;
  }

  /**
   * Get eciRate
   * @return eciRate
   */
  @javax.annotation.Nullable
  public Float getEciRate() {
    return eciRate;
  }

  public void setEciRate(@javax.annotation.Nullable Float eciRate) {
    this.eciRate = eciRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WithholdingStatementType withholdingStatementType = (WithholdingStatementType) o;
    return Objects.equals(this.accountId, withholdingStatementType.accountId) &&
        Objects.equals(this.fatcaCompliantType, withholdingStatementType.fatcaCompliantType) &&
        Objects.equals(this.usBackupWithholding, withholdingStatementType.usBackupWithholding) &&
        Objects.equals(this.treatyCountry, withholdingStatementType.treatyCountry) &&
        Objects.equals(this.corporation, withholdingStatementType.corporation) &&
        Objects.equals(this.flowThrough, withholdingStatementType.flowThrough) &&
        Objects.equals(this.effectiveDate, withholdingStatementType.effectiveDate) &&
        Objects.equals(this.dividendRate, withholdingStatementType.dividendRate) &&
        Objects.equals(this.interestRate, withholdingStatementType.interestRate) &&
        Objects.equals(this.usOtherRate, withholdingStatementType.usOtherRate) &&
        Objects.equals(this.eciRate, withholdingStatementType.eciRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, fatcaCompliantType, usBackupWithholding, treatyCountry, corporation, flowThrough, effectiveDate, dividendRate, interestRate, usOtherRate, eciRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WithholdingStatementType {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    fatcaCompliantType: ").append(toIndentedString(fatcaCompliantType)).append("\n");
    sb.append("    usBackupWithholding: ").append(toIndentedString(usBackupWithholding)).append("\n");
    sb.append("    treatyCountry: ").append(toIndentedString(treatyCountry)).append("\n");
    sb.append("    corporation: ").append(toIndentedString(corporation)).append("\n");
    sb.append("    flowThrough: ").append(toIndentedString(flowThrough)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    dividendRate: ").append(toIndentedString(dividendRate)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    usOtherRate: ").append(toIndentedString(usOtherRate)).append("\n");
    sb.append("    eciRate: ").append(toIndentedString(eciRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("fatcaCompliantType");
    openapiFields.add("usBackupWithholding");
    openapiFields.add("treatyCountry");
    openapiFields.add("corporation");
    openapiFields.add("flowThrough");
    openapiFields.add("effectiveDate");
    openapiFields.add("dividendRate");
    openapiFields.add("interestRate");
    openapiFields.add("usOtherRate");
    openapiFields.add("eciRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WithholdingStatementType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WithholdingStatementType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WithholdingStatementType is not found in the empty JSON string", WithholdingStatementType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WithholdingStatementType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WithholdingStatementType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("fatcaCompliantType") != null && !jsonObj.get("fatcaCompliantType").isJsonNull()) && !jsonObj.get("fatcaCompliantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fatcaCompliantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fatcaCompliantType").toString()));
      }
      // validate the optional field `fatcaCompliantType`
      if (jsonObj.get("fatcaCompliantType") != null && !jsonObj.get("fatcaCompliantType").isJsonNull()) {
        FatcaCompliantTypeEnum.validateJsonElement(jsonObj.get("fatcaCompliantType"));
      }
      if ((jsonObj.get("treatyCountry") != null && !jsonObj.get("treatyCountry").isJsonNull()) && !jsonObj.get("treatyCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatyCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatyCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WithholdingStatementType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WithholdingStatementType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WithholdingStatementType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WithholdingStatementType.class));

       return (TypeAdapter<T>) new TypeAdapter<WithholdingStatementType>() {
           @Override
           public void write(JsonWriter out, WithholdingStatementType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WithholdingStatementType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WithholdingStatementType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WithholdingStatementType
   * @throws IOException if the JSON string is invalid with respect to WithholdingStatementType
   */
  public static WithholdingStatementType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WithholdingStatementType.class);
  }

  /**
   * Convert an instance of WithholdingStatementType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

