/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.ACHInstruction;
import org.openapitools.client.model.IRAWithdrawalDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecurringTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class RecurringTransaction {
  public static final String SERIALIZED_NAME_ACH_INSTRUCTION = "achInstruction";
  @SerializedName(SERIALIZED_NAME_ACH_INSTRUCTION)
  @javax.annotation.Nullable
  private ACHInstruction achInstruction;

  public static final String SERIALIZED_NAME_IRA_WITHDRAWAL_DETAILS = "iraWithdrawalDetails";
  @SerializedName(SERIALIZED_NAME_IRA_WITHDRAWAL_DETAILS)
  @javax.annotation.Nullable
  private IRAWithdrawalDetails iraWithdrawalDetails;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DEPOSIT("DEPOSIT"),
    
    WITHDRAWAL("WITHDRAWAL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    CHECK("CHECK"),
    
    WIRE("WIRE"),
    
    ACH("ACH"),
    
    SKIP_DEPOSIT("SKIP_DEPOSIT");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nullable
  private MethodEnum method;

  public static final String SERIALIZED_NAME_INSTRUCTION = "instruction";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION)
  @javax.annotation.Nullable
  private String instruction;

  /**
   * Gets or Sets frequency
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    YEARLY("YEARLY");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  @javax.annotation.Nullable
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nullable
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal amount;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    USD("USD"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    CAD("CAD"),
    
    JPY("JPY"),
    
    HKD("HKD"),
    
    AUD("AUD"),
    
    CHF("CHF"),
    
    MXN("MXN"),
    
    SEK("SEK"),
    
    NZD("NZD"),
    
    HUF("HUF"),
    
    CZK("CZK"),
    
    CNH("CNH"),
    
    DKK("DKK"),
    
    RUB("RUB"),
    
    ILS("ILS"),
    
    NOK("NOK"),
    
    SGD("SGD"),
    
    PLN("PLN"),
    
    ZAR("ZAR"),
    
    AED("AED"),
    
    KRW("KRW"),
    
    SAR("SAR"),
    
    TRY("TRY");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_IB_ACCOUNT = "ibAccount";
  @SerializedName(SERIALIZED_NAME_IB_ACCOUNT)
  @javax.annotation.Nullable
  private String ibAccount;

  public RecurringTransaction() {
  }

  public RecurringTransaction achInstruction(@javax.annotation.Nullable ACHInstruction achInstruction) {
    this.achInstruction = achInstruction;
    return this;
  }

  /**
   * Get achInstruction
   * @return achInstruction
   */
  @javax.annotation.Nullable
  public ACHInstruction getAchInstruction() {
    return achInstruction;
  }

  public void setAchInstruction(@javax.annotation.Nullable ACHInstruction achInstruction) {
    this.achInstruction = achInstruction;
  }


  public RecurringTransaction iraWithdrawalDetails(@javax.annotation.Nullable IRAWithdrawalDetails iraWithdrawalDetails) {
    this.iraWithdrawalDetails = iraWithdrawalDetails;
    return this;
  }

  /**
   * Get iraWithdrawalDetails
   * @return iraWithdrawalDetails
   */
  @javax.annotation.Nullable
  public IRAWithdrawalDetails getIraWithdrawalDetails() {
    return iraWithdrawalDetails;
  }

  public void setIraWithdrawalDetails(@javax.annotation.Nullable IRAWithdrawalDetails iraWithdrawalDetails) {
    this.iraWithdrawalDetails = iraWithdrawalDetails;
  }


  public RecurringTransaction type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public RecurringTransaction method(@javax.annotation.Nullable MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nullable MethodEnum method) {
    this.method = method;
  }


  public RecurringTransaction instruction(@javax.annotation.Nullable String instruction) {
    this.instruction = instruction;
    return this;
  }

  /**
   * Get instruction
   * @return instruction
   */
  @javax.annotation.Nullable
  public String getInstruction() {
    return instruction;
  }

  public void setInstruction(@javax.annotation.Nullable String instruction) {
    this.instruction = instruction;
  }


  public RecurringTransaction frequency(@javax.annotation.Nullable FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(@javax.annotation.Nullable FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public RecurringTransaction startDate(@javax.annotation.Nullable LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable LocalDate startDate) {
    this.startDate = startDate;
  }


  public RecurringTransaction endDate(@javax.annotation.Nullable LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nullable LocalDate endDate) {
    this.endDate = endDate;
  }


  public RecurringTransaction name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public RecurringTransaction amount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable BigDecimal amount) {
    this.amount = amount;
  }


  public RecurringTransaction currency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable CurrencyEnum currency) {
    this.currency = currency;
  }


  public RecurringTransaction ibAccount(@javax.annotation.Nullable String ibAccount) {
    this.ibAccount = ibAccount;
    return this;
  }

  /**
   * Get ibAccount
   * @return ibAccount
   */
  @javax.annotation.Nullable
  public String getIbAccount() {
    return ibAccount;
  }

  public void setIbAccount(@javax.annotation.Nullable String ibAccount) {
    this.ibAccount = ibAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringTransaction recurringTransaction = (RecurringTransaction) o;
    return Objects.equals(this.achInstruction, recurringTransaction.achInstruction) &&
        Objects.equals(this.iraWithdrawalDetails, recurringTransaction.iraWithdrawalDetails) &&
        Objects.equals(this.type, recurringTransaction.type) &&
        Objects.equals(this.method, recurringTransaction.method) &&
        Objects.equals(this.instruction, recurringTransaction.instruction) &&
        Objects.equals(this.frequency, recurringTransaction.frequency) &&
        Objects.equals(this.startDate, recurringTransaction.startDate) &&
        Objects.equals(this.endDate, recurringTransaction.endDate) &&
        Objects.equals(this.name, recurringTransaction.name) &&
        Objects.equals(this.amount, recurringTransaction.amount) &&
        Objects.equals(this.currency, recurringTransaction.currency) &&
        Objects.equals(this.ibAccount, recurringTransaction.ibAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achInstruction, iraWithdrawalDetails, type, method, instruction, frequency, startDate, endDate, name, amount, currency, ibAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringTransaction {\n");
    sb.append("    achInstruction: ").append(toIndentedString(achInstruction)).append("\n");
    sb.append("    iraWithdrawalDetails: ").append(toIndentedString(iraWithdrawalDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    instruction: ").append(toIndentedString(instruction)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    ibAccount: ").append(toIndentedString(ibAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achInstruction");
    openapiFields.add("iraWithdrawalDetails");
    openapiFields.add("type");
    openapiFields.add("method");
    openapiFields.add("instruction");
    openapiFields.add("frequency");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("name");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("ibAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurringTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurringTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurringTransaction is not found in the empty JSON string", RecurringTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurringTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurringTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `achInstruction`
      if (jsonObj.get("achInstruction") != null && !jsonObj.get("achInstruction").isJsonNull()) {
        ACHInstruction.validateJsonElement(jsonObj.get("achInstruction"));
      }
      // validate the optional field `iraWithdrawalDetails`
      if (jsonObj.get("iraWithdrawalDetails") != null && !jsonObj.get("iraWithdrawalDetails").isJsonNull()) {
        IRAWithdrawalDetails.validateJsonElement(jsonObj.get("iraWithdrawalDetails"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("instruction") != null && !jsonObj.get("instruction").isJsonNull()) && !jsonObj.get("instruction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instruction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instruction").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("ibAccount") != null && !jsonObj.get("ibAccount").isJsonNull()) && !jsonObj.get("ibAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ibAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ibAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurringTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurringTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurringTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurringTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurringTransaction>() {
           @Override
           public void write(JsonWriter out, RecurringTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurringTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurringTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurringTransaction
   * @throws IOException if the JSON string is invalid with respect to RecurringTransaction
   */
  public static RecurringTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurringTransaction.class);
  }

  /**
   * Convert an instance of RecurringTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

