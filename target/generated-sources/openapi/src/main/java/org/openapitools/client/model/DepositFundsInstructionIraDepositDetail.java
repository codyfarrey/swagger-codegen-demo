/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DepositFundsInstructionIraDepositDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class DepositFundsInstructionIraDepositDetail {
  /**
   * Gets or Sets iraContributionType
   */
  @JsonAdapter(IraContributionTypeEnum.Adapter.class)
  public enum IraContributionTypeEnum {
    ROLLOVER("ROLLOVER"),
    
    LATE_ROLLOVER("LATE_ROLLOVER"),
    
    DIRECT_ROLLOVER("DIRECT_ROLLOVER"),
    
    CONTRIBUTION("CONTRIBUTION"),
    
    SPOUSAL_CONTRIBUTION("SPOUSAL_CONTRIBUTION"),
    
    EMPLOYER_SEP_CONTRIBUTION("EMPLOYER_SEP_CONTRIBUTION");

    private String value;

    IraContributionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IraContributionTypeEnum fromValue(String value) {
      for (IraContributionTypeEnum b : IraContributionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IraContributionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IraContributionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IraContributionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IraContributionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IraContributionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IRA_CONTRIBUTION_TYPE = "iraContributionType";
  @SerializedName(SERIALIZED_NAME_IRA_CONTRIBUTION_TYPE)
  @javax.annotation.Nonnull
  private IraContributionTypeEnum iraContributionType;

  /**
   * Gets or Sets iraTaxYearType
   */
  @JsonAdapter(IraTaxYearTypeEnum.Adapter.class)
  public enum IraTaxYearTypeEnum {
    CURRENT("CURRENT"),
    
    PRIOR("PRIOR");

    private String value;

    IraTaxYearTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IraTaxYearTypeEnum fromValue(String value) {
      for (IraTaxYearTypeEnum b : IraTaxYearTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IraTaxYearTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IraTaxYearTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IraTaxYearTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IraTaxYearTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IraTaxYearTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IRA_TAX_YEAR_TYPE = "iraTaxYearType";
  @SerializedName(SERIALIZED_NAME_IRA_TAX_YEAR_TYPE)
  @javax.annotation.Nonnull
  private IraTaxYearTypeEnum iraTaxYearType;

  /**
   * Gets or Sets fromIraType
   */
  @JsonAdapter(FromIraTypeEnum.Adapter.class)
  public enum FromIraTypeEnum {
    NONE("NONE"),
    
    TRADITIONAL("TRADITIONAL"),
    
    ROLLOVER("ROLLOVER"),
    
    ROTH("ROTH"),
    
    SEP("SEP"),
    
    EDUCATION("EDUCATION"),
    
    TRADITIONAL_INHERITED("TRADITIONAL_INHERITED"),
    
    ROTH_INHERITED("ROTH_INHERITED"),
    
    SEP_INHERITED("SEP_INHERITED"),
    
    RETIREMENT_SAVING_PLAN("RETIREMENT_SAVING_PLAN"),
    
    SPOUSAL_RETIREMENT_SAVING_PLAN("SPOUSAL_RETIREMENT_SAVING_PLAN"),
    
    TAX_FREE_SAVING_ACCOUNT("TAX_FREE_SAVING_ACCOUNT");

    private String value;

    FromIraTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromIraTypeEnum fromValue(String value) {
      for (FromIraTypeEnum b : FromIraTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromIraTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromIraTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromIraTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromIraTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FromIraTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FROM_IRA_TYPE = "fromIraType";
  @SerializedName(SERIALIZED_NAME_FROM_IRA_TYPE)
  @javax.annotation.Nonnull
  private FromIraTypeEnum fromIraType;

  public DepositFundsInstructionIraDepositDetail() {
  }

  public DepositFundsInstructionIraDepositDetail iraContributionType(@javax.annotation.Nonnull IraContributionTypeEnum iraContributionType) {
    this.iraContributionType = iraContributionType;
    return this;
  }

  /**
   * Get iraContributionType
   * @return iraContributionType
   */
  @javax.annotation.Nonnull
  public IraContributionTypeEnum getIraContributionType() {
    return iraContributionType;
  }

  public void setIraContributionType(@javax.annotation.Nonnull IraContributionTypeEnum iraContributionType) {
    this.iraContributionType = iraContributionType;
  }


  public DepositFundsInstructionIraDepositDetail iraTaxYearType(@javax.annotation.Nonnull IraTaxYearTypeEnum iraTaxYearType) {
    this.iraTaxYearType = iraTaxYearType;
    return this;
  }

  /**
   * Get iraTaxYearType
   * @return iraTaxYearType
   */
  @javax.annotation.Nonnull
  public IraTaxYearTypeEnum getIraTaxYearType() {
    return iraTaxYearType;
  }

  public void setIraTaxYearType(@javax.annotation.Nonnull IraTaxYearTypeEnum iraTaxYearType) {
    this.iraTaxYearType = iraTaxYearType;
  }


  public DepositFundsInstructionIraDepositDetail fromIraType(@javax.annotation.Nonnull FromIraTypeEnum fromIraType) {
    this.fromIraType = fromIraType;
    return this;
  }

  /**
   * Get fromIraType
   * @return fromIraType
   */
  @javax.annotation.Nonnull
  public FromIraTypeEnum getFromIraType() {
    return fromIraType;
  }

  public void setFromIraType(@javax.annotation.Nonnull FromIraTypeEnum fromIraType) {
    this.fromIraType = fromIraType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositFundsInstructionIraDepositDetail depositFundsInstructionIraDepositDetail = (DepositFundsInstructionIraDepositDetail) o;
    return Objects.equals(this.iraContributionType, depositFundsInstructionIraDepositDetail.iraContributionType) &&
        Objects.equals(this.iraTaxYearType, depositFundsInstructionIraDepositDetail.iraTaxYearType) &&
        Objects.equals(this.fromIraType, depositFundsInstructionIraDepositDetail.fromIraType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iraContributionType, iraTaxYearType, fromIraType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositFundsInstructionIraDepositDetail {\n");
    sb.append("    iraContributionType: ").append(toIndentedString(iraContributionType)).append("\n");
    sb.append("    iraTaxYearType: ").append(toIndentedString(iraTaxYearType)).append("\n");
    sb.append("    fromIraType: ").append(toIndentedString(fromIraType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iraContributionType");
    openapiFields.add("iraTaxYearType");
    openapiFields.add("fromIraType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iraContributionType");
    openapiRequiredFields.add("iraTaxYearType");
    openapiRequiredFields.add("fromIraType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DepositFundsInstructionIraDepositDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DepositFundsInstructionIraDepositDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepositFundsInstructionIraDepositDetail is not found in the empty JSON string", DepositFundsInstructionIraDepositDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DepositFundsInstructionIraDepositDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DepositFundsInstructionIraDepositDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DepositFundsInstructionIraDepositDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("iraContributionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iraContributionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iraContributionType").toString()));
      }
      // validate the required field `iraContributionType`
      IraContributionTypeEnum.validateJsonElement(jsonObj.get("iraContributionType"));
      if (!jsonObj.get("iraTaxYearType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iraTaxYearType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iraTaxYearType").toString()));
      }
      // validate the required field `iraTaxYearType`
      IraTaxYearTypeEnum.validateJsonElement(jsonObj.get("iraTaxYearType"));
      if (!jsonObj.get("fromIraType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromIraType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromIraType").toString()));
      }
      // validate the required field `fromIraType`
      FromIraTypeEnum.validateJsonElement(jsonObj.get("fromIraType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepositFundsInstructionIraDepositDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepositFundsInstructionIraDepositDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepositFundsInstructionIraDepositDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepositFundsInstructionIraDepositDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DepositFundsInstructionIraDepositDetail>() {
           @Override
           public void write(JsonWriter out, DepositFundsInstructionIraDepositDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DepositFundsInstructionIraDepositDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DepositFundsInstructionIraDepositDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DepositFundsInstructionIraDepositDetail
   * @throws IOException if the JSON string is invalid with respect to DepositFundsInstructionIraDepositDetail
   */
  public static DepositFundsInstructionIraDepositDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepositFundsInstructionIraDepositDetail.class);
  }

  /**
   * Convert an instance of DepositFundsInstructionIraDepositDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

