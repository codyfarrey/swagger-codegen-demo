/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BrokerageSessionStatusServerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BrokerageSessionStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class BrokerageSessionStatus {
  public static final String SERIALIZED_NAME_AUTHENTICATED = "authenticated";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED)
  @javax.annotation.Nullable
  private Boolean authenticated;

  public static final String SERIALIZED_NAME_COMPETING = "competing";
  @SerializedName(SERIALIZED_NAME_COMPETING)
  @javax.annotation.Nullable
  private Boolean competing;

  public static final String SERIALIZED_NAME_CONNECTED = "connected";
  @SerializedName(SERIALIZED_NAME_CONNECTED)
  @javax.annotation.Nullable
  private Boolean connected;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_M_A_C = "MAC";
  @SerializedName(SERIALIZED_NAME_M_A_C)
  @javax.annotation.Nullable
  private String MAC;

  public static final String SERIALIZED_NAME_SERVER_INFO = "serverInfo";
  @SerializedName(SERIALIZED_NAME_SERVER_INFO)
  @javax.annotation.Nullable
  private BrokerageSessionStatusServerInfo serverInfo;

  public BrokerageSessionStatus() {
  }

  public BrokerageSessionStatus authenticated(@javax.annotation.Nullable Boolean authenticated) {
    this.authenticated = authenticated;
    return this;
  }

  /**
   * Returns whether your brokerage session is authenticated or not.
   * @return authenticated
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticated() {
    return authenticated;
  }

  public void setAuthenticated(@javax.annotation.Nullable Boolean authenticated) {
    this.authenticated = authenticated;
  }


  public BrokerageSessionStatus competing(@javax.annotation.Nullable Boolean competing) {
    this.competing = competing;
    return this;
  }

  /**
   * Returns whether you have a competing brokerage session in another connection.
   * @return competing
   */
  @javax.annotation.Nullable
  public Boolean getCompeting() {
    return competing;
  }

  public void setCompeting(@javax.annotation.Nullable Boolean competing) {
    this.competing = competing;
  }


  public BrokerageSessionStatus connected(@javax.annotation.Nullable Boolean connected) {
    this.connected = connected;
    return this;
  }

  /**
   * Returns whether you are connected to the gateway or not.
   * @return connected
   */
  @javax.annotation.Nullable
  public Boolean getConnected() {
    return connected;
  }

  public void setConnected(@javax.annotation.Nullable Boolean connected) {
    this.connected = connected;
  }


  public BrokerageSessionStatus message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * A message about your authenticate status if any.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public BrokerageSessionStatus MAC(@javax.annotation.Nullable String MAC) {
    this.MAC = MAC;
    return this;
  }

  /**
   * Device MAC information.
   * @return MAC
   */
  @javax.annotation.Nullable
  public String getMAC() {
    return MAC;
  }

  public void setMAC(@javax.annotation.Nullable String MAC) {
    this.MAC = MAC;
  }


  public BrokerageSessionStatus serverInfo(@javax.annotation.Nullable BrokerageSessionStatusServerInfo serverInfo) {
    this.serverInfo = serverInfo;
    return this;
  }

  /**
   * Get serverInfo
   * @return serverInfo
   */
  @javax.annotation.Nullable
  public BrokerageSessionStatusServerInfo getServerInfo() {
    return serverInfo;
  }

  public void setServerInfo(@javax.annotation.Nullable BrokerageSessionStatusServerInfo serverInfo) {
    this.serverInfo = serverInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrokerageSessionStatus brokerageSessionStatus = (BrokerageSessionStatus) o;
    return Objects.equals(this.authenticated, brokerageSessionStatus.authenticated) &&
        Objects.equals(this.competing, brokerageSessionStatus.competing) &&
        Objects.equals(this.connected, brokerageSessionStatus.connected) &&
        Objects.equals(this.message, brokerageSessionStatus.message) &&
        Objects.equals(this.MAC, brokerageSessionStatus.MAC) &&
        Objects.equals(this.serverInfo, brokerageSessionStatus.serverInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticated, competing, connected, message, MAC, serverInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrokerageSessionStatus {\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("    competing: ").append(toIndentedString(competing)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    MAC: ").append(toIndentedString(MAC)).append("\n");
    sb.append("    serverInfo: ").append(toIndentedString(serverInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticated");
    openapiFields.add("competing");
    openapiFields.add("connected");
    openapiFields.add("message");
    openapiFields.add("MAC");
    openapiFields.add("serverInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrokerageSessionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrokerageSessionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrokerageSessionStatus is not found in the empty JSON string", BrokerageSessionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrokerageSessionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrokerageSessionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("MAC") != null && !jsonObj.get("MAC").isJsonNull()) && !jsonObj.get("MAC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MAC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MAC").toString()));
      }
      // validate the optional field `serverInfo`
      if (jsonObj.get("serverInfo") != null && !jsonObj.get("serverInfo").isJsonNull()) {
        BrokerageSessionStatusServerInfo.validateJsonElement(jsonObj.get("serverInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrokerageSessionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrokerageSessionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrokerageSessionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrokerageSessionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<BrokerageSessionStatus>() {
           @Override
           public void write(JsonWriter out, BrokerageSessionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrokerageSessionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrokerageSessionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrokerageSessionStatus
   * @throws IOException if the JSON string is invalid with respect to BrokerageSessionStatus
   */
  public static BrokerageSessionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrokerageSessionStatus.class);
  }

  /**
   * Convert an instance of BrokerageSessionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

