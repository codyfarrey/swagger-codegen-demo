/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PredefinedDestinationInstructionFinancialInstitution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class PredefinedDestinationInstructionFinancialInstitution {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branchCode";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  @javax.annotation.Nullable
  private String branchCode;

  /**
   * Gets or Sets branchCodeType
   */
  @JsonAdapter(BranchCodeTypeEnum.Adapter.class)
  public enum BranchCodeTypeEnum {
    BSB_AUD("BSB_AUD"),
    
    BANK_CODE_CAD("BANK_CODE_CAD"),
    
    NONE("NONE");

    private String value;

    BranchCodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BranchCodeTypeEnum fromValue(String value) {
      for (BranchCodeTypeEnum b : BranchCodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BranchCodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BranchCodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BranchCodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BranchCodeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BranchCodeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRANCH_CODE_TYPE = "branchCodeType";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE_TYPE)
  @javax.annotation.Nullable
  private BranchCodeTypeEnum branchCodeType;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  @javax.annotation.Nonnull
  private String identifier;

  public static final String SERIALIZED_NAME_IDENTIFIER_TYPE = "identifierType";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_TYPE)
  @javax.annotation.Nonnull
  private String identifierType;

  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_ID = "clientAccountId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String clientAccountId;

  public PredefinedDestinationInstructionFinancialInstitution() {
  }

  public PredefinedDestinationInstructionFinancialInstitution name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public PredefinedDestinationInstructionFinancialInstitution branchCode(@javax.annotation.Nullable String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

  /**
   * Get branchCode
   * @return branchCode
   */
  @javax.annotation.Nullable
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(@javax.annotation.Nullable String branchCode) {
    this.branchCode = branchCode;
  }


  public PredefinedDestinationInstructionFinancialInstitution branchCodeType(@javax.annotation.Nullable BranchCodeTypeEnum branchCodeType) {
    this.branchCodeType = branchCodeType;
    return this;
  }

  /**
   * Get branchCodeType
   * @return branchCodeType
   */
  @javax.annotation.Nullable
  public BranchCodeTypeEnum getBranchCodeType() {
    return branchCodeType;
  }

  public void setBranchCodeType(@javax.annotation.Nullable BranchCodeTypeEnum branchCodeType) {
    this.branchCodeType = branchCodeType;
  }


  public PredefinedDestinationInstructionFinancialInstitution identifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
  }


  public PredefinedDestinationInstructionFinancialInstitution identifierType(@javax.annotation.Nonnull String identifierType) {
    this.identifierType = identifierType;
    return this;
  }

  /**
   * Get identifierType
   * @return identifierType
   */
  @javax.annotation.Nonnull
  public String getIdentifierType() {
    return identifierType;
  }

  public void setIdentifierType(@javax.annotation.Nonnull String identifierType) {
    this.identifierType = identifierType;
  }


  public PredefinedDestinationInstructionFinancialInstitution clientAccountId(@javax.annotation.Nonnull String clientAccountId) {
    this.clientAccountId = clientAccountId;
    return this;
  }

  /**
   * Get clientAccountId
   * @return clientAccountId
   */
  @javax.annotation.Nonnull
  public String getClientAccountId() {
    return clientAccountId;
  }

  public void setClientAccountId(@javax.annotation.Nonnull String clientAccountId) {
    this.clientAccountId = clientAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredefinedDestinationInstructionFinancialInstitution predefinedDestinationInstructionFinancialInstitution = (PredefinedDestinationInstructionFinancialInstitution) o;
    return Objects.equals(this.name, predefinedDestinationInstructionFinancialInstitution.name) &&
        Objects.equals(this.branchCode, predefinedDestinationInstructionFinancialInstitution.branchCode) &&
        Objects.equals(this.branchCodeType, predefinedDestinationInstructionFinancialInstitution.branchCodeType) &&
        Objects.equals(this.identifier, predefinedDestinationInstructionFinancialInstitution.identifier) &&
        Objects.equals(this.identifierType, predefinedDestinationInstructionFinancialInstitution.identifierType) &&
        Objects.equals(this.clientAccountId, predefinedDestinationInstructionFinancialInstitution.clientAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, branchCode, branchCodeType, identifier, identifierType, clientAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredefinedDestinationInstructionFinancialInstitution {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    branchCodeType: ").append(toIndentedString(branchCodeType)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    identifierType: ").append(toIndentedString(identifierType)).append("\n");
    sb.append("    clientAccountId: ").append(toIndentedString(clientAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("branchCode");
    openapiFields.add("branchCodeType");
    openapiFields.add("identifier");
    openapiFields.add("identifierType");
    openapiFields.add("clientAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("identifierType");
    openapiRequiredFields.add("clientAccountId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredefinedDestinationInstructionFinancialInstitution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredefinedDestinationInstructionFinancialInstitution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredefinedDestinationInstructionFinancialInstitution is not found in the empty JSON string", PredefinedDestinationInstructionFinancialInstitution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredefinedDestinationInstructionFinancialInstitution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredefinedDestinationInstructionFinancialInstitution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PredefinedDestinationInstructionFinancialInstitution.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("branchCode") != null && !jsonObj.get("branchCode").isJsonNull()) && !jsonObj.get("branchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchCode").toString()));
      }
      if ((jsonObj.get("branchCodeType") != null && !jsonObj.get("branchCodeType").isJsonNull()) && !jsonObj.get("branchCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchCodeType").toString()));
      }
      // validate the optional field `branchCodeType`
      if (jsonObj.get("branchCodeType") != null && !jsonObj.get("branchCodeType").isJsonNull()) {
        BranchCodeTypeEnum.validateJsonElement(jsonObj.get("branchCodeType"));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (!jsonObj.get("identifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierType").toString()));
      }
      if (!jsonObj.get("clientAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredefinedDestinationInstructionFinancialInstitution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredefinedDestinationInstructionFinancialInstitution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredefinedDestinationInstructionFinancialInstitution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredefinedDestinationInstructionFinancialInstitution.class));

       return (TypeAdapter<T>) new TypeAdapter<PredefinedDestinationInstructionFinancialInstitution>() {
           @Override
           public void write(JsonWriter out, PredefinedDestinationInstructionFinancialInstitution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredefinedDestinationInstructionFinancialInstitution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredefinedDestinationInstructionFinancialInstitution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredefinedDestinationInstructionFinancialInstitution
   * @throws IOException if the JSON string is invalid with respect to PredefinedDestinationInstructionFinancialInstitution
   */
  public static PredefinedDestinationInstructionFinancialInstitution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredefinedDestinationInstructionFinancialInstitution.class);
  }

  /**
   * Convert an instance of PredefinedDestinationInstructionFinancialInstitution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

