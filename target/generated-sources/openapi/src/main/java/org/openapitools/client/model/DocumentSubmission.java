/*
 * IB REST API
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: api@interactivebrokers.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Document;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentSubmission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-18T20:44:00.611784800-05:00[America/Chicago]", comments = "Generator version: 7.12.0")
public class DocumentSubmission {
  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  @javax.annotation.Nullable
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  /**
   * Gets or Sets inputLanguage
   */
  @JsonAdapter(InputLanguageEnum.Adapter.class)
  public enum InputLanguageEnum {
    EN("en"),
    
    ZH_HANS("zh-Hans"),
    
    JA("ja"),
    
    RU("ru"),
    
    FR("fr"),
    
    PT("pt"),
    
    ES("es"),
    
    IT("it"),
    
    AR_AE("ar-AE"),
    
    DE("de"),
    
    HE_IL("he-IL"),
    
    HU("hu");

    private String value;

    InputLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InputLanguageEnum fromValue(String value) {
      for (InputLanguageEnum b : InputLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InputLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InputLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InputLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InputLanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InputLanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INPUT_LANGUAGE = "inputLanguage";
  @SerializedName(SERIALIZED_NAME_INPUT_LANGUAGE)
  @javax.annotation.Nullable
  private InputLanguageEnum inputLanguage;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  @javax.annotation.Nullable
  private Boolean translation;

  public DocumentSubmission() {
  }

  public DocumentSubmission documents(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
    return this;
  }

  public DocumentSubmission addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<Document> getDocuments() {
    return documents;
  }

  public void setDocuments(@javax.annotation.Nullable List<Document> documents) {
    this.documents = documents;
  }


  public DocumentSubmission accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public DocumentSubmission inputLanguage(@javax.annotation.Nullable InputLanguageEnum inputLanguage) {
    this.inputLanguage = inputLanguage;
    return this;
  }

  /**
   * Get inputLanguage
   * @return inputLanguage
   */
  @javax.annotation.Nullable
  public InputLanguageEnum getInputLanguage() {
    return inputLanguage;
  }

  public void setInputLanguage(@javax.annotation.Nullable InputLanguageEnum inputLanguage) {
    this.inputLanguage = inputLanguage;
  }


  public DocumentSubmission translation(@javax.annotation.Nullable Boolean translation) {
    this.translation = translation;
    return this;
  }

  /**
   * Get translation
   * @return translation
   */
  @javax.annotation.Nullable
  public Boolean getTranslation() {
    return translation;
  }

  public void setTranslation(@javax.annotation.Nullable Boolean translation) {
    this.translation = translation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSubmission documentSubmission = (DocumentSubmission) o;
    return Objects.equals(this.documents, documentSubmission.documents) &&
        Objects.equals(this.accountId, documentSubmission.accountId) &&
        Objects.equals(this.inputLanguage, documentSubmission.inputLanguage) &&
        Objects.equals(this.translation, documentSubmission.translation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, accountId, inputLanguage, translation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSubmission {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    inputLanguage: ").append(toIndentedString(inputLanguage)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documents");
    openapiFields.add("accountId");
    openapiFields.add("inputLanguage");
    openapiFields.add("translation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSubmission is not found in the empty JSON string", DocumentSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            Document.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("inputLanguage") != null && !jsonObj.get("inputLanguage").isJsonNull()) && !jsonObj.get("inputLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputLanguage").toString()));
      }
      // validate the optional field `inputLanguage`
      if (jsonObj.get("inputLanguage") != null && !jsonObj.get("inputLanguage").isJsonNull()) {
        InputLanguageEnum.validateJsonElement(jsonObj.get("inputLanguage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSubmission>() {
           @Override
           public void write(JsonWriter out, DocumentSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSubmission
   * @throws IOException if the JSON string is invalid with respect to DocumentSubmission
   */
  public static DocumentSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSubmission.class);
  }

  /**
   * Convert an instance of DocumentSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

